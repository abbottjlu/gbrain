(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KERNEL_ADJMATRIX_UPDATE = exports.KERNEL_ADJMATRIX_UPDATE = function () {
    function KERNEL_ADJMATRIX_UPDATE() {
        _classCallCheck(this, KERNEL_ADJMATRIX_UPDATE);
    }

    _createClass(KERNEL_ADJMATRIX_UPDATE, null, [{
        key: "getSrc",
        value: function getSrc(geometryLength) {
            return ["x", ["adjacencyMatrix"],
            // head
            "",

            // source
            "vec4 adjMat = adjacencyMatrix[x]; \n            vec4 adjMatB = adjacencyMatrixB[x];\n\n            float linkLayerNum = adjMat.x;\n            float linkWeight = adjMat.z;\n            float linkTypeParent = adjMat.w;\n            \n            if(linkTypeParent == 0.5 && linkLayerNum > 0.0) {\n                float id = adjMatB.z;\n                float idInv = adjMatB.w;\n            \n                vec2 xGeometryCurrentChild = get_global_id(id, bufferNodesWidth, " + geometryLength.toFixed(1) + ");\n                vec2 xGeometryParent = get_global_id(idInv, bufferNodesWidth, " + geometryLength.toFixed(1) + ");\n\n                float childGOutputA = dataB[xGeometryCurrentChild].z;\n                float parentGErrorA = dataB[xGeometryParent].w;\n                \n                float childGOutputB = dataF[xGeometryCurrentChild].x;\n                float parentGErrorB = dataF[xGeometryParent].y;\n                \n                float childGOutputC = dataF[xGeometryCurrentChild].z;\n                float parentGErrorC = dataF[xGeometryParent].w;\n                \n                float childGOutputD = dataG[xGeometryCurrentChild].x;\n                float parentGErrorD = dataG[xGeometryParent].y;\n                \n                float childGOutputE = dataG[xGeometryCurrentChild].z;\n                float parentGErrorE = dataG[xGeometryParent].w;\n                \n                float childGOutputF = dataH[xGeometryCurrentChild].x;\n                float parentGErrorF = dataH[xGeometryParent].y;\n                \n                float childGOutputG = dataH[xGeometryCurrentChild].z;\n                float parentGErrorG = dataH[xGeometryParent].w;\n            \n                float lr = learningRate;\n                float l2_decay = 0.01;\n                float gpu_batch_size = 7.0;\n                float br = gpu_batch_repeats;\n                \n                float derivA = (childGOutputA < 0.0) ? 0.01 : childGOutputA;\n                float derivB = (childGOutputB < 0.0) ? 0.01 : childGOutputB;\n                float derivC = (childGOutputC < 0.0) ? 0.01 : childGOutputC;\n                float derivD = (childGOutputD < 0.0) ? 0.01 : childGOutputD;\n                float derivE = (childGOutputE < 0.0) ? 0.01 : childGOutputE;\n                float derivF = (childGOutputF < 0.0) ? 0.01 : childGOutputF;\n                float derivG = (childGOutputG < 0.0) ? 0.01 : childGOutputG;\n                \n                if(linkLayerNum == layerCount-1.0) {\n                    derivA = childGOutputA;\n                    derivB = childGOutputB;\n                    derivC = childGOutputC;\n                    derivD = childGOutputD;\n                    derivE = childGOutputE;\n                    derivF = childGOutputF;\n                    derivG = childGOutputG;\n                }\n                \n                float bsm = 0.0;\n                bsm = (parentGErrorA != 0.0) ? bsm+1. : bsm;\n                bsm = (parentGErrorB != 0.0) ? bsm+1. : bsm;\n                bsm = (parentGErrorC != 0.0) ? bsm+1. : bsm;\n                bsm = (parentGErrorD != 0.0) ? bsm+1. : bsm;\n                bsm = (parentGErrorE != 0.0) ? bsm+1. : bsm;\n                bsm = (parentGErrorF != 0.0) ? bsm+1. : bsm;\n                bsm = (parentGErrorG != 0.0) ? bsm+1. : bsm;\n                \n                linkWeight += (-lr*parentGErrorA*derivA)/(bsm*br);\n                if(parentGErrorB != 0.0) {linkWeight += (-lr*parentGErrorB*derivB)/(bsm*br);}\n                if(parentGErrorC != 0.0) {linkWeight += (-lr*parentGErrorC*derivC)/(bsm*br);}\n                if(parentGErrorD != 0.0) {linkWeight += (-lr*parentGErrorD*derivD)/(bsm*br);}\n                if(parentGErrorE != 0.0) {linkWeight += (-lr*parentGErrorE*derivE)/(bsm*br);}\n                if(parentGErrorF != 0.0) {linkWeight += (-lr*parentGErrorF*derivF)/(bsm*br);}\n                if(parentGErrorG != 0.0) {linkWeight += (-lr*parentGErrorG*derivG)/(bsm*br);}\n            }\n            \n            return [vec4(linkLayerNum, 0.0, linkWeight, linkTypeParent)];\n            "];
        }
    }]);

    return KERNEL_ADJMATRIX_UPDATE;
}();

global.KERNEL_ADJMATRIX_UPDATE = KERNEL_ADJMATRIX_UPDATE;
module.exports.KERNEL_ADJMATRIX_UPDATE = KERNEL_ADJMATRIX_UPDATE;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
