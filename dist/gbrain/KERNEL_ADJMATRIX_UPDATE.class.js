(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var KERNEL_ADJMATRIX_UPDATE = exports.KERNEL_ADJMATRIX_UPDATE = function () {
    function KERNEL_ADJMATRIX_UPDATE() {
        _classCallCheck(this, KERNEL_ADJMATRIX_UPDATE);
    }

    _createClass(KERNEL_ADJMATRIX_UPDATE, null, [{
        key: "getSrc",
        value: function getSrc(geometryLength) {
            return ["x", ["adjacencyMatrix", "adjacencyMatrixB"],
            // head
            "",

            // source
            "vec4 adjMat = adjacencyMatrix[x]; \n            vec4 adjMatB = adjacencyMatrixB[x];\n\n            float linkLayerNum = adjMat.x;\n            float weightQuadSum = adjMat.y;\n            float linkWeight = adjMat.z;\n            float linkTypeParent = adjMat.w;\n            \n            float weightAbsSum = adjMatB.x;\n            float costSum = adjMatB.y;\n            \n            if(linkTypeParent == 0.5 && linkLayerNum >= 0.0) {\n                float id = adjMatB.z;\n                float idInv = adjMatB.w;\n            \n                vec2 xGeometryCurrentChild = get_global_id(id, bufferNodesWidth, " + geometryLength.toFixed(1) + ");\n                vec2 xGeometryParent = get_global_id(idInv, bufferNodesWidth, " + geometryLength.toFixed(1) + (");\n\n                float childGDeltaA = dataB[xGeometryCurrentChild].y;\n                float childGOutputA = dataB[xGeometryCurrentChild].z;\n                float parentGOutputA = dataB[xGeometryParent].z;\n                float parentGInputsumA = dataB[xGeometryParent].w;\n                float parentGOutputDerivA = 1.0;\n                \n                float childGDeltaB = dataF[xGeometryCurrentChild].x;\n                float childGOutputB = dataF[xGeometryCurrentChild].y;\n                float parentGOutputB = dataF[xGeometryParent].y;\n                float parentGInputsumB = dataF[xGeometryParent].z;\n                float parentGOutputDerivB = 1.0;\n                \n                float childGDeltaC = dataF[xGeometryCurrentChild].w;\n                float childGOutputC = dataG[xGeometryCurrentChild].x;\n                float parentGOutputC = dataG[xGeometryParent].x;\n                float parentGInputsumC = dataG[xGeometryParent].y;\n                float parentGOutputDerivC = 1.0;\n                \n                float childGDeltaD = dataG[xGeometryCurrentChild].z;\n                float childGOutputD = dataG[xGeometryCurrentChild].w;\n                float parentGOutputD = dataG[xGeometryParent].w;\n                float parentGInputsumD = dataH[xGeometryParent].x;\n                float parentGOutputDerivD = 1.0;\n                \n                float childGDeltaE = dataH[xGeometryCurrentChild].y;\n                float childGOutputE = dataH[xGeometryCurrentChild].z;\n                float parentGOutputE = dataH[xGeometryParent].z;\n                float parentGInputsumE = dataH[xGeometryParent].w;\n                float parentGOutputDerivE = 1.0;\n            \n                float lr = learningRate;\n                float l1_decay = 0.0;\n                float l2_decay = 0.01;\n                float gpu_batch_size =5.0;\n                \n                \n                if(linkLayerNum < layerCount-2.0) { \n                    parentGOutputDerivA = (parentGInputsumA <= 0.0) ? 0.01 : 1.0;                    \n                    parentGOutputDerivB = (parentGInputsumB <= 0.0) ? 0.01 : 1.0;\n                    parentGOutputDerivC = (parentGInputsumC <= 0.0) ? 0.01 : 1.0;\n                    parentGOutputDerivD = (parentGInputsumD <= 0.0) ? 0.01 : 1.0;\n                    parentGOutputDerivE = (parentGInputsumE <= 0.0) ? 0.01 : 1.0;\n                }\n                if(weightQuadSum != 0.0) {\n                    linkWeight += -lr* ( (l2_decay*weightQuadSum) + (l1_decay*weightAbsSum) + ((childGDeltaA*parentGOutputDerivA*childGOutputA)/(gpu_batch_size*batch_repeats)) );\n                    linkWeight += -lr* ( (l2_decay*weightQuadSum) + (l1_decay*weightAbsSum) + ((childGDeltaB*parentGOutputDerivB*childGOutputB)/(gpu_batch_size*batch_repeats)) );\n                    linkWeight += -lr* ( (l2_decay*weightQuadSum) + (l1_decay*weightAbsSum) + ((childGDeltaC*parentGOutputDerivC*childGOutputC)/(gpu_batch_size*batch_repeats)) );\n                    linkWeight += -lr* ( (l2_decay*weightQuadSum) + (l1_decay*weightAbsSum) + ((childGDeltaD*parentGOutputDerivD*childGOutputD)/(gpu_batch_size*batch_repeats)) );\n                    linkWeight += -lr* ( (l2_decay*weightQuadSum) + (l1_decay*weightAbsSum) + ((childGDeltaE*parentGOutputDerivE*childGOutputE)/(gpu_batch_size*batch_repeats)) ); \n                    \n                    " + "\n                    \n                    weightQuadSum = 0.0;\n                    weightAbsSum = 0.0;\n                } else {\n                    weightQuadSum += linkWeight*linkWeight;\n                    weightAbsSum += abs(linkWeight);\n                }\n                \n                \n                " + "\n            }\n            \n            return [vec4(linkLayerNum, weightQuadSum, linkWeight, linkTypeParent), vec4(weightAbsSum, costSum, adjMatB.z, adjMatB.w)];\n            ")];
        }
    }]);

    return KERNEL_ADJMATRIX_UPDATE;
}();

global.KERNEL_ADJMATRIX_UPDATE = KERNEL_ADJMATRIX_UPDATE;
module.exports.KERNEL_ADJMATRIX_UPDATE = KERNEL_ADJMATRIX_UPDATE;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
