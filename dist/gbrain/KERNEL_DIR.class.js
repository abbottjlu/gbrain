(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
                    value: true
});
exports.KERNEL_DIR = undefined;

var _createClass = function () {
                    function defineProperties(target, props) {
                                        for (var i = 0; i < props.length; i++) {
                                                            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
                                        }
                    }return function (Constructor, protoProps, staticProps) {
                                        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
                    };
}();

var _graphUtil = require("./graphUtil");

function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError("Cannot call a class as a function");
                    }
}

var KERNEL_DIR = exports.KERNEL_DIR = function () {
                    function KERNEL_DIR() {
                                        _classCallCheck(this, KERNEL_DIR);
                    }

                    _createClass(KERNEL_DIR, null, [{
                                        key: "getSrc",
                                        value: function getSrc(customCode, geometryLength, efferentStart, efferentNodesCount) {
                                                            var outputArr = ["dir", "posXYZW", "dataB", "dataF", "dataG", "dataH"];
                                                            var returnStr = 'return [vec4(currentDir, 1.0), vec4(currentPos.x, currentPos.y, currentPos.z, 1.0), currentDataB, currentDataF, currentDataG, currentDataH];';

                                                            return ["x", outputArr,
                                                            // head
                                                            _graphUtil.GraphUtils.adjMatrix_ForceLayout_GLSLFunctionString(geometryLength, efferentStart, efferentNodesCount),

                                                            // source
                                                            "float nodeId = data[x].x;\n                    float numOfConnections = data[x].y;\n                    vec2 xGeometry = get_global_id(nodeId, uBufferWidth, " + geometryLength.toFixed(1) + ");\n\n\n                    vec3 currentPos = posXYZW[xGeometry].xyz;\n                    vec3 currentDir = dir[xGeometry].xyz;\n\n\n                    vec4 currentDataB = dataB[xGeometry];\n                    vec4 currentDataF = dataF[xGeometry];\n                    vec4 currentDataG = dataG[xGeometry];\n                    vec4 currentDataH = dataH[xGeometry];\n\n                    currentDir = vec3(0.0, 0.0, 0.0);\n\n                    if(enableForceLayout == 1.0) {\n                        idAdjMatrixResponse adjM = idAdjMatrix_ForceLayout(nodeId, currentPos, currentDir, numOfConnections);\n                        currentDir += adjM.force;\n\n                        if(currentTrainLayer == -3.0) {\n                            currentDataB = vec4(currentDataB.x, currentDataB.y, adjM.netFOutputA, adjM.netErrorWeightA);\n                            currentDataF = vec4(adjM.netFOutputB, adjM.netErrorWeightB, adjM.netFOutputC, adjM.netErrorWeightC);\n                            currentDataG = vec4(adjM.netFOutputD, adjM.netErrorWeightD, adjM.netFOutputE, adjM.netErrorWeightE);\n                            currentDataH = vec4(adjM.netFOutputF, adjM.netErrorWeightF, adjM.netFOutputG, adjM.netErrorWeightG);\n                        }\n                    }\n\n                    " + (customCode !== undefined ? customCode : '') + "\n\n                    if(enableDrag == 1.0) {\n                        if(nodeId == idToDrag) {\n                            currentPos = vec3(MouseDragTranslationX, MouseDragTranslationY, MouseDragTranslationZ);\n                        }\n                    }\n\n                    currentPos += currentDir;\n                    if(only2d == 1.0) {\n                        currentPos.y = 0.0;\n                    }\n\n                    " + returnStr];
                                        }
                    }]);

                    return KERNEL_DIR;
}();

global.KERNEL_DIR = KERNEL_DIR;
module.exports.KERNEL_DIR = KERNEL_DIR;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./graphUtil":2}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var GraphUtils = exports.GraphUtils = function () {
    function GraphUtils() {
        _classCallCheck(this, GraphUtils);
    }

    _createClass(GraphUtils, null, [{
        key: "nodesDrawMode",
        value: function nodesDrawMode(geometryLength) {
            if (geometryLength === 1) return "vec4(color.rgb, 1.0)";else return "vec4(tex.rgb*color.rgb, tex.a)";
        }
    }, {
        key: "adjMatrix_ForceLayout_GLSLFunctionString",
        value: function adjMatrix_ForceLayout_GLSLFunctionString(geometryLength, efferentStart, efferentNodesCount) {
            return '' + "vec3 sphericalColl(vec3 currentDir, vec3 currentDirB, vec3 dirToBN) {\n            vec3 currentDirN = normalize(currentDir);\n            float pPoint = abs(dot(currentDirN, dirToBN));\n            vec3 reflectV = reflect(currentDirN*-1.0, dirToBN);\n\n            vec3 currentDirBN = normalize(currentDirB);\n            float pPointB = abs(dot(currentDirBN, dirToBN));\n\n            vec3 repulsionForce = (reflectV*-1.0)* (((1.0-pPoint)*length(currentDir))+((pPointB)*length(currentDirB)));\n\n            return (repulsionForce.x > 0.0 && repulsionForce.y > 0.0 && repulsionForce.z > 0.0) ? repulsionForce : dirToBN*-0.1;\n        }\n\n        struct CalculationResponse {\n            vec3 atraction;\n            float acumAtraction;\n            vec3 repulsion;\n            float netChildInputSumA;\n            float netParentErrorWeightA;\n            float netChildInputSumB;\n            float netParentErrorWeightB;\n            float netChildInputSumC;\n            float netParentErrorWeightC;\n            float netChildInputSumD;\n            float netParentErrorWeightD;\n            float netChildInputSumE;\n            float netParentErrorWeightE;\n            float netChildInputSumF;\n            float netParentErrorWeightF;\n            float netChildInputSumG;\n            float netParentErrorWeightG;\n        };" + "CalculationResponse calculate(float nodeId,\n                                        vec4 pixAdjMatACurrent, vec4 pixAdjMatAOpposite,\n                                        vec4 pixAdjMatBCurrent, vec4 pixAdjMatBOpposite,\n                                        vec2 xGeomCurrent, vec2 xGeomOpposite,\n                                        vec3 currentPos, vec3 currentDir,\n                                        vec3 atraction, float acumAtraction, vec3 repulsion,\n                                        float netChildInputSumA, float netParentErrorWeightA,\n                                        float netChildInputSumB, float netParentErrorWeightB,\n                                        float netChildInputSumC, float netParentErrorWeightC,\n                                        float netChildInputSumD, float netParentErrorWeightD,\n                                        float netChildInputSumE, float netParentErrorWeightE,\n                                        float netChildInputSumF, float netParentErrorWeightF,\n                                        float netChildInputSumG, float netParentErrorWeightG) {" +
            // pixAdjMatACurrent
            "float currentWeight = pixAdjMatACurrent.z;\n            float currentIsParent = pixAdjMatACurrent.w;" +

            // pixAdjMatAOpposite
            "float oppositeWeight = pixAdjMatAOpposite.z;\n            float oppositeIsParent = pixAdjMatAOpposite.w;" +

            // pixAdjMatBCurrent
            "float currentLinkMultiplier = pixAdjMatBCurrent.x;\n            float currentActivationFn = pixAdjMatBCurrent.y;" +

            // pixAdjMatBOpposite
            "float oppositeLinkMultiplier = pixAdjMatBOpposite.x;\n            float oppositeActivationFn = pixAdjMatBOpposite.y;" +

            // dataB Current
            //'float currentBiasNode = dataB[xGeomCurrent].x;'+
            //'float currentNetOutput = dataB[xGeomCurrent].z;'+
            //'float currentNetError = dataB[xGeomCurrent].w;'+

            // dataB Opposite
            //'float oppositeBiasNode = dataB[xGeomOpposite].x;'+
            "float oppositeNetOutputA = dataB[xGeomOpposite].z;\n            float oppositeNetErrorA = dataB[xGeomOpposite].w;\n\n            float oppositeNetOutputB = dataF[xGeomOpposite].x;\n            float oppositeNetErrorB = dataF[xGeomOpposite].y;\n        \n            float oppositeNetOutputC = dataF[xGeomOpposite].z;\n            float oppositeNetErrorC = dataF[xGeomOpposite].w;\n        \n            float oppositeNetOutputD = dataG[xGeomOpposite].x;\n            float oppositeNetErrorD = dataG[xGeomOpposite].y;\n        \n            float oppositeNetOutputE = dataG[xGeomOpposite].z;\n            float oppositeNetErrorE = dataG[xGeomOpposite].w;\n        \n            float oppositeNetOutputF = dataH[xGeomOpposite].x;\n            float oppositeNetErrorF = dataH[xGeomOpposite].y;\n        \n            float oppositeNetOutputG = dataH[xGeomOpposite].z;\n            float oppositeNetErrorG = dataH[xGeomOpposite].w;" +

            // pos & dir Current
            //'vec3 currentPos = posXYZW[xGeomCurrent].xyz;\n'+
            //'vec3 currentDir = dir[xGeomCurrent].xyz;\n'+

            // pos & dir Opposite
            "vec3 oppositePos = posXYZW[xGeomOpposite].xyz;\n            vec3 oppositeDir = dir[xGeomOpposite].xyz;" +

            // dir / dist to opposite
            'vec3 dirToOpposite = (oppositePos-currentPos);\n' + 'vec3 dirToOppositeN = normalize(dirToOpposite);\n' + 'float dist = distance(oppositePos, currentPos);\n' + // near=0.0 ; far=1.0
            'float distN = max(0.0,dist)/100000.0;' + 'float m1 = 0.0;' + // 400000.0
            'float m2 = 0.0;' + // 48.0
            'if(currentIsParent == 1.0) {' + 'netChildInputSumA += oppositeNetOutputA*oppositeWeight;' + 'netChildInputSumB += oppositeNetOutputB*oppositeWeight;' + 'netChildInputSumC += oppositeNetOutputC*oppositeWeight;' + 'netChildInputSumD += oppositeNetOutputD*oppositeWeight;' + 'netChildInputSumE += oppositeNetOutputE*oppositeWeight;' + 'netChildInputSumF += oppositeNetOutputF*oppositeWeight;' + 'netChildInputSumG += oppositeNetOutputG*oppositeWeight;' + 'atraction += dirToOppositeN*max(1.0, distN*abs(oppositeWeight)*(m1/2.0));\n' + 'repulsion += -dirToOppositeN*max(1.0, (1.0-distN)*abs(oppositeWeight)*(m2/2.0));\n' + 'acumAtraction += 1.0;\n' + '} else if(currentIsParent == 0.5) {' + 'netParentErrorWeightA += oppositeNetErrorA*currentWeight;' + 'netParentErrorWeightB += oppositeNetErrorB*currentWeight;' + 'netParentErrorWeightC += oppositeNetErrorC*currentWeight;' + 'netParentErrorWeightD += oppositeNetErrorD*currentWeight;' + 'netParentErrorWeightE += oppositeNetErrorE*currentWeight;' + 'netParentErrorWeightF += oppositeNetErrorF*currentWeight;' + 'netParentErrorWeightG += oppositeNetErrorG*currentWeight;' + 'atraction += dirToOppositeN*max(1.0, distN*abs(currentWeight)*m1);\n' + 'repulsion += -dirToOppositeN*max(1.0, (1.0-distN)*abs(currentWeight)*m2);\n' + 'acumAtraction += 1.0;\n' + '}' + 'repulsion += -dirToOppositeN*max(1.0, (1.0-distN)*abs(currentWeight)*(m2/8.0));\n' + 'acumAtraction += 1.0;\n' + ("return CalculationResponse(atraction, acumAtraction, repulsion,\n                                        netChildInputSumA, netParentErrorWeightA,\n                                        netChildInputSumB, netParentErrorWeightB,\n                                        netChildInputSumC, netParentErrorWeightC,\n                                        netChildInputSumD, netParentErrorWeightD,\n                                        netChildInputSumE, netParentErrorWeightE,\n                                        netChildInputSumF, netParentErrorWeightF,\n                                        netChildInputSumG, netParentErrorWeightG);\n        }\n        struct idAdjMatrixResponse {\n            vec3 force;\n            float netFOutputA;\n            float netErrorWeightA;\n            float netFOutputB;\n            float netErrorWeightB;\n            float netFOutputC;\n            float netErrorWeightC;\n            float netFOutputD;\n            float netErrorWeightD;\n            float netFOutputE;\n            float netErrorWeightE;\n            float netFOutputF;\n            float netErrorWeightF;\n            float netFOutputG;\n            float netErrorWeightG;\n        };\n        float tanh(float val) {\n            float tmp = exp(val);\n            float tanH = (tmp - 1.0 / tmp) / (tmp + 1.0 / tmp);\n            return tanH;\n        }\n        float sigm(float val) {\n            return (1.0 / (1.0 + exp(-val)));\n        }\n        idAdjMatrixResponse idAdjMatrix_ForceLayout(float nodeId, vec3 currentPos, vec3 currentDir, float numOfConnections) {\n            vec3 atraction = vec3(0.0, 0.0, 0.0);\n            float acumAtraction = 1.0;\n            vec3 repulsion = vec3(0.0, 0.0, 0.0);\n\n            vec3 force = vec3(0.0, 0.0, 0.0);\n\n\n            float netChildInputSumA = 0.0;\n            float foutputA = 0.0;\n            float netParentErrorWeightA = 0.0;\n            \n            float netChildInputSumB = 0.0;\n            float foutputB = 0.0;\n            float netParentErrorWeightB = 0.0;\n            \n            float netChildInputSumC = 0.0;\n            float foutputC = 0.0;\n            float netParentErrorWeightC = 0.0;\n            \n            float netChildInputSumD = 0.0;\n            float foutputD = 0.0;\n            float netParentErrorWeightD = 0.0;\n            \n            float netChildInputSumE = 0.0;\n            float foutputE = 0.0;\n            float netParentErrorWeightE = 0.0;\n            \n            float netChildInputSumF = 0.0;\n            float foutputF = 0.0;\n            float netParentErrorWeightF = 0.0;\n            \n            float netChildInputSumG = 0.0;\n            float foutputG = 0.0;\n            float netParentErrorWeightG = 0.0;\n            \n\n            if(nodeId < nodesCount) {\n                float currentActivationFn = 0.0;\n                vec2 xGeomCurrent = get_global_id(nodeId, uBufferWidth, " + geometryLength.toFixed(1) + ");\n                for(int n=0; n < 4096; n++) {\n                    if(float(n) >= nodesCount) {break;}\n                    if(float(n) != nodeId) {\n                        vec2 xGeomOpposite = get_global_id(float(n), uBufferWidth, " + geometryLength.toFixed(1) + ");\n\n\n                        vec2 xAdjMatCurrent = get_global_id(vec2(float(n), nodeId), widthAdjMatrix);\n                        vec2 xAdjMatOpposite = get_global_id(vec2(nodeId, float(n)), widthAdjMatrix);\n\n                        vec4 pixAdjMatACurrent = adjacencyMatrix[xAdjMatCurrent];\n                        vec4 pixAdjMatAOpposite = adjacencyMatrix[xAdjMatOpposite];\n\n                        vec4 pixAdjMatBCurrent = adjacencyMatrixB[xAdjMatCurrent];\n                        vec4 pixAdjMatBOpposite = adjacencyMatrixB[xAdjMatOpposite];\n\n\n                        CalculationResponse calcResponse = calculate(nodeId,\n                                                                    pixAdjMatACurrent, pixAdjMatAOpposite,\n                                                                    pixAdjMatBCurrent, pixAdjMatBOpposite,\n                                                                    xGeomCurrent, xGeomOpposite,\n                                                                    currentPos, currentDir,\n                                                                    atraction, acumAtraction, repulsion,\n                                                                    netChildInputSumA, netParentErrorWeightA,\n                                                                    netChildInputSumB, netParentErrorWeightB,\n                                                                    netChildInputSumC, netParentErrorWeightC,\n                                                                    netChildInputSumD, netParentErrorWeightD,\n                                                                    netChildInputSumE, netParentErrorWeightE,\n                                                                    netChildInputSumF, netParentErrorWeightF,\n                                                                    netChildInputSumG, netParentErrorWeightG);\n                        atraction = calcResponse.atraction;\n                        acumAtraction = calcResponse.acumAtraction;\n                        repulsion = calcResponse.repulsion;\n                        \n                        \n                        netChildInputSumA = calcResponse.netChildInputSumA;\n                        netParentErrorWeightA = calcResponse.netParentErrorWeightA;\n                        \n                        netChildInputSumB = calcResponse.netChildInputSumB;\n                        netParentErrorWeightB = calcResponse.netParentErrorWeightB;\n                        \n                        netChildInputSumC = calcResponse.netChildInputSumC;\n                        netParentErrorWeightC = calcResponse.netParentErrorWeightC;\n                        \n                        netChildInputSumD = calcResponse.netChildInputSumD;\n                        netParentErrorWeightD = calcResponse.netParentErrorWeightD;\n                        \n                        netChildInputSumE = calcResponse.netChildInputSumE;\n                        netParentErrorWeightE = calcResponse.netParentErrorWeightE;\n                        \n                        netChildInputSumF = calcResponse.netChildInputSumF;\n                        netParentErrorWeightF = calcResponse.netParentErrorWeightF;\n                        \n                        netChildInputSumG = calcResponse.netChildInputSumG;\n                        netParentErrorWeightG = calcResponse.netParentErrorWeightG;\n                    }\n                }\n\n                " + GraphUtils.efferentNodesStr(efferentStart, efferentNodesCount) + "\n            }\n\n            return idAdjMatrixResponse(vec3(force),\n                                        foutputA, netParentErrorWeightA,\n                                        foutputB, netParentErrorWeightB,\n                                        foutputC, netParentErrorWeightC,\n                                        foutputD, netParentErrorWeightD,\n                                        foutputE, netParentErrorWeightE,\n                                        foutputF, netParentErrorWeightF,\n                                        foutputG, netParentErrorWeightG);\n        }");
        }
    }, {
        key: "efferentNodesStr",
        value: function efferentNodesStr(efferentStart, efferentNodesCount) {
            var str = "\n            if(nodeId < afferentNodesCount) {\n                for(float n=0.0; n < 1024.0; n+=1.0) {\n                    if(n >= afferentNodesCount) {\n                        break;\n                    }\n                    if(nodeId == n) {\n                        foutputA = afferentNodesA[int(n)];\n                        foutputB = afferentNodesB[int(n)];\n                        foutputC = afferentNodesC[int(n)];\n                        foutputD = afferentNodesD[int(n)];\n                        foutputE = afferentNodesE[int(n)];\n                        foutputF = afferentNodesF[int(n)];\n                        foutputG = afferentNodesG[int(n)];\n                        break;\n                    }\n                }\n            } else {\n                foutputA = max(0.0, netChildInputSumA); " + "\n                foutputB = max(0.0, netChildInputSumB);\n                foutputC = max(0.0, netChildInputSumC);\n                foutputD = max(0.0, netChildInputSumD);\n                foutputE = max(0.0, netChildInputSumE);\n                foutputF = max(0.0, netChildInputSumF);\n                foutputG = max(0.0, netChildInputSumG);\n            }";

            str += "\n        if(nodeId == " + efferentStart.toFixed(1) + (") {\n            netParentErrorWeightA = (efferentNodesA[0] != 0.0) ? netChildInputSumA-efferentNodesA[0] : 0.0;\n            " + "\n            netParentErrorWeightB = (efferentNodesB[0] != 0.0) ? netChildInputSumB-efferentNodesB[0] : 0.0;\n            " + "\n            netParentErrorWeightC = (efferentNodesC[0] != 0.0) ? netChildInputSumC-efferentNodesC[0] : 0.0;\n            " + "\n            netParentErrorWeightD = (efferentNodesD[0] != 0.0) ? netChildInputSumD-efferentNodesD[0] : 0.0;\n            " + "\n            netParentErrorWeightE = (efferentNodesE[0] != 0.0) ? netChildInputSumE-efferentNodesE[0] : 0.0;\n            " + "\n            netParentErrorWeightF = (efferentNodesF[0] != 0.0) ? netChildInputSumF-efferentNodesF[0] : 0.0;\n            " + "\n            netParentErrorWeightG = (efferentNodesG[0] != 0.0) ? netChildInputSumG-efferentNodesG[0] : 0.0;\n            " + "\n        }");
            for (var n = efferentStart + 1; n < efferentStart + efferentNodesCount; n++) {
                str += "\n            else if(nodeId == " + n.toFixed(1) + ") {\n                netParentErrorWeightA = (efferentNodesA[" + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumA-efferentNodesA[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n                netParentErrorWeightB = (efferentNodesB[") + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumB-efferentNodesB[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n                netParentErrorWeightC = (efferentNodesC[") + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumC-efferentNodesC[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n                netParentErrorWeightD = (efferentNodesD[") + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumD-efferentNodesD[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n                netParentErrorWeightE = (efferentNodesE[") + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumE-efferentNodesE[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n                netParentErrorWeightF = (efferentNodesF[") + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumF-efferentNodesF[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n                netParentErrorWeightG = (efferentNodesG[") + Math.round(n - efferentStart) + "] != 0.0) ? netChildInputSumG-efferentNodesG[" + Math.round(n - efferentStart) + ("] : 0.0;\n                " + "\n            }");
            }str += "\n        else {\n            if(foutputA <= 0.0) {\n                netParentErrorWeightA = 0.0;\n            }\n            if(foutputB <= 0.0) {\n                netParentErrorWeightB = 0.0;\n            }\n            if(foutputC <= 0.0) {\n                netParentErrorWeightC = 0.0;\n            }\n            if(foutputD <= 0.0) {\n                netParentErrorWeightD = 0.0;\n            }\n            if(foutputE <= 0.0) {\n                netParentErrorWeightE = 0.0;\n            }\n            if(foutputF <= 0.0) {\n                netParentErrorWeightF = 0.0;\n            }\n            if(foutputG <= 0.0) {\n                netParentErrorWeightG = 0.0;\n            }\n        }";

            return str;
        }
    }]);

    return GraphUtils;
}();

global.GraphUtils = GraphUtils;
module.exports.GraphUtils = GraphUtils;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZ2JyYWluL0tFUk5FTF9ESVIuY2xhc3MuanMiLCJzcmMvZ2JyYWluL2dyYXBoVXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc31yZXR1cm4gZX0pKCkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuS0VSTkVMX0RJUiA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgICAgIH07XG59KCk7XG5cbnZhciBfZ3JhcGhVdGlsID0gcmVxdWlyZShcIi4vZ3JhcGhVdGlsXCIpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxufVxuXG52YXIgS0VSTkVMX0RJUiA9IGV4cG9ydHMuS0VSTkVMX0RJUiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gS0VSTkVMX0RJUigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgS0VSTkVMX0RJUik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlQ2xhc3MoS0VSTkVMX0RJUiwgbnVsbCwgW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZ2V0U3JjXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNyYyhjdXN0b21Db2RlLCBnZW9tZXRyeUxlbmd0aCwgZWZmZXJlbnRTdGFydCwgZWZmZXJlbnROb2Rlc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0QXJyID0gW1wiZGlyXCIsIFwicG9zWFlaV1wiLCBcImRhdGFCXCIsIFwiZGF0YUZcIiwgXCJkYXRhR1wiLCBcImRhdGFIXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblN0ciA9ICdyZXR1cm4gW3ZlYzQoY3VycmVudERpciwgMS4wKSwgdmVjNChjdXJyZW50UG9zLngsIGN1cnJlbnRQb3MueSwgY3VycmVudFBvcy56LCAxLjApLCBjdXJyZW50RGF0YUIsIGN1cnJlbnREYXRhRiwgY3VycmVudERhdGFHLCBjdXJyZW50RGF0YUhdOyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXCJ4XCIsIG91dHB1dEFycixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ncmFwaFV0aWwuR3JhcGhVdGlscy5hZGpNYXRyaXhfRm9yY2VMYXlvdXRfR0xTTEZ1bmN0aW9uU3RyaW5nKGdlb21ldHJ5TGVuZ3RoLCBlZmZlcmVudFN0YXJ0LCBlZmZlcmVudE5vZGVzQ291bnQpLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmxvYXQgbm9kZUlkID0gZGF0YVt4XS54O1xcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQgbnVtT2ZDb25uZWN0aW9ucyA9IGRhdGFbeF0ueTtcXG4gICAgICAgICAgICAgICAgICAgIHZlYzIgeEdlb21ldHJ5ID0gZ2V0X2dsb2JhbF9pZChub2RlSWQsIHVCdWZmZXJXaWR0aCwgXCIgKyBnZW9tZXRyeUxlbmd0aC50b0ZpeGVkKDEpICsgXCIpO1xcblxcblxcbiAgICAgICAgICAgICAgICAgICAgdmVjMyBjdXJyZW50UG9zID0gcG9zWFlaV1t4R2VvbWV0cnldLnh5ejtcXG4gICAgICAgICAgICAgICAgICAgIHZlYzMgY3VycmVudERpciA9IGRpclt4R2VvbWV0cnldLnh5ejtcXG5cXG5cXG4gICAgICAgICAgICAgICAgICAgIHZlYzQgY3VycmVudERhdGFCID0gZGF0YUJbeEdlb21ldHJ5XTtcXG4gICAgICAgICAgICAgICAgICAgIHZlYzQgY3VycmVudERhdGFGID0gZGF0YUZbeEdlb21ldHJ5XTtcXG4gICAgICAgICAgICAgICAgICAgIHZlYzQgY3VycmVudERhdGFHID0gZGF0YUdbeEdlb21ldHJ5XTtcXG4gICAgICAgICAgICAgICAgICAgIHZlYzQgY3VycmVudERhdGFIID0gZGF0YUhbeEdlb21ldHJ5XTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREaXIgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcblxcbiAgICAgICAgICAgICAgICAgICAgaWYoZW5hYmxlRm9yY2VMYXlvdXQgPT0gMS4wKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWRBZGpNYXRyaXhSZXNwb25zZSBhZGpNID0gaWRBZGpNYXRyaXhfRm9yY2VMYXlvdXQobm9kZUlkLCBjdXJyZW50UG9zLCBjdXJyZW50RGlyLCBudW1PZkNvbm5lY3Rpb25zKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGlyICs9IGFkak0uZm9yY2U7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFRyYWluTGF5ZXIgPT0gLTMuMCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0YUIgPSB2ZWM0KGN1cnJlbnREYXRhQi54LCBjdXJyZW50RGF0YUIueSwgYWRqTS5uZXRGT3V0cHV0QSwgYWRqTS5uZXRFcnJvcldlaWdodEEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0YUYgPSB2ZWM0KGFkak0ubmV0Rk91dHB1dEIsIGFkak0ubmV0RXJyb3JXZWlnaHRCLCBhZGpNLm5ldEZPdXRwdXRDLCBhZGpNLm5ldEVycm9yV2VpZ2h0Qyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRhRyA9IHZlYzQoYWRqTS5uZXRGT3V0cHV0RCwgYWRqTS5uZXRFcnJvcldlaWdodEQsIGFkak0ubmV0Rk91dHB1dEUsIGFkak0ubmV0RXJyb3JXZWlnaHRFKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGFIID0gdmVjNChhZGpNLm5ldEZPdXRwdXRGLCBhZGpNLm5ldEVycm9yV2VpZ2h0RiwgYWRqTS5uZXRGT3V0cHV0RywgYWRqTS5uZXRFcnJvcldlaWdodEcpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgIFwiICsgKGN1c3RvbUNvZGUgIT09IHVuZGVmaW5lZCA/IGN1c3RvbUNvZGUgOiAnJykgKyBcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgaWYoZW5hYmxlRHJhZyA9PSAxLjApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlSWQgPT0gaWRUb0RyYWcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvcyA9IHZlYzMoTW91c2VEcmFnVHJhbnNsYXRpb25YLCBNb3VzZURyYWdUcmFuc2xhdGlvblksIE1vdXNlRHJhZ1RyYW5zbGF0aW9uWik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvcyArPSBjdXJyZW50RGlyO1xcbiAgICAgICAgICAgICAgICAgICAgaWYob25seTJkID09IDEuMCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb3MueSA9IDAuMDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgIFwiICsgcmV0dXJuU3RyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1dKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gS0VSTkVMX0RJUjtcbn0oKTtcblxuZ2xvYmFsLktFUk5FTF9ESVIgPSBLRVJORUxfRElSO1xubW9kdWxlLmV4cG9ydHMuS0VSTkVMX0RJUiA9IEtFUk5FTF9ESVI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG59KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbn1cblxudmFyIEdyYXBoVXRpbHMgPSBleHBvcnRzLkdyYXBoVXRpbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR3JhcGhVdGlscygpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYXBoVXRpbHMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhHcmFwaFV0aWxzLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwibm9kZXNEcmF3TW9kZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbm9kZXNEcmF3TW9kZShnZW9tZXRyeUxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGdlb21ldHJ5TGVuZ3RoID09PSAxKSByZXR1cm4gXCJ2ZWM0KGNvbG9yLnJnYiwgMS4wKVwiO2Vsc2UgcmV0dXJuIFwidmVjNCh0ZXgucmdiKmNvbG9yLnJnYiwgdGV4LmEpXCI7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJhZGpNYXRyaXhfRm9yY2VMYXlvdXRfR0xTTEZ1bmN0aW9uU3RyaW5nXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGpNYXRyaXhfRm9yY2VMYXlvdXRfR0xTTEZ1bmN0aW9uU3RyaW5nKGdlb21ldHJ5TGVuZ3RoLCBlZmZlcmVudFN0YXJ0LCBlZmZlcmVudE5vZGVzQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAnJyArIFwidmVjMyBzcGhlcmljYWxDb2xsKHZlYzMgY3VycmVudERpciwgdmVjMyBjdXJyZW50RGlyQiwgdmVjMyBkaXJUb0JOKSB7XFxuICAgICAgICAgICAgdmVjMyBjdXJyZW50RGlyTiA9IG5vcm1hbGl6ZShjdXJyZW50RGlyKTtcXG4gICAgICAgICAgICBmbG9hdCBwUG9pbnQgPSBhYnMoZG90KGN1cnJlbnREaXJOLCBkaXJUb0JOKSk7XFxuICAgICAgICAgICAgdmVjMyByZWZsZWN0ViA9IHJlZmxlY3QoY3VycmVudERpck4qLTEuMCwgZGlyVG9CTik7XFxuXFxuICAgICAgICAgICAgdmVjMyBjdXJyZW50RGlyQk4gPSBub3JtYWxpemUoY3VycmVudERpckIpO1xcbiAgICAgICAgICAgIGZsb2F0IHBQb2ludEIgPSBhYnMoZG90KGN1cnJlbnREaXJCTiwgZGlyVG9CTikpO1xcblxcbiAgICAgICAgICAgIHZlYzMgcmVwdWxzaW9uRm9yY2UgPSAocmVmbGVjdFYqLTEuMCkqICgoKDEuMC1wUG9pbnQpKmxlbmd0aChjdXJyZW50RGlyKSkrKChwUG9pbnRCKSpsZW5ndGgoY3VycmVudERpckIpKSk7XFxuXFxuICAgICAgICAgICAgcmV0dXJuIChyZXB1bHNpb25Gb3JjZS54ID4gMC4wICYmIHJlcHVsc2lvbkZvcmNlLnkgPiAwLjAgJiYgcmVwdWxzaW9uRm9yY2UueiA+IDAuMCkgPyByZXB1bHNpb25Gb3JjZSA6IGRpclRvQk4qLTAuMTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHN0cnVjdCBDYWxjdWxhdGlvblJlc3BvbnNlIHtcXG4gICAgICAgICAgICB2ZWMzIGF0cmFjdGlvbjtcXG4gICAgICAgICAgICBmbG9hdCBhY3VtQXRyYWN0aW9uO1xcbiAgICAgICAgICAgIHZlYzMgcmVwdWxzaW9uO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldENoaWxkSW5wdXRTdW1BO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldFBhcmVudEVycm9yV2VpZ2h0QTtcXG4gICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtQjtcXG4gICAgICAgICAgICBmbG9hdCBuZXRQYXJlbnRFcnJvcldlaWdodEI7XFxuICAgICAgICAgICAgZmxvYXQgbmV0Q2hpbGRJbnB1dFN1bUM7XFxuICAgICAgICAgICAgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRDO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldENoaWxkSW5wdXRTdW1EO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldFBhcmVudEVycm9yV2VpZ2h0RDtcXG4gICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtRTtcXG4gICAgICAgICAgICBmbG9hdCBuZXRQYXJlbnRFcnJvcldlaWdodEU7XFxuICAgICAgICAgICAgZmxvYXQgbmV0Q2hpbGRJbnB1dFN1bUY7XFxuICAgICAgICAgICAgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRGO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldENoaWxkSW5wdXRTdW1HO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldFBhcmVudEVycm9yV2VpZ2h0RztcXG4gICAgICAgIH07XCIgKyBcIkNhbGN1bGF0aW9uUmVzcG9uc2UgY2FsY3VsYXRlKGZsb2F0IG5vZGVJZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjNCBwaXhBZGpNYXRBQ3VycmVudCwgdmVjNCBwaXhBZGpNYXRBT3Bwb3NpdGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzQgcGl4QWRqTWF0QkN1cnJlbnQsIHZlYzQgcGl4QWRqTWF0Qk9wcG9zaXRlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMyIHhHZW9tQ3VycmVudCwgdmVjMiB4R2VvbU9wcG9zaXRlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMzIGN1cnJlbnRQb3MsIHZlYzMgY3VycmVudERpcixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMyBhdHJhY3Rpb24sIGZsb2F0IGFjdW1BdHJhY3Rpb24sIHZlYzMgcmVwdWxzaW9uLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtQSwgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRBLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtQiwgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRCLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtQywgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRDLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtRCwgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRELFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtRSwgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRFLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtRiwgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRGLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtRywgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRHKSB7XCIgK1xuICAgICAgICAgICAgLy8gcGl4QWRqTWF0QUN1cnJlbnRcbiAgICAgICAgICAgIFwiZmxvYXQgY3VycmVudFdlaWdodCA9IHBpeEFkak1hdEFDdXJyZW50Lno7XFxuICAgICAgICAgICAgZmxvYXQgY3VycmVudElzUGFyZW50ID0gcGl4QWRqTWF0QUN1cnJlbnQudztcIiArXG5cbiAgICAgICAgICAgIC8vIHBpeEFkak1hdEFPcHBvc2l0ZVxuICAgICAgICAgICAgXCJmbG9hdCBvcHBvc2l0ZVdlaWdodCA9IHBpeEFkak1hdEFPcHBvc2l0ZS56O1xcbiAgICAgICAgICAgIGZsb2F0IG9wcG9zaXRlSXNQYXJlbnQgPSBwaXhBZGpNYXRBT3Bwb3NpdGUudztcIiArXG5cbiAgICAgICAgICAgIC8vIHBpeEFkak1hdEJDdXJyZW50XG4gICAgICAgICAgICBcImZsb2F0IGN1cnJlbnRMaW5rTXVsdGlwbGllciA9IHBpeEFkak1hdEJDdXJyZW50Lng7XFxuICAgICAgICAgICAgZmxvYXQgY3VycmVudEFjdGl2YXRpb25GbiA9IHBpeEFkak1hdEJDdXJyZW50Lnk7XCIgK1xuXG4gICAgICAgICAgICAvLyBwaXhBZGpNYXRCT3Bwb3NpdGVcbiAgICAgICAgICAgIFwiZmxvYXQgb3Bwb3NpdGVMaW5rTXVsdGlwbGllciA9IHBpeEFkak1hdEJPcHBvc2l0ZS54O1xcbiAgICAgICAgICAgIGZsb2F0IG9wcG9zaXRlQWN0aXZhdGlvbkZuID0gcGl4QWRqTWF0Qk9wcG9zaXRlLnk7XCIgK1xuXG4gICAgICAgICAgICAvLyBkYXRhQiBDdXJyZW50XG4gICAgICAgICAgICAvLydmbG9hdCBjdXJyZW50Qmlhc05vZGUgPSBkYXRhQlt4R2VvbUN1cnJlbnRdLng7JytcbiAgICAgICAgICAgIC8vJ2Zsb2F0IGN1cnJlbnROZXRPdXRwdXQgPSBkYXRhQlt4R2VvbUN1cnJlbnRdLno7JytcbiAgICAgICAgICAgIC8vJ2Zsb2F0IGN1cnJlbnROZXRFcnJvciA9IGRhdGFCW3hHZW9tQ3VycmVudF0udzsnK1xuXG4gICAgICAgICAgICAvLyBkYXRhQiBPcHBvc2l0ZVxuICAgICAgICAgICAgLy8nZmxvYXQgb3Bwb3NpdGVCaWFzTm9kZSA9IGRhdGFCW3hHZW9tT3Bwb3NpdGVdLng7JytcbiAgICAgICAgICAgIFwiZmxvYXQgb3Bwb3NpdGVOZXRPdXRwdXRBID0gZGF0YUJbeEdlb21PcHBvc2l0ZV0uejtcXG4gICAgICAgICAgICBmbG9hdCBvcHBvc2l0ZU5ldEVycm9yQSA9IGRhdGFCW3hHZW9tT3Bwb3NpdGVdLnc7XFxuXFxuICAgICAgICAgICAgZmxvYXQgb3Bwb3NpdGVOZXRPdXRwdXRCID0gZGF0YUZbeEdlb21PcHBvc2l0ZV0ueDtcXG4gICAgICAgICAgICBmbG9hdCBvcHBvc2l0ZU5ldEVycm9yQiA9IGRhdGFGW3hHZW9tT3Bwb3NpdGVdLnk7XFxuICAgICAgICBcXG4gICAgICAgICAgICBmbG9hdCBvcHBvc2l0ZU5ldE91dHB1dEMgPSBkYXRhRlt4R2VvbU9wcG9zaXRlXS56O1xcbiAgICAgICAgICAgIGZsb2F0IG9wcG9zaXRlTmV0RXJyb3JDID0gZGF0YUZbeEdlb21PcHBvc2l0ZV0udztcXG4gICAgICAgIFxcbiAgICAgICAgICAgIGZsb2F0IG9wcG9zaXRlTmV0T3V0cHV0RCA9IGRhdGFHW3hHZW9tT3Bwb3NpdGVdLng7XFxuICAgICAgICAgICAgZmxvYXQgb3Bwb3NpdGVOZXRFcnJvckQgPSBkYXRhR1t4R2VvbU9wcG9zaXRlXS55O1xcbiAgICAgICAgXFxuICAgICAgICAgICAgZmxvYXQgb3Bwb3NpdGVOZXRPdXRwdXRFID0gZGF0YUdbeEdlb21PcHBvc2l0ZV0uejtcXG4gICAgICAgICAgICBmbG9hdCBvcHBvc2l0ZU5ldEVycm9yRSA9IGRhdGFHW3hHZW9tT3Bwb3NpdGVdLnc7XFxuICAgICAgICBcXG4gICAgICAgICAgICBmbG9hdCBvcHBvc2l0ZU5ldE91dHB1dEYgPSBkYXRhSFt4R2VvbU9wcG9zaXRlXS54O1xcbiAgICAgICAgICAgIGZsb2F0IG9wcG9zaXRlTmV0RXJyb3JGID0gZGF0YUhbeEdlb21PcHBvc2l0ZV0ueTtcXG4gICAgICAgIFxcbiAgICAgICAgICAgIGZsb2F0IG9wcG9zaXRlTmV0T3V0cHV0RyA9IGRhdGFIW3hHZW9tT3Bwb3NpdGVdLno7XFxuICAgICAgICAgICAgZmxvYXQgb3Bwb3NpdGVOZXRFcnJvckcgPSBkYXRhSFt4R2VvbU9wcG9zaXRlXS53O1wiICtcblxuICAgICAgICAgICAgLy8gcG9zICYgZGlyIEN1cnJlbnRcbiAgICAgICAgICAgIC8vJ3ZlYzMgY3VycmVudFBvcyA9IHBvc1hZWldbeEdlb21DdXJyZW50XS54eXo7XFxuJytcbiAgICAgICAgICAgIC8vJ3ZlYzMgY3VycmVudERpciA9IGRpclt4R2VvbUN1cnJlbnRdLnh5ejtcXG4nK1xuXG4gICAgICAgICAgICAvLyBwb3MgJiBkaXIgT3Bwb3NpdGVcbiAgICAgICAgICAgIFwidmVjMyBvcHBvc2l0ZVBvcyA9IHBvc1hZWldbeEdlb21PcHBvc2l0ZV0ueHl6O1xcbiAgICAgICAgICAgIHZlYzMgb3Bwb3NpdGVEaXIgPSBkaXJbeEdlb21PcHBvc2l0ZV0ueHl6O1wiICtcblxuICAgICAgICAgICAgLy8gZGlyIC8gZGlzdCB0byBvcHBvc2l0ZVxuICAgICAgICAgICAgJ3ZlYzMgZGlyVG9PcHBvc2l0ZSA9IChvcHBvc2l0ZVBvcy1jdXJyZW50UG9zKTtcXG4nICsgJ3ZlYzMgZGlyVG9PcHBvc2l0ZU4gPSBub3JtYWxpemUoZGlyVG9PcHBvc2l0ZSk7XFxuJyArICdmbG9hdCBkaXN0ID0gZGlzdGFuY2Uob3Bwb3NpdGVQb3MsIGN1cnJlbnRQb3MpO1xcbicgKyAvLyBuZWFyPTAuMCA7IGZhcj0xLjBcbiAgICAgICAgICAgICdmbG9hdCBkaXN0TiA9IG1heCgwLjAsZGlzdCkvMTAwMDAwLjA7JyArICdmbG9hdCBtMSA9IDAuMDsnICsgLy8gNDAwMDAwLjBcbiAgICAgICAgICAgICdmbG9hdCBtMiA9IDAuMDsnICsgLy8gNDguMFxuICAgICAgICAgICAgJ2lmKGN1cnJlbnRJc1BhcmVudCA9PSAxLjApIHsnICsgJ25ldENoaWxkSW5wdXRTdW1BICs9IG9wcG9zaXRlTmV0T3V0cHV0QSpvcHBvc2l0ZVdlaWdodDsnICsgJ25ldENoaWxkSW5wdXRTdW1CICs9IG9wcG9zaXRlTmV0T3V0cHV0QipvcHBvc2l0ZVdlaWdodDsnICsgJ25ldENoaWxkSW5wdXRTdW1DICs9IG9wcG9zaXRlTmV0T3V0cHV0QypvcHBvc2l0ZVdlaWdodDsnICsgJ25ldENoaWxkSW5wdXRTdW1EICs9IG9wcG9zaXRlTmV0T3V0cHV0RCpvcHBvc2l0ZVdlaWdodDsnICsgJ25ldENoaWxkSW5wdXRTdW1FICs9IG9wcG9zaXRlTmV0T3V0cHV0RSpvcHBvc2l0ZVdlaWdodDsnICsgJ25ldENoaWxkSW5wdXRTdW1GICs9IG9wcG9zaXRlTmV0T3V0cHV0RipvcHBvc2l0ZVdlaWdodDsnICsgJ25ldENoaWxkSW5wdXRTdW1HICs9IG9wcG9zaXRlTmV0T3V0cHV0RypvcHBvc2l0ZVdlaWdodDsnICsgJ2F0cmFjdGlvbiArPSBkaXJUb09wcG9zaXRlTiptYXgoMS4wLCBkaXN0TiphYnMob3Bwb3NpdGVXZWlnaHQpKihtMS8yLjApKTtcXG4nICsgJ3JlcHVsc2lvbiArPSAtZGlyVG9PcHBvc2l0ZU4qbWF4KDEuMCwgKDEuMC1kaXN0TikqYWJzKG9wcG9zaXRlV2VpZ2h0KSoobTIvMi4wKSk7XFxuJyArICdhY3VtQXRyYWN0aW9uICs9IDEuMDtcXG4nICsgJ30gZWxzZSBpZihjdXJyZW50SXNQYXJlbnQgPT0gMC41KSB7JyArICduZXRQYXJlbnRFcnJvcldlaWdodEEgKz0gb3Bwb3NpdGVOZXRFcnJvckEqY3VycmVudFdlaWdodDsnICsgJ25ldFBhcmVudEVycm9yV2VpZ2h0QiArPSBvcHBvc2l0ZU5ldEVycm9yQipjdXJyZW50V2VpZ2h0OycgKyAnbmV0UGFyZW50RXJyb3JXZWlnaHRDICs9IG9wcG9zaXRlTmV0RXJyb3JDKmN1cnJlbnRXZWlnaHQ7JyArICduZXRQYXJlbnRFcnJvcldlaWdodEQgKz0gb3Bwb3NpdGVOZXRFcnJvckQqY3VycmVudFdlaWdodDsnICsgJ25ldFBhcmVudEVycm9yV2VpZ2h0RSArPSBvcHBvc2l0ZU5ldEVycm9yRSpjdXJyZW50V2VpZ2h0OycgKyAnbmV0UGFyZW50RXJyb3JXZWlnaHRGICs9IG9wcG9zaXRlTmV0RXJyb3JGKmN1cnJlbnRXZWlnaHQ7JyArICduZXRQYXJlbnRFcnJvcldlaWdodEcgKz0gb3Bwb3NpdGVOZXRFcnJvckcqY3VycmVudFdlaWdodDsnICsgJ2F0cmFjdGlvbiArPSBkaXJUb09wcG9zaXRlTiptYXgoMS4wLCBkaXN0TiphYnMoY3VycmVudFdlaWdodCkqbTEpO1xcbicgKyAncmVwdWxzaW9uICs9IC1kaXJUb09wcG9zaXRlTiptYXgoMS4wLCAoMS4wLWRpc3ROKSphYnMoY3VycmVudFdlaWdodCkqbTIpO1xcbicgKyAnYWN1bUF0cmFjdGlvbiArPSAxLjA7XFxuJyArICd9JyArICdyZXB1bHNpb24gKz0gLWRpclRvT3Bwb3NpdGVOKm1heCgxLjAsICgxLjAtZGlzdE4pKmFicyhjdXJyZW50V2VpZ2h0KSoobTIvOC4wKSk7XFxuJyArICdhY3VtQXRyYWN0aW9uICs9IDEuMDtcXG4nICsgKFwicmV0dXJuIENhbGN1bGF0aW9uUmVzcG9uc2UoYXRyYWN0aW9uLCBhY3VtQXRyYWN0aW9uLCByZXB1bHNpb24sXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1BLCBuZXRQYXJlbnRFcnJvcldlaWdodEEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1CLCBuZXRQYXJlbnRFcnJvcldlaWdodEIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1DLCBuZXRQYXJlbnRFcnJvcldlaWdodEMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1ELCBuZXRQYXJlbnRFcnJvcldlaWdodEQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1FLCBuZXRQYXJlbnRFcnJvcldlaWdodEUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1GLCBuZXRQYXJlbnRFcnJvcldlaWdodEYsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1HLCBuZXRQYXJlbnRFcnJvcldlaWdodEcpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc3RydWN0IGlkQWRqTWF0cml4UmVzcG9uc2Uge1xcbiAgICAgICAgICAgIHZlYzMgZm9yY2U7XFxuICAgICAgICAgICAgZmxvYXQgbmV0Rk91dHB1dEE7XFxuICAgICAgICAgICAgZmxvYXQgbmV0RXJyb3JXZWlnaHRBO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldEZPdXRwdXRCO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldEVycm9yV2VpZ2h0QjtcXG4gICAgICAgICAgICBmbG9hdCBuZXRGT3V0cHV0QztcXG4gICAgICAgICAgICBmbG9hdCBuZXRFcnJvcldlaWdodEM7XFxuICAgICAgICAgICAgZmxvYXQgbmV0Rk91dHB1dEQ7XFxuICAgICAgICAgICAgZmxvYXQgbmV0RXJyb3JXZWlnaHREO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldEZPdXRwdXRFO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldEVycm9yV2VpZ2h0RTtcXG4gICAgICAgICAgICBmbG9hdCBuZXRGT3V0cHV0RjtcXG4gICAgICAgICAgICBmbG9hdCBuZXRFcnJvcldlaWdodEY7XFxuICAgICAgICAgICAgZmxvYXQgbmV0Rk91dHB1dEc7XFxuICAgICAgICAgICAgZmxvYXQgbmV0RXJyb3JXZWlnaHRHO1xcbiAgICAgICAgfTtcXG4gICAgICAgIGZsb2F0IHRhbmgoZmxvYXQgdmFsKSB7XFxuICAgICAgICAgICAgZmxvYXQgdG1wID0gZXhwKHZhbCk7XFxuICAgICAgICAgICAgZmxvYXQgdGFuSCA9ICh0bXAgLSAxLjAgLyB0bXApIC8gKHRtcCArIDEuMCAvIHRtcCk7XFxuICAgICAgICAgICAgcmV0dXJuIHRhbkg7XFxuICAgICAgICB9XFxuICAgICAgICBmbG9hdCBzaWdtKGZsb2F0IHZhbCkge1xcbiAgICAgICAgICAgIHJldHVybiAoMS4wIC8gKDEuMCArIGV4cCgtdmFsKSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWRBZGpNYXRyaXhSZXNwb25zZSBpZEFkak1hdHJpeF9Gb3JjZUxheW91dChmbG9hdCBub2RlSWQsIHZlYzMgY3VycmVudFBvcywgdmVjMyBjdXJyZW50RGlyLCBmbG9hdCBudW1PZkNvbm5lY3Rpb25zKSB7XFxuICAgICAgICAgICAgdmVjMyBhdHJhY3Rpb24gPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcbiAgICAgICAgICAgIGZsb2F0IGFjdW1BdHJhY3Rpb24gPSAxLjA7XFxuICAgICAgICAgICAgdmVjMyByZXB1bHNpb24gPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcblxcbiAgICAgICAgICAgIHZlYzMgZm9yY2UgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcblxcblxcbiAgICAgICAgICAgIGZsb2F0IG5ldENoaWxkSW5wdXRTdW1BID0gMC4wO1xcbiAgICAgICAgICAgIGZsb2F0IGZvdXRwdXRBID0gMC4wO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldFBhcmVudEVycm9yV2VpZ2h0QSA9IDAuMDtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtQiA9IDAuMDtcXG4gICAgICAgICAgICBmbG9hdCBmb3V0cHV0QiA9IDAuMDtcXG4gICAgICAgICAgICBmbG9hdCBuZXRQYXJlbnRFcnJvcldlaWdodEIgPSAwLjA7XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgZmxvYXQgbmV0Q2hpbGRJbnB1dFN1bUMgPSAwLjA7XFxuICAgICAgICAgICAgZmxvYXQgZm91dHB1dEMgPSAwLjA7XFxuICAgICAgICAgICAgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRDID0gMC4wO1xcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAgIGZsb2F0IG5ldENoaWxkSW5wdXRTdW1EID0gMC4wO1xcbiAgICAgICAgICAgIGZsb2F0IGZvdXRwdXREID0gMC4wO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldFBhcmVudEVycm9yV2VpZ2h0RCA9IDAuMDtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICBmbG9hdCBuZXRDaGlsZElucHV0U3VtRSA9IDAuMDtcXG4gICAgICAgICAgICBmbG9hdCBmb3V0cHV0RSA9IDAuMDtcXG4gICAgICAgICAgICBmbG9hdCBuZXRQYXJlbnRFcnJvcldlaWdodEUgPSAwLjA7XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgZmxvYXQgbmV0Q2hpbGRJbnB1dFN1bUYgPSAwLjA7XFxuICAgICAgICAgICAgZmxvYXQgZm91dHB1dEYgPSAwLjA7XFxuICAgICAgICAgICAgZmxvYXQgbmV0UGFyZW50RXJyb3JXZWlnaHRGID0gMC4wO1xcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAgIGZsb2F0IG5ldENoaWxkSW5wdXRTdW1HID0gMC4wO1xcbiAgICAgICAgICAgIGZsb2F0IGZvdXRwdXRHID0gMC4wO1xcbiAgICAgICAgICAgIGZsb2F0IG5ldFBhcmVudEVycm9yV2VpZ2h0RyA9IDAuMDtcXG4gICAgICAgICAgICBcXG5cXG4gICAgICAgICAgICBpZihub2RlSWQgPCBub2Rlc0NvdW50KSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IGN1cnJlbnRBY3RpdmF0aW9uRm4gPSAwLjA7XFxuICAgICAgICAgICAgICAgIHZlYzIgeEdlb21DdXJyZW50ID0gZ2V0X2dsb2JhbF9pZChub2RlSWQsIHVCdWZmZXJXaWR0aCwgXCIgKyBnZW9tZXRyeUxlbmd0aC50b0ZpeGVkKDEpICsgXCIpO1xcbiAgICAgICAgICAgICAgICBmb3IoaW50IG49MDsgbiA8IDQwOTY7IG4rKykge1xcbiAgICAgICAgICAgICAgICAgICAgaWYoZmxvYXQobikgPj0gbm9kZXNDb3VudCkge2JyZWFrO31cXG4gICAgICAgICAgICAgICAgICAgIGlmKGZsb2F0KG4pICE9IG5vZGVJZCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIgeEdlb21PcHBvc2l0ZSA9IGdldF9nbG9iYWxfaWQoZmxvYXQobiksIHVCdWZmZXJXaWR0aCwgXCIgKyBnZW9tZXRyeUxlbmd0aC50b0ZpeGVkKDEpICsgXCIpO1xcblxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIgeEFkak1hdEN1cnJlbnQgPSBnZXRfZ2xvYmFsX2lkKHZlYzIoZmxvYXQobiksIG5vZGVJZCksIHdpZHRoQWRqTWF0cml4KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMyIHhBZGpNYXRPcHBvc2l0ZSA9IGdldF9nbG9iYWxfaWQodmVjMihub2RlSWQsIGZsb2F0KG4pKSwgd2lkdGhBZGpNYXRyaXgpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzQgcGl4QWRqTWF0QUN1cnJlbnQgPSBhZGphY2VuY3lNYXRyaXhbeEFkak1hdEN1cnJlbnRdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzQgcGl4QWRqTWF0QU9wcG9zaXRlID0gYWRqYWNlbmN5TWF0cml4W3hBZGpNYXRPcHBvc2l0ZV07XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjNCBwaXhBZGpNYXRCQ3VycmVudCA9IGFkamFjZW5jeU1hdHJpeEJbeEFkak1hdEN1cnJlbnRdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzQgcGl4QWRqTWF0Qk9wcG9zaXRlID0gYWRqYWNlbmN5TWF0cml4Qlt4QWRqTWF0T3Bwb3NpdGVdO1xcblxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIENhbGN1bGF0aW9uUmVzcG9uc2UgY2FsY1Jlc3BvbnNlID0gY2FsY3VsYXRlKG5vZGVJZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpeEFkak1hdEFDdXJyZW50LCBwaXhBZGpNYXRBT3Bwb3NpdGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhBZGpNYXRCQ3VycmVudCwgcGl4QWRqTWF0Qk9wcG9zaXRlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeEdlb21DdXJyZW50LCB4R2VvbU9wcG9zaXRlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvcywgY3VycmVudERpcixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0cmFjdGlvbiwgYWN1bUF0cmFjdGlvbiwgcmVwdWxzaW9uLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0Q2hpbGRJbnB1dFN1bUEsIG5ldFBhcmVudEVycm9yV2VpZ2h0QSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1CLCBuZXRQYXJlbnRFcnJvcldlaWdodEIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXRDaGlsZElucHV0U3VtQywgbmV0UGFyZW50RXJyb3JXZWlnaHRDLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0Q2hpbGRJbnB1dFN1bUQsIG5ldFBhcmVudEVycm9yV2VpZ2h0RCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1FLCBuZXRQYXJlbnRFcnJvcldlaWdodEUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXRDaGlsZElucHV0U3VtRiwgbmV0UGFyZW50RXJyb3JXZWlnaHRGLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0Q2hpbGRJbnB1dFN1bUcsIG5ldFBhcmVudEVycm9yV2VpZ2h0Ryk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYXRyYWN0aW9uID0gY2FsY1Jlc3BvbnNlLmF0cmFjdGlvbjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3VtQXRyYWN0aW9uID0gY2FsY1Jlc3BvbnNlLmFjdW1BdHJhY3Rpb247XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwdWxzaW9uID0gY2FsY1Jlc3BvbnNlLnJlcHVsc2lvbjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRDaGlsZElucHV0U3VtQSA9IGNhbGNSZXNwb25zZS5uZXRDaGlsZElucHV0U3VtQTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRQYXJlbnRFcnJvcldlaWdodEEgPSBjYWxjUmVzcG9uc2UubmV0UGFyZW50RXJyb3JXZWlnaHRBO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1CID0gY2FsY1Jlc3BvbnNlLm5ldENoaWxkSW5wdXRTdW1CO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0QiA9IGNhbGNSZXNwb25zZS5uZXRQYXJlbnRFcnJvcldlaWdodEI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0Q2hpbGRJbnB1dFN1bUMgPSBjYWxjUmVzcG9uc2UubmV0Q2hpbGRJbnB1dFN1bUM7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRDID0gY2FsY1Jlc3BvbnNlLm5ldFBhcmVudEVycm9yV2VpZ2h0QztcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRDaGlsZElucHV0U3VtRCA9IGNhbGNSZXNwb25zZS5uZXRDaGlsZElucHV0U3VtRDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRQYXJlbnRFcnJvcldlaWdodEQgPSBjYWxjUmVzcG9uc2UubmV0UGFyZW50RXJyb3JXZWlnaHREO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldENoaWxkSW5wdXRTdW1FID0gY2FsY1Jlc3BvbnNlLm5ldENoaWxkSW5wdXRTdW1FO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RSA9IGNhbGNSZXNwb25zZS5uZXRQYXJlbnRFcnJvcldlaWdodEU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0Q2hpbGRJbnB1dFN1bUYgPSBjYWxjUmVzcG9uc2UubmV0Q2hpbGRJbnB1dFN1bUY7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRGID0gY2FsY1Jlc3BvbnNlLm5ldFBhcmVudEVycm9yV2VpZ2h0RjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRDaGlsZElucHV0U3VtRyA9IGNhbGNSZXNwb25zZS5uZXRDaGlsZElucHV0U3VtRztcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRQYXJlbnRFcnJvcldlaWdodEcgPSBjYWxjUmVzcG9uc2UubmV0UGFyZW50RXJyb3JXZWlnaHRHO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIFwiICsgR3JhcGhVdGlscy5lZmZlcmVudE5vZGVzU3RyKGVmZmVyZW50U3RhcnQsIGVmZmVyZW50Tm9kZXNDb3VudCkgKyBcIlxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICByZXR1cm4gaWRBZGpNYXRyaXhSZXNwb25zZSh2ZWMzKGZvcmNlKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEEsIG5ldFBhcmVudEVycm9yV2VpZ2h0QSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEIsIG5ldFBhcmVudEVycm9yV2VpZ2h0QixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEMsIG5ldFBhcmVudEVycm9yV2VpZ2h0QyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEQsIG5ldFBhcmVudEVycm9yV2VpZ2h0RCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEUsIG5ldFBhcmVudEVycm9yV2VpZ2h0RSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEYsIG5ldFBhcmVudEVycm9yV2VpZ2h0RixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEcsIG5ldFBhcmVudEVycm9yV2VpZ2h0Ryk7XFxuICAgICAgICB9XCIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZWZmZXJlbnROb2Rlc1N0clwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZWZmZXJlbnROb2Rlc1N0cihlZmZlcmVudFN0YXJ0LCBlZmZlcmVudE5vZGVzQ291bnQpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBcIlxcbiAgICAgICAgICAgIGlmKG5vZGVJZCA8IGFmZmVyZW50Tm9kZXNDb3VudCkge1xcbiAgICAgICAgICAgICAgICBmb3IoZmxvYXQgbj0wLjA7IG4gPCAxMDI0LjA7IG4rPTEuMCkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYobiA+PSBhZmZlcmVudE5vZGVzQ291bnQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGlmKG5vZGVJZCA9PSBuKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEEgPSBhZmZlcmVudE5vZGVzQVtpbnQobildO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdXRwdXRCID0gYWZmZXJlbnROb2Rlc0JbaW50KG4pXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3V0cHV0QyA9IGFmZmVyZW50Tm9kZXNDW2ludChuKV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEQgPSBhZmZlcmVudE5vZGVzRFtpbnQobildO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdXRwdXRFID0gYWZmZXJlbnROb2Rlc0VbaW50KG4pXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3V0cHV0RiA9IGFmZmVyZW50Tm9kZXNGW2ludChuKV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm91dHB1dEcgPSBhZmZlcmVudE5vZGVzR1tpbnQobildO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgZm91dHB1dEEgPSBtYXgoMC4wLCBuZXRDaGlsZElucHV0U3VtQSk7IFwiICsgXCJcXG4gICAgICAgICAgICAgICAgZm91dHB1dEIgPSBtYXgoMC4wLCBuZXRDaGlsZElucHV0U3VtQik7XFxuICAgICAgICAgICAgICAgIGZvdXRwdXRDID0gbWF4KDAuMCwgbmV0Q2hpbGRJbnB1dFN1bUMpO1xcbiAgICAgICAgICAgICAgICBmb3V0cHV0RCA9IG1heCgwLjAsIG5ldENoaWxkSW5wdXRTdW1EKTtcXG4gICAgICAgICAgICAgICAgZm91dHB1dEUgPSBtYXgoMC4wLCBuZXRDaGlsZElucHV0U3VtRSk7XFxuICAgICAgICAgICAgICAgIGZvdXRwdXRGID0gbWF4KDAuMCwgbmV0Q2hpbGRJbnB1dFN1bUYpO1xcbiAgICAgICAgICAgICAgICBmb3V0cHV0RyA9IG1heCgwLjAsIG5ldENoaWxkSW5wdXRTdW1HKTtcXG4gICAgICAgICAgICB9XCI7XG5cbiAgICAgICAgICAgIHN0ciArPSBcIlxcbiAgICAgICAgaWYobm9kZUlkID09IFwiICsgZWZmZXJlbnRTdGFydC50b0ZpeGVkKDEpICsgKFwiKSB7XFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRBID0gKGVmZmVyZW50Tm9kZXNBWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtQS1lZmZlcmVudE5vZGVzQVswXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRCID0gKGVmZmVyZW50Tm9kZXNCWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtQi1lZmZlcmVudE5vZGVzQlswXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRDID0gKGVmZmVyZW50Tm9kZXNDWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtQy1lZmZlcmVudE5vZGVzQ1swXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHREID0gKGVmZmVyZW50Tm9kZXNEWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtRC1lZmZlcmVudE5vZGVzRFswXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRFID0gKGVmZmVyZW50Tm9kZXNFWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtRS1lZmZlcmVudE5vZGVzRVswXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRGID0gKGVmZmVyZW50Tm9kZXNGWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtRi1lZmZlcmVudE5vZGVzRlswXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRHID0gKGVmZmVyZW50Tm9kZXNHWzBdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtRy1lZmZlcmVudE5vZGVzR1swXSA6IDAuMDtcXG4gICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICB9XCIpO1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IGVmZmVyZW50U3RhcnQgKyAxOyBuIDwgZWZmZXJlbnRTdGFydCArIGVmZmVyZW50Tm9kZXNDb3VudDsgbisrKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IFwiXFxuICAgICAgICAgICAgZWxzZSBpZihub2RlSWQgPT0gXCIgKyBuLnRvRml4ZWQoMSkgKyBcIikge1xcbiAgICAgICAgICAgICAgICBuZXRQYXJlbnRFcnJvcldlaWdodEEgPSAoZWZmZXJlbnROb2Rlc0FbXCIgKyBNYXRoLnJvdW5kKG4gLSBlZmZlcmVudFN0YXJ0KSArIFwiXSAhPSAwLjApID8gbmV0Q2hpbGRJbnB1dFN1bUEtZWZmZXJlbnROb2Rlc0FbXCIgKyBNYXRoLnJvdW5kKG4gLSBlZmZlcmVudFN0YXJ0KSArIChcIl0gOiAwLjA7XFxuICAgICAgICAgICAgICAgIFwiICsgXCJcXG4gICAgICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRCID0gKGVmZmVyZW50Tm9kZXNCW1wiKSArIE1hdGgucm91bmQobiAtIGVmZmVyZW50U3RhcnQpICsgXCJdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtQi1lZmZlcmVudE5vZGVzQltcIiArIE1hdGgucm91bmQobiAtIGVmZmVyZW50U3RhcnQpICsgKFwiXSA6IDAuMDtcXG4gICAgICAgICAgICAgICAgXCIgKyBcIlxcbiAgICAgICAgICAgICAgICBuZXRQYXJlbnRFcnJvcldlaWdodEMgPSAoZWZmZXJlbnROb2Rlc0NbXCIpICsgTWF0aC5yb3VuZChuIC0gZWZmZXJlbnRTdGFydCkgKyBcIl0gIT0gMC4wKSA/IG5ldENoaWxkSW5wdXRTdW1DLWVmZmVyZW50Tm9kZXNDW1wiICsgTWF0aC5yb3VuZChuIC0gZWZmZXJlbnRTdGFydCkgKyAoXCJdIDogMC4wO1xcbiAgICAgICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RCA9IChlZmZlcmVudE5vZGVzRFtcIikgKyBNYXRoLnJvdW5kKG4gLSBlZmZlcmVudFN0YXJ0KSArIFwiXSAhPSAwLjApID8gbmV0Q2hpbGRJbnB1dFN1bUQtZWZmZXJlbnROb2Rlc0RbXCIgKyBNYXRoLnJvdW5kKG4gLSBlZmZlcmVudFN0YXJ0KSArIChcIl0gOiAwLjA7XFxuICAgICAgICAgICAgICAgIFwiICsgXCJcXG4gICAgICAgICAgICAgICAgbmV0UGFyZW50RXJyb3JXZWlnaHRFID0gKGVmZmVyZW50Tm9kZXNFW1wiKSArIE1hdGgucm91bmQobiAtIGVmZmVyZW50U3RhcnQpICsgXCJdICE9IDAuMCkgPyBuZXRDaGlsZElucHV0U3VtRS1lZmZlcmVudE5vZGVzRVtcIiArIE1hdGgucm91bmQobiAtIGVmZmVyZW50U3RhcnQpICsgKFwiXSA6IDAuMDtcXG4gICAgICAgICAgICAgICAgXCIgKyBcIlxcbiAgICAgICAgICAgICAgICBuZXRQYXJlbnRFcnJvcldlaWdodEYgPSAoZWZmZXJlbnROb2Rlc0ZbXCIpICsgTWF0aC5yb3VuZChuIC0gZWZmZXJlbnRTdGFydCkgKyBcIl0gIT0gMC4wKSA/IG5ldENoaWxkSW5wdXRTdW1GLWVmZmVyZW50Tm9kZXNGW1wiICsgTWF0aC5yb3VuZChuIC0gZWZmZXJlbnRTdGFydCkgKyAoXCJdIDogMC4wO1xcbiAgICAgICAgICAgICAgICBcIiArIFwiXFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RyA9IChlZmZlcmVudE5vZGVzR1tcIikgKyBNYXRoLnJvdW5kKG4gLSBlZmZlcmVudFN0YXJ0KSArIFwiXSAhPSAwLjApID8gbmV0Q2hpbGRJbnB1dFN1bUctZWZmZXJlbnROb2Rlc0dbXCIgKyBNYXRoLnJvdW5kKG4gLSBlZmZlcmVudFN0YXJ0KSArIChcIl0gOiAwLjA7XFxuICAgICAgICAgICAgICAgIFwiICsgXCJcXG4gICAgICAgICAgICB9XCIpO1xuICAgICAgICAgICAgfXN0ciArPSBcIlxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgaWYoZm91dHB1dEEgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0QSA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYoZm91dHB1dEIgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0QiA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYoZm91dHB1dEMgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0QyA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYoZm91dHB1dEQgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RCA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYoZm91dHB1dEUgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RSA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYoZm91dHB1dEYgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RiA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYoZm91dHB1dEcgPD0gMC4wKSB7XFxuICAgICAgICAgICAgICAgIG5ldFBhcmVudEVycm9yV2VpZ2h0RyA9IDAuMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XCI7XG5cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gR3JhcGhVdGlscztcbn0oKTtcblxuZ2xvYmFsLkdyYXBoVXRpbHMgPSBHcmFwaFV0aWxzO1xubW9kdWxlLmV4cG9ydHMuR3JhcGhVdGlscyA9IEdyYXBoVXRpbHM7Il19
