(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KERNEL_DIR = exports.KERNEL_DIR = function () {
    function KERNEL_DIR() {
        _classCallCheck(this, KERNEL_DIR);
    }

    _createClass(KERNEL_DIR, null, [{
        key: "getSrc",
        value: function getSrc(customCode, geometryLength, afferentNodesCount, efferentStart, efferentNodesCount) {
            var outputArr = ["dir", "posXYZW", "dataB", "dataF", "dataG", "dataH"];
            var returnStr = 'return [vec4(currentDir, 1.0), vec4(currentPos.x, currentPos.y, currentPos.z, 1.0), currentDataB, currentDataF, currentDataG, currentDataH];';

            return ["x", outputArr,
            // head
            "float tanh(float val) {\n                float tmp = exp(val);\n                float tanH = (tmp - 1.0 / tmp) / (tmp + 1.0 / tmp);\n                return tanH;\n            }\n            float sigm(float val) {\n                return (1.0 / (1.0 + exp(-val)));\n            }",

            // source
            "float nodeId = data[x].x;\n            vec2 xGeometry = get_global_id(nodeId, uBufferWidth, " + geometryLength.toFixed(1) + ");\n\n\n            vec3 currentPos = posXYZW[xGeometry].xyz;\n            vec3 currentDir = dir[xGeometry].xyz;\n\n\n            vec4 currentDataB = dataB[xGeometry];\n            vec4 currentDataF = dataF[xGeometry];\n            vec4 currentDataG = dataG[xGeometry];\n            vec4 currentDataH = dataH[xGeometry];\n\n            currentDir = vec3(0.0, 0.0, 0.0);\n\n            \n            vec3 atraction = vec3(0.0, 0.0, 0.0);\n            float acumAtraction = 1.0;\n            vec3 repulsion = vec3(0.0, 0.0, 0.0);\n\n            vec3 force = vec3(0.0, 0.0, 0.0);\n\n\n            float netChildInputSumA = 0.0;\n            float foutputA = 0.0;\n            float netParentErrorWeightA = 0.0;\n            \n            float netChildInputSumB = 0.0;\n            float foutputB = 0.0;\n            float netParentErrorWeightB = 0.0;\n            \n            float netChildInputSumC = 0.0;\n            float foutputC = 0.0;\n            float netParentErrorWeightC = 0.0;\n            \n            float netChildInputSumD = 0.0;\n            float foutputD = 0.0;\n            float netParentErrorWeightD = 0.0;\n            \n            float netChildInputSumE = 0.0;\n            float foutputE = 0.0;\n            float netParentErrorWeightE = 0.0;\n            \n            float netChildInputSumF = 0.0;\n            float foutputF = 0.0;\n            float netParentErrorWeightF = 0.0;\n            \n            float netChildInputSumG = 0.0;\n            float foutputG = 0.0;\n            float netParentErrorWeightG = 0.0;\n            \n\n            if(nodeId < nodesCount && enableTrain == 0.0) {\n                float currentActivationFn = 0.0;\n                vec2 xGeomCurrent = get_global_id(nodeId, uBufferWidth, " + geometryLength.toFixed(1) + ");\n                for(int n=0; n < 4096; n++) {\n                    if(float(n) >= nodesCount) {break;}\n                    if(float(n) != nodeId) {\n                        vec2 xGeomOpposite = get_global_id(float(n), uBufferWidth, " + geometryLength.toFixed(1) + ");\n\n\n                        vec2 xAdjMatCurrent = get_global_id(vec2(float(n), nodeId), widthAdjMatrix);\n                        vec2 xAdjMatOpposite = get_global_id(vec2(nodeId, float(n)), widthAdjMatrix);\n\n                        vec4 pixAdjMatACurrent = adjacencyMatrix[xAdjMatCurrent];\n                        vec4 pixAdjMatAOpposite = adjacencyMatrix[xAdjMatOpposite];\n\n                        vec4 pixAdjMatBCurrent = adjacencyMatrixB[xAdjMatCurrent];\n                        vec4 pixAdjMatBOpposite = adjacencyMatrixB[xAdjMatOpposite];\n                        \n                        vec4 pixAdjMatCCurrent = adjacencyMatrixC[xAdjMatCurrent];\n                        vec4 pixAdjMatCOpposite = adjacencyMatrixC[xAdjMatOpposite];\n                        \n                        vec4 pixAdjMatDCurrent = adjacencyMatrixD[xAdjMatCurrent];\n                        vec4 pixAdjMatDOpposite = adjacencyMatrixD[xAdjMatOpposite];\n\n\n                                                                    \n                        " + "\n                        float currentLayerNum = pixAdjMatACurrent.x;\n                        float currentWeight = pixAdjMatACurrent.z;\n                        float currentIsParent = pixAdjMatACurrent.w;            \n                        " + "\n                        float oppositeLayerNum = pixAdjMatAOpposite.x;\n                        float oppositeWeight = pixAdjMatAOpposite.z;\n                        float oppositeIsParent = pixAdjMatAOpposite.w;\n            \n            \n                        " + "\n                        float currentCostA = pixAdjMatBCurrent.y;            \n                        " + "            \n            \n                        " + "\n                        float currentCostB = pixAdjMatCCurrent.x;\n                        float currentCostC = pixAdjMatCCurrent.y;\n                        float currentCostD = pixAdjMatCCurrent.z;\n                        float currentCostE = pixAdjMatCCurrent.w;            \n                        " + "                        \n                        \n                        " + "\n                        float currentCostF = pixAdjMatDCurrent.x;\n                        float currentCostG = pixAdjMatDCurrent.y;           \n                        " + "\n                        \n                        \n            \n                        " + "            \n                        " + "                        \n                        float oppositeNetOutputA = dataB[xGeomOpposite].z;                        \n                        float oppositeNetOutputB = dataF[xGeomOpposite].x;                    \n                        float oppositeNetOutputC = dataF[xGeomOpposite].z;                    \n                        float oppositeNetOutputD = dataG[xGeomOpposite].x;                    \n                        float oppositeNetOutputE = dataG[xGeomOpposite].z;                    \n                        float oppositeNetOutputF = dataH[xGeomOpposite].x;                    \n                        float oppositeNetOutputG = dataH[xGeomOpposite].z;\n            \n            \n                        " + "\n                        " + "\n                        " + "            \n                        " + "\n                        vec3 oppositePos = posXYZW[xGeomOpposite].xyz;\n                        vec3 oppositeDir = dir[xGeomOpposite].xyz;\n            \n                        " + "\n                        vec3 dirToOpposite = (oppositePos-currentPos);\n                        vec3 dirToOppositeN = normalize(dirToOpposite);\n            \n                        float dist = distance(oppositePos, currentPos); " + "\n                        float distN = max(0.0,dist)/100000.0;\n            \n                        float mm = 10000000.0;\n                        float m1 = 400000.0/mm;\n                        float m2 = 48.0/mm;\n                        if(currentIsParent == 1.0) {\n                            netChildInputSumA += oppositeNetOutputA*oppositeWeight;\n                            netChildInputSumB += oppositeNetOutputB*oppositeWeight;\n                            netChildInputSumC += oppositeNetOutputC*oppositeWeight;\n                            netChildInputSumD += oppositeNetOutputD*oppositeWeight;\n                            netChildInputSumE += oppositeNetOutputE*oppositeWeight;\n                            netChildInputSumF += oppositeNetOutputF*oppositeWeight;\n                            netChildInputSumG += oppositeNetOutputG*oppositeWeight;\n                            \n                            atraction += dirToOppositeN*max(1.0, distN*abs(oppositeWeight)*(m1/2.0));\n                            repulsion += -dirToOppositeN*max(1.0, (1.0-distN)*abs(oppositeWeight)*(m2/2.0));\n                            acumAtraction += 1.0;\n                        } else if(currentIsParent == 0.5) {\n                            netParentErrorWeightA += currentCostA;\n                            netParentErrorWeightB += currentCostB;\n                            netParentErrorWeightC += currentCostC;\n                            netParentErrorWeightD += currentCostD;\n                            netParentErrorWeightE += currentCostE;\n                            netParentErrorWeightF += currentCostF;\n                            netParentErrorWeightG += currentCostG;\n                            \n                            atraction += dirToOppositeN*max(1.0, distN*abs(currentWeight)*m1);\n                            repulsion += -dirToOppositeN*max(1.0, (1.0-distN)*abs(currentWeight)*m2);\n                            acumAtraction += 1.0;\n                        }\n            \n                        repulsion += -dirToOppositeN*max(1.0, (1.0-distN)*abs(currentWeight)*(m2/8.0));\n                        acumAtraction += 1.0;\n                    }\n                }\n                \n                float vndm = (viewNeuronDynamics == 1.0) ? netChildInputSumA : 1.0;\n                force += (atraction/acumAtraction)*abs(vndm);\n                force += (repulsion/acumAtraction)*abs(vndm);\n                currentDir += force;\n                \n                \n                float currentBiasNode = dataB[xGeomCurrent].x;\n                \n                " + KERNEL_DIR.efferentNodesStr(afferentNodesCount, efferentStart, efferentNodesCount) + "\n                \n                currentDataB = vec4(currentDataB.x, netParentErrorWeightA, foutputA, netParentErrorWeightB);\n                currentDataF = vec4(foutputB, netParentErrorWeightC, foutputC, netParentErrorWeightD);\n                currentDataG = vec4(foutputD, netParentErrorWeightE, foutputE, netParentErrorWeightF);\n                currentDataH = vec4(foutputF, netParentErrorWeightG, foutputG, 0.0);\n            }\n\n            " + (customCode !== undefined ? customCode : '') + "\n\n            if(enableDrag == 1.0) {\n                if(nodeId == idToDrag) {\n                    currentPos = vec3(MouseDragTranslationX, MouseDragTranslationY, MouseDragTranslationZ);\n                }\n            }\n\n            currentPos += currentDir;\n            if(only2d == 1.0) {\n                currentPos.y = 0.0;\n            }\n\n            " + returnStr];
        }
    }, {
        key: "efferentNodesStr",
        value: function efferentNodesStr(afferentNodesCount, efferentStart, efferentNodesCount) {
            var arrUniformsCount = Math.ceil(afferentNodesCount / 64);
            /////////////////////////////////////////////////
            // OUTPUT
            /////////////////////////////////////////////////
            var str = "\n            if(freezeOutput == 0.0) {\n                if(nodeId < afferentNodesCount) {\n                    for(float n=0.0; n < 256.0; n+=1.0) {\n                        if(n >= afferentNodesCount) {\n                            break;\n                        }\n                        if(nodeId == n) {";
            for (var n = arrUniformsCount - 1; n >= 0; n--) {
                var cond = n === arrUniformsCount - 1 ? "if" : "else if";
                str += "\n                                " + cond + "(nodeId >= " + (n * 64).toFixed(1) + ") {\n                                    foutputA = afferentNodesA" + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    foutputB = afferentNodesB") + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    foutputC = afferentNodesC") + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    foutputD = afferentNodesD") + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    foutputE = afferentNodesE") + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    foutputF = afferentNodesF") + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    foutputG = afferentNodesG") + n + ("[int(n-(" + (n * 64).toFixed(1) + "))];\n                                    \n                                }");
            }
            str += "            break;\n                        }\n                    }\n                } else {\n                    if(currentBiasNode == 0.0) {\n                        if(nodeId >= " + efferentStart.toFixed(1) + (") {\n                            foutputA = netChildInputSumA;\n                            foutputB = netChildInputSumB;\n                            foutputC = netChildInputSumC;\n                            foutputD = netChildInputSumD;\n                            foutputE = netChildInputSumE;\n                            foutputF = netChildInputSumF;\n                            foutputG = netChildInputSumG;\n                        } else {                                  \n                            foutputA = (netChildInputSumA <= 0.0) ? 0.01*netChildInputSumA : netChildInputSumA; " + "\n                            foutputB = (netChildInputSumB <= 0.0) ? 0.01*netChildInputSumB : netChildInputSumB;\n                            foutputC = (netChildInputSumC <= 0.0) ? 0.01*netChildInputSumC : netChildInputSumC;\n                            foutputD = (netChildInputSumD <= 0.0) ? 0.01*netChildInputSumD : netChildInputSumD;\n                            foutputE = (netChildInputSumE <= 0.0) ? 0.01*netChildInputSumE : netChildInputSumE;\n                            foutputF = (netChildInputSumF <= 0.0) ? 0.01*netChildInputSumF : netChildInputSumF;\n                            foutputG = (netChildInputSumG <= 0.0) ? 0.01*netChildInputSumG : netChildInputSumG;\n                        }\n                    } else {\n                        foutputA = 1.0;\n                        foutputB = 1.0;\n                        foutputC = 1.0;\n                        foutputD = 1.0;\n                        foutputE = 1.0;\n                        foutputF = 1.0;\n                        foutputG = 1.0;\n                    }\n                }\n            } else {\n                foutputA = currentDataB.z;\n                foutputB = currentDataF.x;\n                foutputC = currentDataF.z;\n                foutputD = currentDataG.x;\n                foutputE = currentDataG.z;\n                foutputF = currentDataH.x;\n                foutputG = currentDataH.z;\n            }");

            /////////////////////////////////////////////////
            // ERROR
            /////////////////////////////////////////////////
            for (var _n = efferentStart; _n < efferentStart + efferentNodesCount; _n++) {
                var _cond = _n === efferentStart ? "if" : "else if";
                str += "\n            " + _cond + "(nodeId == " + _n.toFixed(1) + (") {\n                if(freezeOutput == 0.0) {\n                    foutputA = netChildInputSumA; " + " \n                    foutputB = netChildInputSumB;\n                    foutputC = netChildInputSumC;\n                    foutputD = netChildInputSumD;\n                    foutputE = netChildInputSumE;\n                    foutputF = netChildInputSumF;\n                    foutputG = netChildInputSumG;\n                } else {\n                    foutputA = currentDataB.z;\n                    foutputB = currentDataF.x;\n                    foutputC = currentDataF.z;\n                    foutputD = currentDataG.x;\n                    foutputE = currentDataG.z;\n                    foutputF = currentDataH.x;\n                    foutputG = currentDataH.z;\n                }               \n                netParentErrorWeightA = efferentNodesA[") + Math.round(_n - efferentStart) + "];\n                netParentErrorWeightB = efferentNodesB[" + Math.round(_n - efferentStart) + "];\n                netParentErrorWeightC = efferentNodesC[" + Math.round(_n - efferentStart) + "];\n                netParentErrorWeightD = efferentNodesD[" + Math.round(_n - efferentStart) + "];\n                netParentErrorWeightE = efferentNodesE[" + Math.round(_n - efferentStart) + "];\n                netParentErrorWeightF = efferentNodesF[" + Math.round(_n - efferentStart) + "];\n                netParentErrorWeightG = efferentNodesG[" + Math.round(_n - efferentStart) + "];\n            }";
            }
            return str;
        }
    }]);

    return KERNEL_DIR;
}();

global.KERNEL_DIR = KERNEL_DIR;
module.exports.KERNEL_DIR = KERNEL_DIR;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
