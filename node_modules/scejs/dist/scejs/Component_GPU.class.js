(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var exp = { "WebCLGL": "./WebCLGL.class",
            "WebCLGLBuffer": "./WebCLGLBuffer.class.js",
            "WebCLGLFor": "./WebCLGLFor.class.js",
            "WebCLGLKernel": "./WebCLGLKernel.class.js",
            "WebCLGLUtils": "./WebCLGLUtils.class.js",
            "WebCLGLVertexFragmentProgram": "./WebCLGLVertexFragmentProgram.class.js"
};

for(var key in exp)
    exports[key] = require(exp[key]);
},{}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var Component = exports.Component = function () {
    function Component() {
        _classCallCheck(this, Component);

        this.type = null;
        this.node = null;
    }

    /**
     * initialize
     * @param {Node} nod
     * @param {WebGLRenderingContext} glCtx
     */


    _createClass(Component, [{
        key: "initialize",
        value: function initialize(nod, glCtx) {}

        /**
         * tick
         * @param {number} delta
         */

    }, {
        key: "tick",
        value: function tick(delta) {}
    }]);

    return Component;
}();

global.Component = Component;
module.exports.Component = Component;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Component_GPU = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require("webclgl");

var _Component2 = require("./Component.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class
 * @constructor
 */
var Component_GPU = exports.Component_GPU = function (_Component) {
    _inherits(Component_GPU, _Component);

    function Component_GPU() {
        _classCallCheck(this, Component_GPU);

        var _this = _possibleConstructorReturn(this, (Component_GPU.__proto__ || Object.getPrototypeOf(Component_GPU)).call(this));

        _this.type = _Constants.Constants.COMPONENT_TYPES.GPU;
        _this.node = null;
        _this.gl = null;

        _this.gpufG = null;
        _this.args = {};
        return _this;
    }

    /**
     * initialize
     * @param {Node} nod
     * @param {WebGLRenderingContext} glCtx.
     * @override
     */


    _createClass(Component_GPU, [{
        key: "initialize",
        value: function initialize(nod, glCtx) {
            this.node = nod;
            this.gl = glCtx;
        }
    }, {
        key: "tick",


        /**
         * tick
         * @override
         */
        value: function tick(delta) {
            this.tickArguments();

            if (this.gpufG != null) this.gpufG.processKernels();

            if (this.gpufG != null) this.gpufG.processGraphic(undefined);
        }
    }, {
        key: "setGPUFor",


        /**
         * setGPUFor
         */
        value: function setGPUFor() {
            var _this2 = this,
                _arguments = arguments;

            for (var key in arguments[1]) {
                var expl = key.split(" ");
                if (expl != null && expl.length > 1) {
                    var argName = expl[1];
                    this.args[argName] = {
                        "fnvalue": arguments[1][key],
                        "updatable": null,
                        "splits": null,
                        "overrideDimensions": null };
                }
                arguments[1][key] = arguments[1][key]();
            }

            var F = function F() {
                return gpufor.apply(_this2, _arguments);
            };
            this.gpufG = new F();
        }
    }, {
        key: "getWebCLGL",


        /**
         * getWebCLGL
         * @returns {WebCLGL}
         */
        value: function getWebCLGL() {
            return this.gpufG.getWebCLGL();
        }
    }, {
        key: "addArgument",


        // █████╗ ██████╗  ██████╗ ██╗   ██╗███╗   ███╗███████╗███╗   ██╗████████╗███████╗
        //██╔══██╗██╔══██╗██╔════╝ ██║   ██║████╗ ████║██╔════╝████╗  ██║╚══██╔══╝██╔════╝
        //███████║██████╔╝██║  ███╗██║   ██║██╔████╔██║█████╗  ██╔██╗ ██║   ██║   ███████╗
        //██╔══██║██╔══██╗██║   ██║██║   ██║██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   ╚════██║
        //██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   ███████║
        //╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝

        /**
         *
         */
        value: function addArgument(arg, value) {
            this.args[arg.split(" ")[1]] = {
                "fnvalue": value,
                "updatable": null,
                "splits": null,
                "overrideDimensions": null };

            this.gpufG.addArg(arg);
        }
    }, {
        key: "setArg",


        /**
         * @param {String} argument Argument to set
         * @param {Function} fnvalue
         * @param {Array<number>} [splits=[array.length]]
         * @param {Array<number>} [overrideDimensions=new Array(){Math.sqrt(value.length), Math.sqrt(value.length)}]
         * @returns {WebCLGLBuffer}
         */
        value: function setArg(argument, fnvalue, splits, overrideDimensions) {
            var buff = this.gpufG.setArg(argument, fnvalue(), splits, overrideDimensions);
            this.args[argument] = { "fnvalue": fnvalue,
                "updatable": null,
                "splits": splits,
                "overrideDimensions": overrideDimensions };

            return buff;
        }
    }, {
        key: "getComponentBufferArg",


        /**
         * getComponentBufferArg
         * @param {String} argument Argument to set
         * @param {Component|Component_GPU} comp_gpu
         */
        value: function getComponentBufferArg(argument, comp_gpu) {
            this.gpufG.getGPUForArg(argument, comp_gpu.gpufG);
            this.args[argument] = { "fnvalue": null,
                "updatable": null,
                "splits": null,
                "overrideDimensions": null };
        }
    }, {
        key: "getArgs",


        /**
         * getArgs
         * @returns {Object}
         */
        value: function getArgs() {
            return this.args;
        }
    }, {
        key: "getAllArgs",


        /**
         * getAllArgs
         * @returns {Object}
         */
        value: function getAllArgs() {
            return this.gpufG.getAllArgs();
        }
    }, {
        key: "getBuffers",


        /**
         * getBuffers
         * @returns {{}|Array<WebCLGLBuffer>}
         */
        value: function getBuffers() {
            return this.gpufG._argsValues;
        }
    }, {
        key: "setArgUpdatable",


        /**
         * @param {String} argument Argument to set
         * @param {boolean} value
         */
        value: function setArgUpdatable(argument, value) {
            this.args[argument].updatable = value;
        }
    }, {
        key: "tickArguments",


        /**
         * tickArguments
         */
        value: function tickArguments() {
            for (var key in this.args) {
                if (this.args[key].updatable === true) {
                    var arg = this.args[key];
                    this.gpufG.setArg(key, arg.fnvalue(), arg.splits, arg.overrideDimensions);
                }
            }
        }
    }]);

    return Component_GPU;
}(_Component2.Component);

global.Component_GPU = Component_GPU;
module.exports.Component_GPU = Component_GPU;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":4,"webclgl":1}],4:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Constants = exports.Constants = {
	"EVENT_TYPES": {
		"KEY_DOWN": 0,
		"KEY_UP": 1,
		"MOUSE_DOWN": 2,
		"MOUSE_UP": 3,
		"MOUSE_MOVE": 4,
		"MOUSE_WHEEL": 5
	},
	"COMPONENT_TYPES": {
		"KEYBOARD_EVENTS": 0,
		"MOUSE_EVENTS": 1,
		"TRANSFORM": 2,
		"TRANSFORM_TARGET": 3,
		"CONTROLLER_TRANSFORM_TARGET": 4,
		"PROJECTION": 5,
		"GPU": 6
	},
	"PROJECTION_TYPES": {
		"PERSPECTIVE": 0,
		"ORTHO": 1
	},
	"VIEW_TYPES": {
		"LEFT": 0,
		"RIGHT": 1,
		"FRONT": 2,
		"BACK": 3,
		"TOP": 4,
		"BOTTOM": 5
	},
	"BLENDING_MODES": {
		"ZERO": "ZERO",
		"ONE": "ONE",
		"SRC_COLOR": "SRC_COLOR",
		"ONE_MINUS_SRC_COLOR": "ONE_MINUS_SRC_COLOR",
		"DST_COLOR": "DST_COLOR",
		"ONE_MINUS_DST_COLOR": "ONE_MINUS_DST_COLOR",
		"SRC_ALPHA": "SRC_ALPHA",
		"ONE_MINUS_SRC_ALPHA": "ONE_MINUS_SRC_ALPHA",
		"DST_ALPHA": "DST_ALPHA",
		"ONE_MINUS_DST_ALPHA": "ONE_MINUS_DST_ALPHA",
		"SRC_ALPHA_SATURATE": "SRC_ALPHA_SATURATE",
		"CONSTANT_COLOR": "CONSTANT_COLOR",
		"ONE_MINUS_CONSTANT_COLOR": "ONE_MINUS_CONSTANT_COLOR",
		"CONSTANT_ALPHA": "CONSTANT_ALPHA",
		"ONE_MINUS_CONSTANT_ALPHA": "ONE_MINUS_CONSTANT_ALPHA"
	},
	"BLENDING_EQUATION_TYPES": {
		"FUNC_ADD": "FUNC_ADD",
		"FUNC_SUBTRACT": "FUNC_SUBTRACT",
		"FUNC_REVERSE_SUBTRACT": "FUNC_REVERSE_SUBTRACT"
	},
	"DRAW_MODES": {
		"POINTS": 0,
		"LINES": 1,
		"LINE_LOOP": 2,
		"LINE_STRIP": 3,
		"TRIANGLES": 4,
		"TRIANGLE_STRIP": 5,
		"TRIANGLE_FAN": 6
	}
};
global.Constants = Constants;
module.exports.Constants = Constants;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[3]);
