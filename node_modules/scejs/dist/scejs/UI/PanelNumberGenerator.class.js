(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var ActionHelpers = exports.ActionHelpers = function () {
	function ActionHelpers() {
		_classCallCheck(this, ActionHelpers);

		this.firstColumWidth = "40%";
		this.secondColumWidth = "60%";
	}

	/**
  * appendStringChild
  * @param {String} str
  * @param {HTMLElement} target
  * @param {String} [location="end"] end or init
  */


	_createClass(ActionHelpers, [{
		key: "add_btn",


		/**
   * add_btn
   * @param {HTMLElement} target
   * @param {String} name
   * @param {Function} onClickCallback
   */
		value: function add_btn(target, name, onClickCallback) {
			var str = '' + '<div>' + "<button id='BUTTONID_" + name + "' style='width:100%'>" + name + "</button>" + '</div>';
			this.constructor.appendStringChild(str, target);

			var e = document.getElementById("BUTTONID_" + name);
			e.addEventListener('click', function (callback, e) {
				callback(e);
			}.bind(this, onClickCallback, e));
		}
	}, {
		key: "add_valuesAndBtn",


		/**
   * @callback ActionHelpers~add_valuesAndBtn~onClickCallback
   * @param {Array<number>} arr
   */
		/**
   * add_valuesAndBtn
   * @param {HTMLElement} target
   * @param {String} name
   * @param {String} type Type for the input (number, text, etc..)
   * @param {Array<String>} arrayTexts
   * @param {Array<String|number|int>} arrayDefaultValues
   * @param {ActionHelpers~add_valuesAndBtn~onClickCallback} onClickCallback
   */
		value: function add_valuesAndBtn(target, name, type, arrayTexts, arrayDefaultValues, onClickCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';vertical-align:top;overflow:hidden;">' + "<button id='BUTTONID_" + name + "' style='width:100%'>" + name + "</button>" + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">';
			for (var n = 0; n < arrayTexts.length; n++) {
				str += '<input type="' + type + '" id="INPUTID_' + name + '_' + arrayTexts[n] + '" step="' + arrayDefaultValues[n] / 20 + '" value="' + arrayDefaultValues[n] + '" title="' + arrayTexts[n] + '" style="width:' + (100 / arrayTexts.length - 1) + '%"/>';
			}
			str += "</div>" + '</div>';
			this.constructor.appendStringChild(str, target);

			var e = document.getElementById("BUTTONID_" + name);
			e.addEventListener('click', function (callback) {
				var arrayValues = [];
				for (var _n = 0; _n < arrayTexts.length; _n++) {
					arrayValues.push(document.querySelector('#INPUTID_' + name + '_' + arrayTexts[_n]).innerHTML);
				}
				callback(arrayValues);
			}.bind(this, onClickCallback));
		}
	}, {
		key: "add_checkbox",


		/**
   * add_checkbox
   * @param {HTMLElement} target
   * @param {String} name
   * @param {int|boolean} variable
   * @param {Function} checkCallback
   * @param {Function} uncheckCallback
   */
		value: function add_checkbox(target, name, variable, checkCallback, uncheckCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';vertical-align:top;overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + '<input type="checkbox" id="INPUTID_' + name + '" />' + '</div>' + '</div>';
			this.constructor.appendStringChild(str, target);

			var e = document.getElementById("INPUTID_" + name);
			e.checked = variable === true || variable === 1;

			e.addEventListener("click", function (checkCall, uncheckCall, e) {
				if (e.checked === false) {
					uncheckCall();
				} else {
					checkCall();
				}
			}.bind(this, checkCallback, uncheckCallback, e));
		}
	}, {
		key: "add_select",


		/**
   * add_select
   * @param {HTMLElement} target
   * @param {String} name
   * @param {Array<String>} valuesArray
   * @param {String} variable
   * @param {Function} selectCallback
   */
		value: function add_select(target, name, valuesArray, variable, selectCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';vertical-align:top;overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + '<select id="SELECTID_' + name + '" style="width:100%">';
			for (var n = 0; n < valuesArray.length; n++) {
				var isSelected = "";
				if (variable === valuesArray[n]) isSelected = "selected='selected'";

				str += "<option value='" + valuesArray[n] + "' " + isSelected + ">" + valuesArray[n] + "</option>";
			}
			str += '</select>' + '</div>' + '</div>';
			this.constructor.appendStringChild(str, target);

			var e = document.getElementById("SELECTID_" + name);
			e.addEventListener("change", function (callback, e) {
				callback(e.options[e.selectedIndex].value);
			}.bind(this, selectCallback, e));
		}
	}, {
		key: "add_slider",


		/**
   * add_slider
   * @param {HTMLElement} target
   * @param {String} name
   * @param {number} fvalue
   * @param {number} min
   * @param {number} max
   * @param {number} steps
   * @param {Function} onChangeCallback
   */
		value: function add_slider(target, name, fvalue, min, max, steps, onChangeCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';vertical-align:top;overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + '<input id="INPUTID_' + name + 'X" type="number" 		min="' + min + '" max="' + max + '" step="' + steps + '" value="' + fvalue + '" style="vertical-align:middle;width:20%">' + '<input id="INPUTID_' + name + 'X_slider" type="range" 	min="' + min + '" max="' + max + '" step="' + steps + '" value="' + fvalue + '" style="vertical-align:middle;width:78%">' + '</div>' + '</div>';
			this.constructor.appendStringChild(str, target);

			var exec_call = function exec_call(callback, e) {
				var value = document.getElementById("INPUTID_" + name + "X").value;
				callback(parseFloat(value));
			};

			// spinners
			var set_spinner = function set_spinner(callback, e) {
				e.nextSibling.value = parseFloat(e.value).toFixed(3);

				exec_call(callback, e);
			};

			var e = document.getElementById("INPUTID_" + name + "X");
			e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("click", set_spinner.bind(this, onChangeCallback, e));

			// range elements
			var set_range = function set_range(callback, e) {
				e.previousSibling.value = parseFloat(e.value).toFixed(3);

				exec_call(callback, e);
			};

			e = document.getElementById("INPUTID_" + name + "X_slider");
			e.addEventListener("input", set_range.bind(this, onChangeCallback, e));
		}
	}, {
		key: "add_3dslider",


		/**
   * add_3dslider
   * @param {HTMLElement} target
   * @param {String} name
   * @param {Array<number>} array3f Three float values
   * @param {number} min
   * @param {number} max
   * @param {number} steps
   * @param {Function} onChangeCallback
   */
		value: function add_3dslider(target, name, array3f, min, max, steps, onChangeCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';vertical-align:top;overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + '<input id="INPUTID_' + name + 'X" type="number" 		min="' + min + '" max="' + max + '" step="' + steps + '" value="' + array3f[0] + '" style="background:red;color:#FFF;vertical-align:middle;width:20%">' + '<input id="INPUTID_' + name + 'X_slider" type="range" 	min="' + min + '" max="' + max + '" step="' + steps + '" value="' + array3f[0] + '" style="background:red;color:#FFF;vertical-align:middle;width:78%">' + '<input id="INPUTID_' + name + 'Y" type="number" 		min="' + min + '" max="' + max + '" step="' + steps + '" value="' + array3f[1] + '" style="background:green;color:#FFF;vertical-align:middle;width:20%">' + '<input id="INPUTID_' + name + 'Y_slider" type="range" 	min="' + min + '" max="' + max + '" step="' + steps + '" value="' + array3f[1] + '" style="background:green;color:#FFF;vertical-align:middle;width:78%">' + '<input id="INPUTID_' + name + 'Z" type="number" 		min="' + min + '" max="' + max + '" step="' + steps + '" value="' + array3f[2] + '" style="background:blue;color:#FFF;vertical-align:middle;width:20%">' + '<input id="INPUTID_' + name + 'Z_slider" type="range" 	min="' + min + '" max="' + max + '" step="' + steps + '" value="' + array3f[2] + '" style="background:blue;color:#FFF;vertical-align:middle;width:78%">' + '</div>' + '</div>';
			this.constructor.appendStringChild(str, target);

			var exec_call = function exec_call(callback, e) {
				var vector = [parseFloat(document.getElementById("INPUTID_" + name + "X").value), parseFloat(document.getElementById("INPUTID_" + name + "Y").value), parseFloat(document.getElementById("INPUTID_" + name + "Z").value)];
				callback(vector);
			};

			// spinners
			var set_spinner = function set_spinner(callback, e) {
				e.nextSibling.value = parseFloat(e.value).toFixed(3);

				exec_call(callback, e);
			};

			var e = document.getElementById("INPUTID_" + name + "X");
			e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("click", set_spinner.bind(this, onChangeCallback, e));

			e = document.getElementById("INPUTID_" + name + "Y");
			e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));

			e = document.getElementById("INPUTID_" + name + "Z");
			e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
			e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));

			// range elements
			var set_range = function set_range(callback, e) {
				e.previousSibling.value = parseFloat(e.value).toFixed(3);

				exec_call(callback, e);
			};

			e = document.getElementById("INPUTID_" + name + "X_slider");
			e.addEventListener("change", set_range.bind(this, onChangeCallback, e));

			e = document.getElementById("INPUTID_" + name + "Y_slider");
			e.addEventListener("change", set_range.bind(this, onChangeCallback, e));

			e = document.getElementById("INPUTID_" + name + "Z_slider");
			e.addEventListener("change", set_range.bind(this, onChangeCallback, e));
		}
	}, {
		key: "add_colorpicker",


		/**
   * add_colorpicker
   * @param {HTMLElement} target
   * @param {String} name
   * @param {String} hexVariable
   * @param {Function} onChangeCallback
   */
		value: function add_colorpicker(target, name, hexVariable, onChangeCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + '<input type="color" id="INPUTID_' + name + '" value="' + hexVariable + '" style="width:100%">' + '</div>' + '</div>';
			this.constructor.appendStringChild(str, target);

			var e = document.getElementById("INPUTID_" + name);
			e.addEventListener("change", function (callback, e) {
				callback(e.value);
			}.bind(this, onChangeCallback, e));
		}
	}, {
		key: "add_imageSelection",


		/**
   * @callback ActionHelpers~add_imageSelection~onChangeCallback
   * @param {HTMLImageElement} img
   */
		/**
   * add_imageSelection
   * @param {HTMLElement} target
   * @param {String} name
   * @param {ActionHelpers~add_imageSelection~onChangeCallback} onChangeCallback
   */
		value: function add_imageSelection(target, name, onChangeCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + "<input id='INPUTID_" + name + "' type='file' style='display:none'/>" + "<div id='DIVID_" + name + "' onclick='$(this).prev().click();' style='cursor:pointer;width:16px;height:16px;border:1px solid #FFF'></div>" + "</div>" + '</div>';
			this.constructor.appendStringChild(str, target);

			document.getElementById('INPUTID_' + name).onchange = function () {
				var filereader = new FileReader();
				filereader.onload = function (event) {
					var img = new Image();
					img.onload = function () {
						var splitName = document.querySelector('#INPUTID_' + name).val().split('/');
						splitName = splitName[splitName.length - 1];
						//img.style.width = '16px';
						//img.style.height = '16px';
						document.querySelector('#DIVID_' + name).appendChild(img);
						document.querySelector('#DIVID_' + name).setAttribute('title', splitName);

						onChangeCallback(img);
					};
					img.src = event.target.result; // Set src from upload, original byte sequence
				};
				filereader.readAsDataURL(this.files[0]);
			};
		}
	}, {
		key: "add_fileSelection",


		/**
   * @callback ActionHelpers~add_fileSelection~onChangeCallback
   * @param {File} file
   */
		/**
   * add_fileSelection
   * @param {HTMLElement} target
   * @param {String} name
   * @param {ActionHelpers~add_fileSelection~onChangeCallback} onChangeCallback
   */
		value: function add_fileSelection(target, name, onChangeCallback) {
			var str = '' + '<div>' + '<div style="display:inline-block;width:' + this.firstColumWidth + ';overflow:hidden;">' + name + '</div>' + '<div style="display:inline-block;width:' + this.secondColumWidth + ';">' + "<input id='INPUTID_" + name + "' type='file' style='display:none'/>" + "<div id='DIVID_" + name + "' onclick='$(this).prev().click();' style='cursor:pointer;width:16px;height:16px;border:1px solid #FFF'></div>" + "</div>" + '</div>';
			this.constructor.appendStringChild(str, target);

			document.getElementById('INPUTID_' + name).onchange = function () {
				onChangeCallback(this.files[0]);
			};
		}
	}], [{
		key: "appendStringChild",
		value: function appendStringChild(str, target, location) {
			var loc = location !== undefined && location !== null ? location : "end";
			var parser = new DOMParser();
			var e = parser.parseFromString(str, "text/html");

			if (loc === "end") target.appendChild(e.body.firstChild);else target.insertBefore(e.body.firstChild, target.firstChild);
		}
	}]);

	return ActionHelpers;
}();

global.ActionHelpers = ActionHelpers;
module.exports.ActionHelpers = ActionHelpers;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PanelNumberGenerator = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ActionHelpers = require("./ActionHelpers.class");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var PanelNumberGenerator = exports.PanelNumberGenerator = function () {
	function PanelNumberGenerator() {
		_classCallCheck(this, PanelNumberGenerator);

		this.panel = new StormPanel({ "id": 'DIVID_PanelNumberGenerator',
			"paneltitle": 'NUMBER GENERATOR' });

		this.ah = new _ActionHelpers.ActionHelpers();
	}

	_createClass(PanelNumberGenerator, [{
		key: "show",
		value: function show() {
			this.panel.show();

			this.showListObjects();
		}
	}, {
		key: "showListObjects",
		value: function showListObjects() {
			var eContent = document.getElementById('DIVID_PanelNumberGenerator_content');
			eContent.innerHTML = "";

			this.ah.add_imageSelection(eContent, "LOAD_IMG", function (img) {
				eContent.appendChild(img);
				eContent.innerHTML += img.width + "x" + img.height + "=" + img.width * img.height;

				img.setAttribute("draggable", true);
				img.addEventListener('dragstart', function (evt) {
					evt.dataTransfer.effectAllowed = 'move';
					evt.dataTransfer.setData("text/plain", img.src);
				}, false);
			});

			var getArr = function (arr, elementItems) {
				var arrayOut = [];
				var itemValues = [];

				var length = arr[0];
				for (var n = 1; n < arr[1]; n++) {
					length *= arr[0];
				}var repeat = arr[2];

				for (var _n = 0; _n < length * arr[2]; _n++) {
					if (repeat === arr[2]) {
						repeat = 0;
						itemValues = [];

						for (var i = 0; i < elementItems; i++) {
							itemValues.push(1.0 - Math.random() * 2.0);
						}
					}
					for (var _i = 0; _i < elementItems; _i++) {
						arrayOut.push(itemValues[_i]);
					}repeat++;
				}

				var btn = document.createElement("button");
				btn.innerHTML = "arr";
				btn.setAttribute("draggable", true);
				eContent.appendChild(btn);

				btn.addEventListener('dragstart', function (arrayOut, evt) {
					console.log(arrayOut);
					evt.dataTransfer.effectAllowed = 'move';
					evt.dataTransfer.setData("text/plain", arrayOut);
				}.bind(this, arrayOut), false);
			}.bind(this);

			this.ah.add_valuesAndBtn(eContent, "CREATE_RANDOM_FLOAT", "number", ["length", "dimensions", "repeat_FLOAT"], [128, 2, 14], function (arr) {
				getArr(arr, 1);
			}.bind(this));

			this.ah.add_valuesAndBtn(eContent, "CREATE_RANDOM_FLOAT4", "number", ["length", "dimensions", "repeat_FLOAT4"], [128, 2, 14], function (arr) {
				getArr(arr, 4);
			}.bind(this));
		}
	}]);

	return PanelNumberGenerator;
}();

global.PanelNumberGenerator = PanelNumberGenerator;
module.exports.PanelNumberGenerator = PanelNumberGenerator;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./ActionHelpers.class":1}]},{},[2]);
