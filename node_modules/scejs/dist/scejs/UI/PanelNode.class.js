(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Constants = exports.Constants = {
	"EVENT_TYPES": {
		"KEY_DOWN": 0,
		"KEY_UP": 1,
		"MOUSE_DOWN": 2,
		"MOUSE_UP": 3,
		"MOUSE_MOVE": 4,
		"MOUSE_WHEEL": 5
	},
	"COMPONENT_TYPES": {
		"KEYBOARD_EVENTS": 0,
		"MOUSE_EVENTS": 1,
		"TRANSFORM": 2,
		"TRANSFORM_TARGET": 3,
		"CONTROLLER_TRANSFORM_TARGET": 4,
		"PROJECTION": 5,
		"GPU": 6
	},
	"PROJECTION_TYPES": {
		"PERSPECTIVE": 0,
		"ORTHO": 1
	},
	"VIEW_TYPES": {
		"LEFT": 0,
		"RIGHT": 1,
		"FRONT": 2,
		"BACK": 3,
		"TOP": 4,
		"BOTTOM": 5
	},
	"BLENDING_MODES": {
		"ZERO": "ZERO",
		"ONE": "ONE",
		"SRC_COLOR": "SRC_COLOR",
		"ONE_MINUS_SRC_COLOR": "ONE_MINUS_SRC_COLOR",
		"DST_COLOR": "DST_COLOR",
		"ONE_MINUS_DST_COLOR": "ONE_MINUS_DST_COLOR",
		"SRC_ALPHA": "SRC_ALPHA",
		"ONE_MINUS_SRC_ALPHA": "ONE_MINUS_SRC_ALPHA",
		"DST_ALPHA": "DST_ALPHA",
		"ONE_MINUS_DST_ALPHA": "ONE_MINUS_DST_ALPHA",
		"SRC_ALPHA_SATURATE": "SRC_ALPHA_SATURATE",
		"CONSTANT_COLOR": "CONSTANT_COLOR",
		"ONE_MINUS_CONSTANT_COLOR": "ONE_MINUS_CONSTANT_COLOR",
		"CONSTANT_ALPHA": "CONSTANT_ALPHA",
		"ONE_MINUS_CONSTANT_ALPHA": "ONE_MINUS_CONSTANT_ALPHA"
	},
	"BLENDING_EQUATION_TYPES": {
		"FUNC_ADD": "FUNC_ADD",
		"FUNC_SUBTRACT": "FUNC_SUBTRACT",
		"FUNC_REVERSE_SUBTRACT": "FUNC_REVERSE_SUBTRACT"
	},
	"DRAW_MODES": {
		"POINTS": 0,
		"LINES": 1,
		"LINE_LOOP": 2,
		"LINE_STRIP": 3,
		"TRIANGLES": 4,
		"TRIANGLE_STRIP": 5,
		"TRIANGLE_FAN": 6
	}
};
global.Constants = Constants;
module.exports.Constants = Constants;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PanelNode = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Constants = require('../Constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var PanelNode = exports.PanelNode = function () {
	function PanelNode() {
		_classCallCheck(this, PanelNode);

		this.html = '<span style="font-weight:bold" id="DIVID_StormEditNode_name"></span>' + '<div id="DIVID_StormEditNode_edits"></div>';
		this.panel = new StormPanel({ "id": 'DIVID_StormPanelEditNode',
			"paneltitle": 'NODE',
			"html": this.html });
	}

	/**
  * show
 * @param {Node} selectedNode
 */


	_createClass(PanelNode, [{
		key: 'show',
		value: function show(selectedNode) {
			this.panel.show();

			PanelNode.updateNearNode(selectedNode);
		}
	}], [{
		key: 'updateNearNode',


		/**
  * updateNearNode
  * @param {Node} selectedNode
  * @private
  */
		value: function updateNearNode(selectedNode) {
			var elEdits = $('#DIVID_StormEditNode_edits');
			if (selectedNode === undefined || selectedNode === null) {
				$('#DIVID_StormEditNode_name').html("");
				elEdits.html('');
			} else {
				if (selectedNode.getName() !== "") $('#DIVID_StormEditNode_name').html(selectedNode.getName());
				elEdits.html('');

				for (var compTypeKey in _Constants.Constants.COMPONENT_TYPES) {
					for (var nodeCompKey in selectedNode.getComponents()) {
						if (nodeCompKey === _Constants.Constants.COMPONENT_TYPES[compTypeKey]) {
							var str = "<div id='DIVID_component_" + compTypeKey + "' class='component StormShadow02 StormRound'>" + compTypeKey + "</div>";
							elEdits.append(str);

							if (nodeCompKey === _Constants.Constants.COMPONENT_TYPES.GPU) {
								new UIComponentGPU(compTypeKey, selectedNode);
							} else if (nodeCompKey === _Constants.Constants.COMPONENT_TYPES.PROJECTION) {}
						}
					}
				}
			}
		}
	}]);

	return PanelNode;
}();

global.PanelNode = PanelNode;
module.exports.PanelNode = PanelNode;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Constants":1}]},{},[2]);
