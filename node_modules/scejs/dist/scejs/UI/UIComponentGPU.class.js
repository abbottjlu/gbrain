(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Constants = exports.Constants = {
	"EVENT_TYPES": {
		"KEY_DOWN": 0,
		"KEY_UP": 1,
		"MOUSE_DOWN": 2,
		"MOUSE_UP": 3,
		"MOUSE_MOVE": 4,
		"MOUSE_WHEEL": 5
	},
	"COMPONENT_TYPES": {
		"KEYBOARD_EVENTS": 0,
		"MOUSE_EVENTS": 1,
		"TRANSFORM": 2,
		"TRANSFORM_TARGET": 3,
		"CONTROLLER_TRANSFORM_TARGET": 4,
		"PROJECTION": 5,
		"GPU": 6
	},
	"PROJECTION_TYPES": {
		"PERSPECTIVE": 0,
		"ORTHO": 1
	},
	"VIEW_TYPES": {
		"LEFT": 0,
		"RIGHT": 1,
		"FRONT": 2,
		"BACK": 3,
		"TOP": 4,
		"BOTTOM": 5
	},
	"BLENDING_MODES": {
		"ZERO": "ZERO",
		"ONE": "ONE",
		"SRC_COLOR": "SRC_COLOR",
		"ONE_MINUS_SRC_COLOR": "ONE_MINUS_SRC_COLOR",
		"DST_COLOR": "DST_COLOR",
		"ONE_MINUS_DST_COLOR": "ONE_MINUS_DST_COLOR",
		"SRC_ALPHA": "SRC_ALPHA",
		"ONE_MINUS_SRC_ALPHA": "ONE_MINUS_SRC_ALPHA",
		"DST_ALPHA": "DST_ALPHA",
		"ONE_MINUS_DST_ALPHA": "ONE_MINUS_DST_ALPHA",
		"SRC_ALPHA_SATURATE": "SRC_ALPHA_SATURATE",
		"CONSTANT_COLOR": "CONSTANT_COLOR",
		"ONE_MINUS_CONSTANT_COLOR": "ONE_MINUS_CONSTANT_COLOR",
		"CONSTANT_ALPHA": "CONSTANT_ALPHA",
		"ONE_MINUS_CONSTANT_ALPHA": "ONE_MINUS_CONSTANT_ALPHA"
	},
	"BLENDING_EQUATION_TYPES": {
		"FUNC_ADD": "FUNC_ADD",
		"FUNC_SUBTRACT": "FUNC_SUBTRACT",
		"FUNC_REVERSE_SUBTRACT": "FUNC_REVERSE_SUBTRACT"
	},
	"DRAW_MODES": {
		"POINTS": 0,
		"LINES": 1,
		"LINE_LOOP": 2,
		"LINE_STRIP": 3,
		"TRIANGLES": 4,
		"TRIANGLE_STRIP": 5,
		"TRIANGLE_FAN": 6
	}
};
global.Constants = Constants;
module.exports.Constants = Constants;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UIComponentGPU = undefined;

var _UIComponentGPU_Indices = require("./UIComponentGPU_Indices.class");

var _UIComponentGPU_Argument = require("./UIComponentGPU_Argument.class");

var _UIComponentGPU_Kernel = require("./UIComponentGPU_Kernel.class");

var _UIComponentGPU_Vfp = require("./UIComponentGPU_Vfp.class");

var _Constants = require("../Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var UIComponentGPU = exports.UIComponentGPU = function UIComponentGPU(compTypeKey, selectedNode) {
    _classCallCheck(this, UIComponentGPU);

    this.ah = new ActionHelpers();

    this.comp = selectedNode.getComponent(_Constants.Constants.COMPONENT_TYPES.GPU);

    var args = this.comp.getAllArgs();

    var str = "" + "<div id='DIVID_" + compTypeKey + "' class='component_section'>" + "<div id='DIVID_" + compTypeKey + "_args' style='width:300px;display:inline-block;float:left;'></div>" + "<div id='DIVID_" + compTypeKey + "_kernelsvfps' style='display:inline-block;overflow-x:auto;'></div>" + "</div>";
    this.ah.appendStringChild(str, document.getElementById('DIVID_component_' + compTypeKey));

    // INDICES
    new _UIComponentGPU_Indices.UIComponentGPU_Indices(document.getElementById('DIVID_' + compTypeKey), selectedNode, this.comp, args);

    // ARGS
    new _UIComponentGPU_Argument.UIComponentGPU_Argument(document.getElementById('DIVID_' + compTypeKey + '_args'), selectedNode, this.comp, args);

    //KERNELS
    new _UIComponentGPU_Kernel.UIComponentGPU_Kernel(document.getElementById('DIVID_' + compTypeKey + '_kernelsvfps'), selectedNode, this.comp, args);

    // VFPS
    new _UIComponentGPU_Vfp.UIComponentGPU_Vfp(document.getElementById('DIVID_' + compTypeKey + '_kernelsvfps'), selectedNode, this.comp, args);
};

global.UIComponentGPU = UIComponentGPU;
module.exports.UIComponentGPU = UIComponentGPU;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Constants":1,"./UIComponentGPU_Argument.class":3,"./UIComponentGPU_Indices.class":4,"./UIComponentGPU_Kernel.class":5,"./UIComponentGPU_Vfp.class":6}],3:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var UIComponentGPU_Argument = exports.UIComponentGPU_Argument = function UIComponentGPU_Argument(targetElement, selectedNode, comp, args) {
    var _this = this;

    _classCallCheck(this, UIComponentGPU_Argument);

    var ah = new ActionHelpers();

    // ARGS
    var str = "<div id='" + targetElement.id + "_args' style='width:inherit;display:table-cell;vertical-align:top;'>" + "<div style='height:251px;'>" + "<div>ARGUMENTS</div>" + "</div>";

    var b = false;
    for (var argKey in args) {
        var arg = args[argKey];

        str += "<div id='DIVID_" + argKey + "_args' title='" + arg + "' style='background-color:" + (b === true ? "rgba(0,0,0,0.0)" : "rgba(0,0,0,0.07)") + "'>" + argKey + " <input type='checkbox' id='CHECKBOX_UPDATE_" + argKey + "' title='update on tick' style='width:8px;height:8px;margin:0;vertical-align:middle' />";

        if (arg !== undefined) {
            if (arg instanceof WebCLGLBuffer) {
                str += " <span style='color:rgb(150, 255, 150)'> {WebCLGLBuffer " + arg.length + "}</span>";
            } else if (arg instanceof Float32Array || arg instanceof Array) {
                str += " <span style='color:rgb(150, 255, 150)'> {" + arg.constructor.name + " " + arg.length + "}</span>"; // arg.value
            } else {
                str += " <span style='color:rgb(150, 255, 150)'> {<span>" + arg.constructor.name + " " + arg + "}</span>"; // arg.value
            }
        }

        str += "</div>";

        b = !b;
    }
    str += "</div>";
    ah.appendStringChild(str, targetElement);

    for (var _argKey in args) {
        var _arg = args[_argKey];

        if (comp.getArgs()[_argKey] !== undefined && comp.getArgs()[_argKey].updatable != null) {
            (function () {
                var e = document.getElementById("CHECKBOX_UPDATE_" + _argKey);
                e.checked = comp.getArgs()[_argKey].updatable === true;
                e.addEventListener("click", function (comp, argKey) {
                    if (e.checked === false) {
                        comp.setArgUpdatable(argKey, false);
                    } else {
                        comp.setArgUpdatable(argKey, true);
                    }
                }.bind(_this, comp, _argKey));
            })();
        }

        var e = document.getElementById("DIVID_" + _argKey + "_args");
        e.addEventListener('dragover', function (e, evt) {
            if (evt.preventDefault) evt.preventDefault(); // Necessary. Allows us to drop.

            evt.dataTransfer.dropEffect = 'move';
            e.style.background = "rgba(150, 255, 150, 0.3)";
        }.bind(this, e), false);

        e.addEventListener('dragleave', function (e, evt) {
            e.style.background = "transparent";
        }.bind(this, e), false);

        e.addEventListener('drop', function (e, comp, argKey, evt) {
            if (evt.stopPropagation) {
                evt.stopPropagation(); // Stops some browsers from redirecting.
                evt.preventDefault();
            }

            e.style.background = "transparent";

            var data = evt.dataTransfer.getData('text/plain');
            var type = data.match(/,/i) ? "array" : "image";
            if (type === "image") {
                var image = new Image();
                image.onload = function (comp, argKey, image) {
                    comp.setArg(argKey, function () {
                        return image;
                    }.bind(this));
                }.bind(this, comp, argKey, image);
                image.src = data;
            } else {
                comp.setArg(argKey, function () {
                    return data.split(",");
                }.bind(this));
            }

            //comp.setArg(argKey, (function(evt) {return evt.dataTransfer.getData('text/plain');}).bind(this, evt));
        }.bind(this, e, comp, _argKey), false);
    }
};

global.UIComponentGPU_Argument = UIComponentGPU_Argument;
module.exports.UIComponentGPU_Argument = UIComponentGPU_Argument;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var UIComponentGPU_Indices = exports.UIComponentGPU_Indices = function UIComponentGPU_Indices(targetElement, selectedNode, comp, args) {
    _classCallCheck(this, UIComponentGPU_Indices);

    var ah = new ActionHelpers();

    // INDICES
    var str = "<div id='" + targetElement.id + "_indices' style='background:rgba(0,0,0,0.5);padding-left:3px'>" + "<div>indices</div>";
    var indices = comp.getBuffers()["indices"];
    if (indices !== undefined) {
        if (indices instanceof WebCLGLBuffer) {
            var strItems = "<span title='" + indices.inData + "'>" + indices.length + "</span>";
            str += " <span style='color:grey'> {WebCLGLBuffer " + strItems + "}</span>";
        }
    }

    str += "</div>";
    ah.appendStringChild(str, targetElement);
};

global.UIComponentGPU_Indices = UIComponentGPU_Indices;
module.exports.UIComponentGPU_Indices = UIComponentGPU_Indices;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],5:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UIComponentGPU_Kernel = undefined;

var _Constants = require("../Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var UIComponentGPU_Kernel = exports.UIComponentGPU_Kernel = function UIComponentGPU_Kernel(targetElement, selectedNode, comp, args) {
    _classCallCheck(this, UIComponentGPU_Kernel);

    var ah = new ActionHelpers();

    //KERNELS
    for (var kernelKey in comp.gpufG.getAllKernels()) {
        var kernel = comp.gpufG.getAllKernels()[kernelKey];
        var idPrefix = kernel.name;

        // fragment programs
        var str = "<div id='" + targetElement.id + "_" + idPrefix + "_kernels' style='display:table-cell;vertical-align:top;min-width:100px;max-width:100px;border:1px solid #333;'>" + "<div style='height:250px;overflow-x:hidden;'>" + "<div><input type='checkbox' id='ENABLE_" + idPrefix + "' style='font-size:10px;'/> " + kernel.name + "</div>" + "<div>[" + (kernel.output[0] != null ? kernel.output : "SCREEN") + "]</div>" + "<div>DEPTH TEST: <input type='checkbox' id='ENABLE_DEPTHTEST_" + idPrefix + "' style='font-size:10px;'></div>" + "<div>BLEND: <input type='checkbox' id='ENABLE_BLEND_" + idPrefix + "' style='font-size:10px;'></div>" + "<div>BLENT EQUATION: <select id='BLEND_EQUATION_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var blendEquationKey in _Constants.Constants.BLENDING_EQUATION_TYPES) {
            str += "<option value='" + blendEquationKey + "'>" + blendEquationKey + "</option>";
        }str += "</select></div>" + "<div>BLEND SRC (Foreground): <select id='BLEND_source_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var blendModeKey in _Constants.Constants.BLENDING_MODES) {
            str += "<option value='" + blendModeKey + "'>" + blendModeKey + "</option>";
        }str += "</select></div>" + "<div>BLEND DST (Background): <select id='BLEND_destination_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var _blendModeKey in _Constants.Constants.BLENDING_MODES) {
            str += "<option value='" + _blendModeKey + "'>" + _blendModeKey + "</option>";
        }str += "</select></div>";
        str += "</div>";

        var b = false;
        for (var argKey in args) {
            var arg = args[argKey];

            var exists = false;
            for (var keyB in kernel.in_values) {
                if (argKey === keyB) {
                    exists = true;
                    var cc = b === true ? 1.0 : 0.9;
                    str += "<div style='height:11px;background:rgba(150,150,255," + cc + ");color:rgba(0,0,0,0);'>" + "<span style='border-right:1px solid grey;background-color:" + (arg !== undefined ? "white" : "black") + ";'>_</span>-";

                    break;
                }
            }
            if (exists === false) str += "<div style='height:11px;color:rgba(0,0,0,0);background-color:" + (b === true ? "rgba(0,0,0,0.0)" : "rgba(0,0,0,0.07)") + "'>-";

            var updat = "";
            for (var n = 0; n < kernel.output.length; n++) {
                if (argKey === kernel.output[n]) {
                    updat = "<div style='display:inline-block;color:black;'>UPDATE</div>";
                    break;
                }
            }

            str += updat + "</div>";

            b = !b;
        }
        str += "</div>";
        ah.appendStringChild(str, targetElement);

        var e = document.getElementById("ENABLE_" + idPrefix);
        e.checked = kernel.enabled === true;
        e.addEventListener("click", function (kernel, e) {
            kernel.enabled = e.checked === true;
        }.bind(this, kernel, e));

        e = document.getElementById("ENABLE_DEPTHTEST_" + idPrefix);
        e.checked = kernel.depthTest === true;
        e.addEventListener("click", function (kernel, e) {
            kernel.depthTest = e.checked === true;
        }.bind(this, kernel, e));

        e = document.getElementById("ENABLE_BLEND_" + idPrefix);
        e.checked = kernel.blend === true;
        e.addEventListener("click", function (kernel, e) {
            kernel.blend = e.checked === true;
        }.bind(this, kernel, e));

        e = document.getElementById("BLEND_EQUATION_" + idPrefix);
        for (var _n = 0; _n < e.options.length; _n++) {
            if (e.options[_n].value === kernel.blendEquation) {
                e.selectedIndex = _n;
                break;
            }
        }e.addEventListener("change", function (kernel, e) {
            kernel.blendEquation = e.options[e.selectedIndex].value;
        }.bind(this, kernel, e));

        e = document.getElementById("BLEND_source_" + idPrefix);
        for (var _n2 = 0; _n2 < e.options.length; _n2++) {
            if (e.options[_n2].value === kernel.blendSrcMode) {
                e.selectedIndex = _n2;
                break;
            }
        }e.addEventListener("change", function (kernel, e) {
            kernel.blendSrcMode = e.options[e.selectedIndex].value;
        }.bind(this, kernel, e));

        e = document.getElementById("BLEND_destination_" + idPrefix);
        for (var _n3 = 0; _n3 < e.options.length; _n3++) {
            if (e.options[_n3].value === kernel.blendDstMode) {
                e.selectedIndex = _n3;
                break;
            }
        }e.addEventListener("change", function (kernel, e) {
            kernel.blendDstMode = e.options[e.selectedIndex].value;
        }.bind(this, kernel, e));
    }
};

global.UIComponentGPU_Kernel = UIComponentGPU_Kernel;
module.exports.UIComponentGPU_Kernel = UIComponentGPU_Kernel;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Constants":1}],6:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UIComponentGPU_Vfp = undefined;

var _Constants = require("../Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var UIComponentGPU_Vfp = exports.UIComponentGPU_Vfp = function UIComponentGPU_Vfp(targetElement, selectedNode, comp, args) {
    var _this = this;

    _classCallCheck(this, UIComponentGPU_Vfp);

    var ah = new ActionHelpers();

    var b = null;

    // VFPS

    var _loop = function _loop(vfpKey) {
        var vfp = comp.gpufG.getAllVertexFragmentProgram()[vfpKey];
        var idPrefix = vfp.name;

        // vertex programs
        var str = "<div id='" + targetElement.id + "_" + idPrefix + "_vps' style='display:table-cell;vertical-align:top;min-width:100px;max-width:100px;border:1px solid #333;'>" + "<div style='height:250px;overflow-x:hidden;'>" + "<div><input type='checkbox' id='ENABLE_" + idPrefix + "' style='font-size:10px;'/> " + vfp.name + "</div>" + "<div>[" + (vfp.output[0] != null ? vfp.output : "SCREEN") + "]</div>" + "<div>drawMode: <select id='DRAW_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var drawModeKey in _Constants.Constants.DRAW_MODES) {
            str += "<option value='" + _Constants.Constants.DRAW_MODES[drawModeKey] + "'>" + drawModeKey + "</option>";
        }str += "</select></div>" + "<div>DEPTH TEST: <input type='checkbox' id='ENABLE_DEPTHTEST_" + idPrefix + "' style='font-size:10px;'></div>" + "<div>BLEND: <input type='checkbox' id='ENABLE_BLEND_" + idPrefix + "' style='font-size:10px;'></div>" + "<div>BLENT EQUATION: <select id='BLEND_EQUATION_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var blendEquationKey in _Constants.Constants.BLENDING_EQUATION_TYPES) {
            str += "<option value='" + blendEquationKey + "'>" + blendEquationKey + "</option>";
        }str += "</select></div>" + "<div>BLEND SRC (Foreground): <select id='BLEND_source_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var blendModeKey in _Constants.Constants.BLENDING_MODES) {
            str += "<option value='" + blendModeKey + "'>" + blendModeKey + "</option>";
        }str += "</select></div>" + "<div>BLEND DST (Background): <select id='BLEND_destination_" + idPrefix + "' style='font-size:10px;max-width:70px;'>";
        for (var _blendModeKey in _Constants.Constants.BLENDING_MODES) {
            str += "<option value='" + _blendModeKey + "'>" + _blendModeKey + "</option>";
        }str += "</select></div>";
        str += "</div>";

        b = false;
        for (var argKey in args) {
            var arg = args[argKey];

            var exists = false;
            for (var keyB in vfp.in_vertex_values) {
                if (argKey === keyB) {
                    exists = true;

                    str += "<div style='height:11px;background:rgba(255,150,150," + (b === true ? 1.0 : 0.9) + ");color:rgba(0,0,0,0);'>" + "<span style='border-right:1px solid grey;background-color:" + (arg !== undefined ? "white" : "black") + ";'>_</span>" + "<span style='color:blue;'>" + (vfp.in_vertex_values[keyB].type === "float4_fromSampler" || vfp.in_vertex_values[keyB].type === "float_fromSampler" ? "fromSampler" : "") + "</span>-";

                    break;
                }
            }
            if (exists === false) str += "<div style='height:11px;color:rgba(0,0,0,0);background-color:" + (b === true ? "rgba(0,0,0,0.0)" : "rgba(0,0,0,0.07)") + "'>-";

            str += "</div>";

            b = !b;
        }
        str += "</div>";
        ah.appendStringChild(str, targetElement);

        var e = document.getElementById("ENABLE_" + idPrefix);
        e.checked = vfp.enabled === true;
        e.addEventListener("click", function (vfp, e) {
            vfp.enabled = e.checked === true;
        }.bind(_this, vfp, e));

        e = document.getElementById("DRAW_" + idPrefix);
        for (var n = 0; n < e.options.length; n++) {
            if (e.options[n].value === vfp.drawMode) {
                e.selectedIndex = n;
                break;
            }
        }e.addEventListener("change", function (comp, idPrefix, e) {
            console.log(e.options[e.selectedIndex].value);
            vfp.drawMode = parseInt(e.options[e.selectedIndex].value);
        }.bind(_this, comp, idPrefix, e));

        e = document.getElementById("ENABLE_DEPTHTEST_" + idPrefix);
        e.checked = vfp.depthTest === true;
        e.addEventListener("click", function (vfp, e) {
            vfp.depthTest = e.checked === true;
        }.bind(_this, vfp, e));

        e = document.getElementById("ENABLE_BLEND_" + idPrefix);
        e.checked = vfp.blend === true;
        e.addEventListener("click", function (vfp, e) {
            vfp.blend = e.checked === true;
        }.bind(_this, vfp, e));

        e = document.getElementById("BLEND_EQUATION_" + idPrefix);
        for (var _n = 0; _n < e.options.length; _n++) {
            if (e.options[_n].value === vfp.blendEquation) {
                e.selectedIndex = _n;
                break;
            }
        }e.addEventListener("change", function (vfp, e) {
            vfp.blendEquation = e.options[e.selectedIndex].value;
        }.bind(_this, vfp, e));

        e = document.getElementById("BLEND_source_" + idPrefix);
        for (var _n2 = 0; _n2 < e.options.length; _n2++) {
            if (e.options[_n2].value === vfp.blendSrcMode) {
                e.selectedIndex = _n2;
                break;
            }
        }e.addEventListener("change", function (vfp, e) {
            vfp.blendSrcMode = e.options[e.selectedIndex].value;
        }.bind(_this, vfp, e));

        e = document.getElementById("BLEND_destination_" + idPrefix);
        for (var _n3 = 0; _n3 < e.options.length; _n3++) {
            if (e.options[_n3].value === vfp.blendDstMode) {
                e.selectedIndex = _n3;
                break;
            }
        }e.addEventListener("change", function (vfp, e) {
            vfp.blendDstMode = e.options[e.selectedIndex].value;
        }.bind(_this, vfp, e));

        // fragment programs
        str = "<div id='DIVID_" + idPrefix + "_fps' style='display:table-cell;vertical-align:top;min-width:50px;max-width:50px;border:1px solid #333;'>" + "<div style='height:250px;'>";
        str += "</div>";

        b = false;
        for (var _argKey in args) {
            var _arg = args[_argKey];

            var _exists = false;
            for (var _keyB in vfp.in_fragment_values) {
                if (_argKey === _keyB) {
                    _exists = true;

                    str += "<div style='height:11px;background:rgba(150,150,255," + (b === true ? 1.0 : 0.9) + ");color:rgba(0,0,0,0);'>" + "<span style='border-right:1px solid grey;background-color:" + (_arg !== undefined ? "white" : "black") + ";'>_</span>-";

                    break;
                }
            }
            if (_exists === false) str += "<div style='height:11px;color:rgba(0,0,0,0);background-color:" + (b === true ? "rgba(0,0,0,0.0)" : "rgba(0,0,0,0.07)") + "'>-";

            var updat = "";
            for (var _n4 = 0; _n4 < vfp.output.length; _n4++) {
                if (_argKey === vfp.output[_n4]) {
                    updat = "<div style='display:inline-block;color:black;'>UPDATE</div>";
                    break;
                }
            }

            str += updat + "</div>";

            b = !b;
        }
        str += "</div>";
        ah.appendStringChild(str, targetElement);
    };

    for (var vfpKey in comp.gpufG.getAllVertexFragmentProgram()) {
        _loop(vfpKey);
    }
};

global.UIComponentGPU_Vfp = UIComponentGPU_Vfp;
module.exports.UIComponentGPU_Vfp = UIComponentGPU_Vfp;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Constants":1}]},{},[2]);
