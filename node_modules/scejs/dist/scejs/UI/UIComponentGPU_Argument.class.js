(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var UIComponentGPU_Argument = exports.UIComponentGPU_Argument = function UIComponentGPU_Argument(targetElement, selectedNode, comp, args) {
    var _this = this;

    _classCallCheck(this, UIComponentGPU_Argument);

    var ah = new ActionHelpers();

    // ARGS
    var str = "<div id='" + targetElement.id + "_args' style='width:inherit;display:table-cell;vertical-align:top;'>" + "<div style='height:251px;'>" + "<div>ARGUMENTS</div>" + "</div>";

    var b = false;
    for (var argKey in args) {
        var arg = args[argKey];

        str += "<div id='DIVID_" + argKey + "_args' title='" + arg + "' style='background-color:" + (b === true ? "rgba(0,0,0,0.0)" : "rgba(0,0,0,0.07)") + "'>" + argKey + " <input type='checkbox' id='CHECKBOX_UPDATE_" + argKey + "' title='update on tick' style='width:8px;height:8px;margin:0;vertical-align:middle' />";

        if (arg !== undefined) {
            if (arg instanceof WebCLGLBuffer) {
                str += " <span style='color:rgb(150, 255, 150)'> {WebCLGLBuffer " + arg.length + "}</span>";
            } else if (arg instanceof Float32Array || arg instanceof Array) {
                str += " <span style='color:rgb(150, 255, 150)'> {" + arg.constructor.name + " " + arg.length + "}</span>"; // arg.value
            } else {
                str += " <span style='color:rgb(150, 255, 150)'> {<span>" + arg.constructor.name + " " + arg + "}</span>"; // arg.value
            }
        }

        str += "</div>";

        b = !b;
    }
    str += "</div>";
    ah.appendStringChild(str, targetElement);

    for (var _argKey in args) {
        var _arg = args[_argKey];

        if (comp.getArgs()[_argKey] !== undefined && comp.getArgs()[_argKey].updatable != null) {
            (function () {
                var e = document.getElementById("CHECKBOX_UPDATE_" + _argKey);
                e.checked = comp.getArgs()[_argKey].updatable === true;
                e.addEventListener("click", function (comp, argKey) {
                    if (e.checked === false) {
                        comp.setArgUpdatable(argKey, false);
                    } else {
                        comp.setArgUpdatable(argKey, true);
                    }
                }.bind(_this, comp, _argKey));
            })();
        }

        var e = document.getElementById("DIVID_" + _argKey + "_args");
        e.addEventListener('dragover', function (e, evt) {
            if (evt.preventDefault) evt.preventDefault(); // Necessary. Allows us to drop.

            evt.dataTransfer.dropEffect = 'move';
            e.style.background = "rgba(150, 255, 150, 0.3)";
        }.bind(this, e), false);

        e.addEventListener('dragleave', function (e, evt) {
            e.style.background = "transparent";
        }.bind(this, e), false);

        e.addEventListener('drop', function (e, comp, argKey, evt) {
            if (evt.stopPropagation) {
                evt.stopPropagation(); // Stops some browsers from redirecting.
                evt.preventDefault();
            }

            e.style.background = "transparent";

            var data = evt.dataTransfer.getData('text/plain');
            var type = data.match(/,/i) ? "array" : "image";
            if (type === "image") {
                var image = new Image();
                image.onload = function (comp, argKey, image) {
                    comp.setArg(argKey, function () {
                        return image;
                    }.bind(this));
                }.bind(this, comp, argKey, image);
                image.src = data;
            } else {
                comp.setArg(argKey, function () {
                    return data.split(",");
                }.bind(this));
            }

            //comp.setArg(argKey, (function(evt) {return evt.dataTransfer.getData('text/plain');}).bind(this, evt));
        }.bind(this, e, comp, _argKey), false);
    }
};

global.UIComponentGPU_Argument = UIComponentGPU_Argument;
module.exports.UIComponentGPU_Argument = UIComponentGPU_Argument;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1]);
