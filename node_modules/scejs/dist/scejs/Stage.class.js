(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Constants = exports.Constants = {
	"EVENT_TYPES": {
		"KEY_DOWN": 0,
		"KEY_UP": 1,
		"MOUSE_DOWN": 2,
		"MOUSE_UP": 3,
		"MOUSE_MOVE": 4,
		"MOUSE_WHEEL": 5
	},
	"COMPONENT_TYPES": {
		"KEYBOARD_EVENTS": 0,
		"MOUSE_EVENTS": 1,
		"TRANSFORM": 2,
		"TRANSFORM_TARGET": 3,
		"CONTROLLER_TRANSFORM_TARGET": 4,
		"PROJECTION": 5,
		"GPU": 6
	},
	"PROJECTION_TYPES": {
		"PERSPECTIVE": 0,
		"ORTHO": 1
	},
	"VIEW_TYPES": {
		"LEFT": 0,
		"RIGHT": 1,
		"FRONT": 2,
		"BACK": 3,
		"TOP": 4,
		"BOTTOM": 5
	},
	"BLENDING_MODES": {
		"ZERO": "ZERO",
		"ONE": "ONE",
		"SRC_COLOR": "SRC_COLOR",
		"ONE_MINUS_SRC_COLOR": "ONE_MINUS_SRC_COLOR",
		"DST_COLOR": "DST_COLOR",
		"ONE_MINUS_DST_COLOR": "ONE_MINUS_DST_COLOR",
		"SRC_ALPHA": "SRC_ALPHA",
		"ONE_MINUS_SRC_ALPHA": "ONE_MINUS_SRC_ALPHA",
		"DST_ALPHA": "DST_ALPHA",
		"ONE_MINUS_DST_ALPHA": "ONE_MINUS_DST_ALPHA",
		"SRC_ALPHA_SATURATE": "SRC_ALPHA_SATURATE",
		"CONSTANT_COLOR": "CONSTANT_COLOR",
		"ONE_MINUS_CONSTANT_COLOR": "ONE_MINUS_CONSTANT_COLOR",
		"CONSTANT_ALPHA": "CONSTANT_ALPHA",
		"ONE_MINUS_CONSTANT_ALPHA": "ONE_MINUS_CONSTANT_ALPHA"
	},
	"BLENDING_EQUATION_TYPES": {
		"FUNC_ADD": "FUNC_ADD",
		"FUNC_SUBTRACT": "FUNC_SUBTRACT",
		"FUNC_REVERSE_SUBTRACT": "FUNC_REVERSE_SUBTRACT"
	},
	"DRAW_MODES": {
		"POINTS": 0,
		"LINES": 1,
		"LINE_LOOP": 2,
		"LINE_STRIP": 3,
		"TRIANGLES": 4,
		"TRIANGLE_STRIP": 5,
		"TRIANGLE_FAN": 6
	}
};
global.Constants = Constants;
module.exports.Constants = Constants;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Stage = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var Stage = exports.Stage = function () {
	function Stage() {
		_classCallCheck(this, Stage);

		this.nodes = [];
		this.activeCamera = null;
		this.selectedNode = null;
		this.paused = false;
		this.backgroundColor = [0.0, 0.0, 0.0, 1.0];
		this.gl = null;
		this._ontick = null;
	}

	/**
  * setActiveCamera
  * @param {Node} node
  */


	_createClass(Stage, [{
		key: "setActiveCamera",
		value: function setActiveCamera(node) {
			this.activeCamera = node;
		}
	}, {
		key: "getActiveCamera",


		/**
   * getActiveCamera
   * @returns {Node}
   */
		value: function getActiveCamera() {
			return this.activeCamera;
		}
	}, {
		key: "setSelectedNode",


		/**
   * setSelectedNode
   * @param {Node} node
   */
		value: function setSelectedNode(node) {
			this.selectedNode = node;
		}
	}, {
		key: "getSelectedNode",


		/**
   * getSelectedNode
   * @returns {Node}
   */
		value: function getSelectedNode() {
			return this.selectedNode;
		}
	}, {
		key: "addNode",


		/**
  * addNode
  * @param {Node} node.
  */
		value: function addNode(node) {
			this.nodes.push(node);

			node.initialize(node.getName() != null ? node.getName() : "node " + (this.nodes.length - 1), this.gl);
		}
	}, {
		key: "removeNode",


		/**
  * removeNode
  * @param {Node} node.
  */
		value: function removeNode(node) {
			for (var n = 0; n < this.nodes.length; n++) {
				if (this.nodes[n] === node) {
					this.nodes.splice(n, 1);
					break;
				}
			}
		}
	}, {
		key: "getNodes",


		/**
  * getNodes
  * @returns {Array<Node>}
  */
		value: function getNodes() {
			return this.nodes;
		}
	}, {
		key: "render",


		/**
  * render
     * @param {Function} ontick
  */
		value: function render(ontick) {
			this._ontick = ontick;
			this.paused = false;
			this.setBackgroundColor(this.backgroundColor);
			this.tick();
		}
	}, {
		key: "pause",


		/**
  * pause
  */
		value: function pause() {
			this.paused = true;
		}
	}, {
		key: "setWebGLContext",


		/**
  * setWebGLContext
  * @param {WebGLRenderingContext} glCtx.
  * @private
  */
		value: function setWebGLContext(glCtx) {
			this.gl = glCtx;
		}
	}, {
		key: "setBackgroundColor",


		/**
  * setBackgroundColor
  * @param {Array<number>} color Float4.
  */
		value: function setBackgroundColor(color) {
			this.backgroundColor = color;
		}
	}, {
		key: "getBackgroundColor",


		/**
  * getBackgroundColor
  * @returns {Array<number>}
  */
		value: function getBackgroundColor() {
			return this.backgroundColor;
		}
	}, {
		key: "getWebGLContext",


		/**
  * getWebGLContext
  * @returns {WebGLRenderingContext} 
  */
		value: function getWebGLContext() {
			return this.gl;
		}
	}, {
		key: "tick",
		value: function tick() {
			if (this.activeCamera != null) {
				if (this._ontick !== undefined && this._ontick !== null) this._ontick();

				var resolution = this.activeCamera.getComponent(_Constants.Constants.COMPONENT_TYPES.PROJECTION).getResolution();
				this.gl.viewport(0, 0, resolution.width, resolution.height);

				this.gl.clearColor(this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]);
				this.gl.clearDepth(1.0);
				//this.gl.enable(this.gl.DEPTH_TEST);
				//this.gl.enable(this.gl.CULL_FACE);
				//this.gl.cullFace(this.gl.BACK);
				this.gl.depthFunc(this.gl.LEQUAL);

				var comp_camera_gpu = this.activeCamera.getComponent(_Constants.Constants.COMPONENT_TYPES.GPU);
				if (comp_camera_gpu !== undefined && comp_camera_gpu !== null) comp_camera_gpu.gpufG.fillArg("RGB", [this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]]);

				for (var n = 0, fn = this.nodes.length; n < fn; n++) {
					if (this.nodes[n] !== this.activeCamera) {
						for (var key in this.nodes[n].getComponents()) {
							var component = this.nodes[n].getComponent(key);

							if (component.tick != null) component.tick();
						}

						if (this.nodes[n].onTick != null) this.nodes[n].onTick();
					}
				}

				for (var _n = 0, _fn = this.nodes.length; _n < _fn; _n++) {
					if (this.nodes[_n] !== this.activeCamera) {
						for (var _key in this.nodes[_n].getComponents()) {
							var _component = this.nodes[_n].getComponent(_key);

							if (_component.gpufG != null) {
								for (var keyB in _component.gpufG.vertexFragmentPrograms) {
									var vfp = _component.gpufG.vertexFragmentPrograms[keyB];

									var ob = WebCLGLUtils.getOutputBuffers(vfp, _component.gpufG._argsValues);
									if (vfp.enabled === true && ob != null) {
										_component.gpufG._gl.bindFramebuffer(_component.gpufG._gl.FRAMEBUFFER, ob[0].fBuffer);
										_component.gpufG._gl.clear(_component.gpufG._gl.DEPTH_BUFFER_BIT);
										_component.gpufG._gl.bindFramebuffer(_component.gpufG._gl.FRAMEBUFFER, ob[0].fBufferTemp);
										_component.gpufG._gl.clear(_component.gpufG._gl.DEPTH_BUFFER_BIT);
									}
								}
							}
						}
					}
				}

				for (var _key2 in this.activeCamera.getComponents()) {
					var _component2 = this.activeCamera.getComponent(_key2);

					if (_component2.tick != null) _component2.tick();
				}
			}
		}
	}]);

	return Stage;
}();

global.Stage = Stage;
module.exports.Stage = Stage;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Constants":1}]},{},[2]);
