(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var Component = exports.Component = function () {
    function Component() {
        _classCallCheck(this, Component);

        this.type = null;
        this.node = null;
    }

    /**
     * initialize
     * @param {Node} nod
     * @param {WebGLRenderingContext} glCtx
     */


    _createClass(Component, [{
        key: "initialize",
        value: function initialize(nod, glCtx) {}

        /**
         * tick
         * @param {number} delta
         */

    }, {
        key: "tick",
        value: function tick(delta) {}
    }]);

    return Component;
}();

global.Component = Component;
module.exports.Component = Component;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ComponentControllerTransformTarget = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = require("./Component.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @class
* @constructor
* @param {Object} jsonIn
* @param {Node} jsonIn.node
*/
var ComponentControllerTransformTarget = exports.ComponentControllerTransformTarget = function (_Component) {
	_inherits(ComponentControllerTransformTarget, _Component);

	function ComponentControllerTransformTarget() {
		_classCallCheck(this, ComponentControllerTransformTarget);

		var _this = _possibleConstructorReturn(this, (ComponentControllerTransformTarget.__proto__ || Object.getPrototypeOf(ComponentControllerTransformTarget)).call(this));

		_this.type = _Constants.Constants.COMPONENT_TYPES.CONTROLLER_TRANSFORM_TARGET;
		_this.node = null;
		_this.gl = null;

		_this.comp_transformTarget = null;
		_this.comp_projection = null;

		_this._vel = 0.1;

		_this.forward = 0;
		_this.backwardE = 0;
		_this.leftE = 0;
		_this.rightE = 0;
		_this.frontE = 0;
		_this.backE = 0;

		_this.leftButton = 0;
		_this.middleButton = 0;
		_this.rightButton = 0;

		_this.leftButtonAction = "ORBIT";
		_this.middleButtonAction = "PAN";
		_this.rightButtonAction = "ZOOM";

		_this.lastX = 0;
		_this.lastY = 0;

		_this.lockRotX = false;
		_this.lockRotY = false;
		return _this;
	}

	/**
  * initialize
  * @param {Node} nod
  * @param {WebGLRenderingContext} glCtx.
  * @override
  */


	_createClass(ComponentControllerTransformTarget, [{
		key: "initialize",
		value: function initialize(nod, glCtx) {
			this.node = nod;
			this.gl = glCtx;

			this.comp_transformTarget = this.node.getComponent(_Constants.Constants.COMPONENT_TYPES.TRANSFORM_TARGET);
			this.comp_projection = this.node.getComponent(_Constants.Constants.COMPONENT_TYPES.PROJECTION);
		}
	}, {
		key: "setVelocity",


		/**
   * setVelocity
   * @param {number} velocity
   */
		value: function setVelocity(velocity) {
			this._vel = velocity;
		}
	}, {
		key: "lockRotX",


		/**
   * lockRotX
   */
		value: function lockRotX() {
			this.lockRotX = true;
		}
	}, {
		key: "unlockRotX",

		/**
   * unlockRotX
   */
		value: function unlockRotX() {
			this.lockRotX = false;
		}
	}, {
		key: "isLockRotX",

		/**
   * isLockRotX
   * @returns {Boolean}
   */
		value: function isLockRotX() {
			return this.lockRotX;
		}
	}, {
		key: "lockRotY",


		/**
   * lockRotY
   */
		value: function lockRotY() {
			this.lockRotY = true;
		}
	}, {
		key: "unlockRotY",


		/**
   * unlockRotY
   */
		value: function unlockRotY() {
			this.lockRotY = false;
		}
	}, {
		key: "isLockRotY",


		/**
   * isLockRotY
   * @returns {Boolean}
   */
		value: function isLockRotY() {
			return this.lockRotY;
		}
	}, {
		key: "forward",


		/**
   * forward
   */
		value: function forward() {
			this.forward = 1;
		}
	}, {
		key: "backward",


		/**
   * backward
   */
		value: function backward() {
			this.backwardE = 1;
		}
	}, {
		key: "strafeLeft",


		/**
   * strafeLeft
   */
		value: function strafeLeft() {
			this.leftE = 1;
		}
	}, {
		key: "strafeRight",


		/**
   * strafeRight
   */
		value: function strafeRight() {
			this.rightE = 1;
		}
	}, {
		key: "strafeFront",


		/**
   * strafeFront
   */
		value: function strafeFront() {
			this.frontE = 1;
		}
	}, {
		key: "strafeBack",


		/**
   * strafeBack
   */
		value: function strafeBack() {
			this.backE = 1;
		}
	}, {
		key: "stopForward",


		/**
   * stopForward
   */
		value: function stopForward() {
			this.forward = 0;
		}
	}, {
		key: "stopBackward",


		/**
   * stopBackward
   */
		value: function stopBackward() {
			this.backwardE = 0;
		}
	}, {
		key: "stopStrafeLeft",


		/**
   * stopStrafeLeft
   */
		value: function stopStrafeLeft() {
			this.leftE = 0;
		}
	}, {
		key: "stopStrafeRight",


		/**
   * stopStrafeRight
   */
		value: function stopStrafeRight() {
			this.rightE = 0;
		}
	}, {
		key: "stopStrafeFront",


		/**
   * stopStrafeFront
   */
		value: function stopStrafeFront() {
			this.frontE = 0;
		}
	}, {
		key: "stopStrafeBack",


		/**
   * stopStrafeBack
   */
		value: function stopStrafeBack() {
			this.backE = 0;
		}
	}, {
		key: "mouseDown",
		value: function mouseDown(event) {
			this.lastX = event.screenX;
			this.lastY = event.screenY;

			if (event.button === 0) // LEFT BUTTON
				this.leftButton = 1;
			if (event.button === 1) // MIDDLE BUTTON
				this.middleButton = 1;
			if (event.button === 2) // RIGHT BUTTON
				this.rightButton = 1;

			this.updateGoal(event);
		}
	}, {
		key: "mouseUp",
		value: function mouseUp(event) {
			if (event.button === 0) // LEFT BUTTON
				this.leftButton = 0;
			if (event.button === 1) // MIDDLE BUTTON
				this.middleButton = 0;
			if (event.button === 2) // RIGHT BUTTON
				this.rightButton = 0;
		}
	}, {
		key: "mouseMove",
		value: function mouseMove(event) {
			if (this.leftButton === 1 || this.middleButton === 1) this.updateGoal(event);
		}
	}, {
		key: "isLeftBtnActive",


		/**
   * isLeftBtnActive
   * @returns {boolean}
   */
		value: function isLeftBtnActive() {
			return this.leftButton === 1;
		}
	}, {
		key: "isMiddleBtnActive",


		/**
   * isMiddleBtnActive
   * @returns {boolean}
   */
		value: function isMiddleBtnActive() {
			return this.middleButton === 1;
		}
	}, {
		key: "isRightBtnActive",


		/**
   * isRightBtnActive
   * @returns {boolean}
   */
		value: function isRightBtnActive() {
			return this.rightButton === 1;
		}
	}, {
		key: "setLeftButtonAction",


		/**
   * setLeftButtonAction
   * @param {String} [action="ORBIT"]
   */
		value: function setLeftButtonAction(action) {
			this.leftButtonAction = action;
		}
	}, {
		key: "setMiddleButtonAction",


		/**
   * setMiddleButtonAction
   * @param {String} [action="PAN"]
   */
		value: function setMiddleButtonAction(action) {
			this.middleButtonAction = action;
		}
	}, {
		key: "setRightButtonAction",


		/**
   * setRightButtonAction
   * @param {String} [action="ZOOM"]
   */
		value: function setRightButtonAction(action) {
			this.rightButtonAction = action;
		}
	}, {
		key: "tick",


		/**
  * @override
  */
		value: function tick(delta) {
			var dir = $V3([0.0, 0.0, 0.0]);
			if (this.forward === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getForward().x(-this._vel));
			if (this.backwardE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getForward().x(this._vel));
			if (this.leftE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getLeft().x(-this._vel));
			if (this.rightE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getLeft().x(this._vel));
			if (this.backE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getUp().x(-this._vel));
			if (this.frontE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getUp().x(this._vel));

			this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir));
			this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir));
		}
	}, {
		key: "updateGoal",
		value: function updateGoal(event) {
			if (this.middleButton === 1) {
				if (this.middleButtonAction === "PAN") this.makePan(event);else if (this.middleButtonAction === "ORBIT") this.makeOrbit(event);
			} else {
				if (this.leftButtonAction === "PAN") {
					this.comp_projection.getProjection() === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE ? this.makeOrbit(event) : this.makePan(event);
				} else if (this.leftButtonAction === "ORBIT") this.makeOrbit(event);
			}
			this.lastX = event.screenX;
			this.lastY = event.screenY;
		}
	}, {
		key: "makePan",
		value: function makePan(event) {
			event.preventDefault();
			var X = this.comp_transformTarget.getMatrix().getLeft().x((this.lastX - event.screenX) * (this.comp_projection.getFov() * 0.005));
			var Y = this.comp_transformTarget.getMatrix().getUp().x((this.lastY - event.screenY) * (this.comp_projection.getFov() * -0.005));
			var dir = X.add(Y.x(-1.0));
			this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir));
			this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir));
		}
	}, {
		key: "makeOrbit",
		value: function makeOrbit(event) {
			var factorRot = 0.5;
			if (this.lockRotY === false) {
				if (this.lastX > event.screenX) {
					this.comp_transformTarget.yaw(-(this.lastX - event.screenX) * factorRot);
				} else {
					this.comp_transformTarget.yaw((event.screenX - this.lastX) * factorRot);
				}
			}
			if (this.lockRotX === false) {
				if (this.lastY > event.screenY) {
					this.comp_transformTarget.pitch((this.lastY - event.screenY) * factorRot);
				} else {
					this.comp_transformTarget.pitch(-(event.screenY - this.lastY) * factorRot);
				}
			}
		}
	}]);

	return ComponentControllerTransformTarget;
}(_Component2.Component);

global.ComponentControllerTransformTarget = ComponentControllerTransformTarget;
module.exports.ComponentControllerTransformTarget = ComponentControllerTransformTarget;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":1,"./Constants":3}],3:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Constants = exports.Constants = {
	"EVENT_TYPES": {
		"KEY_DOWN": 0,
		"KEY_UP": 1,
		"MOUSE_DOWN": 2,
		"MOUSE_UP": 3,
		"MOUSE_MOVE": 4,
		"MOUSE_WHEEL": 5
	},
	"COMPONENT_TYPES": {
		"KEYBOARD_EVENTS": 0,
		"MOUSE_EVENTS": 1,
		"TRANSFORM": 2,
		"TRANSFORM_TARGET": 3,
		"CONTROLLER_TRANSFORM_TARGET": 4,
		"PROJECTION": 5,
		"GPU": 6
	},
	"PROJECTION_TYPES": {
		"PERSPECTIVE": 0,
		"ORTHO": 1
	},
	"VIEW_TYPES": {
		"LEFT": 0,
		"RIGHT": 1,
		"FRONT": 2,
		"BACK": 3,
		"TOP": 4,
		"BOTTOM": 5
	},
	"BLENDING_MODES": {
		"ZERO": "ZERO",
		"ONE": "ONE",
		"SRC_COLOR": "SRC_COLOR",
		"ONE_MINUS_SRC_COLOR": "ONE_MINUS_SRC_COLOR",
		"DST_COLOR": "DST_COLOR",
		"ONE_MINUS_DST_COLOR": "ONE_MINUS_DST_COLOR",
		"SRC_ALPHA": "SRC_ALPHA",
		"ONE_MINUS_SRC_ALPHA": "ONE_MINUS_SRC_ALPHA",
		"DST_ALPHA": "DST_ALPHA",
		"ONE_MINUS_DST_ALPHA": "ONE_MINUS_DST_ALPHA",
		"SRC_ALPHA_SATURATE": "SRC_ALPHA_SATURATE",
		"CONSTANT_COLOR": "CONSTANT_COLOR",
		"ONE_MINUS_CONSTANT_COLOR": "ONE_MINUS_CONSTANT_COLOR",
		"CONSTANT_ALPHA": "CONSTANT_ALPHA",
		"ONE_MINUS_CONSTANT_ALPHA": "ONE_MINUS_CONSTANT_ALPHA"
	},
	"BLENDING_EQUATION_TYPES": {
		"FUNC_ADD": "FUNC_ADD",
		"FUNC_SUBTRACT": "FUNC_SUBTRACT",
		"FUNC_REVERSE_SUBTRACT": "FUNC_REVERSE_SUBTRACT"
	},
	"DRAW_MODES": {
		"POINTS": 0,
		"LINES": 1,
		"LINE_LOOP": 2,
		"LINE_STRIP": 3,
		"TRIANGLES": 4,
		"TRIANGLE_STRIP": 5,
		"TRIANGLE_FAN": 6
	}
};
global.Constants = Constants;
module.exports.Constants = Constants;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[2]);
