(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var exp = { "WebCLGL": "./WebCLGL.class",
            "WebCLGLBuffer": "./WebCLGLBuffer.class.js",
            "WebCLGLFor": "./WebCLGLFor.class.js",
            "WebCLGLKernel": "./WebCLGLKernel.class.js",
            "WebCLGLUtils": "./WebCLGLUtils.class.js",
            "WebCLGLVertexFragmentProgram": "./WebCLGLVertexFragmentProgram.class.js"
};

for(var key in exp)
    exports[key] = require(exp[key]);
},{}],2:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var Component = exports.Component = function () {
    function Component() {
        _classCallCheck(this, Component);

        this.type = null;
        this.node = null;
    }

    /**
     * initialize
     * @param {Node} nod
     * @param {WebGLRenderingContext} glCtx
     */


    _createClass(Component, [{
        key: "initialize",
        value: function initialize(nod, glCtx) {}

        /**
         * tick
         * @param {number} delta
         */

    }, {
        key: "tick",
        value: function tick(delta) {}
    }]);

    return Component;
}();

global.Component = Component;
module.exports.Component = Component;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ComponentControllerTransformTarget = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = require("./Component.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @class
* @constructor
* @param {Object} jsonIn
* @param {Node} jsonIn.node
*/
var ComponentControllerTransformTarget = exports.ComponentControllerTransformTarget = function (_Component) {
	_inherits(ComponentControllerTransformTarget, _Component);

	function ComponentControllerTransformTarget() {
		_classCallCheck(this, ComponentControllerTransformTarget);

		var _this = _possibleConstructorReturn(this, (ComponentControllerTransformTarget.__proto__ || Object.getPrototypeOf(ComponentControllerTransformTarget)).call(this));

		_this.type = _Constants.Constants.COMPONENT_TYPES.CONTROLLER_TRANSFORM_TARGET;
		_this.node = null;
		_this.gl = null;

		_this.comp_transformTarget = null;
		_this.comp_projection = null;

		_this._vel = 0.1;

		_this.forward = 0;
		_this.backwardE = 0;
		_this.leftE = 0;
		_this.rightE = 0;
		_this.frontE = 0;
		_this.backE = 0;

		_this.leftButton = 0;
		_this.middleButton = 0;
		_this.rightButton = 0;

		_this.leftButtonAction = "ORBIT";
		_this.middleButtonAction = "PAN";
		_this.rightButtonAction = "ZOOM";

		_this.lastX = 0;
		_this.lastY = 0;

		_this.lockRotX = false;
		_this.lockRotY = false;
		return _this;
	}

	/**
  * initialize
  * @param {Node} nod
  * @param {WebGLRenderingContext} glCtx.
  * @override
  */


	_createClass(ComponentControllerTransformTarget, [{
		key: "initialize",
		value: function initialize(nod, glCtx) {
			this.node = nod;
			this.gl = glCtx;

			this.comp_transformTarget = this.node.getComponent(_Constants.Constants.COMPONENT_TYPES.TRANSFORM_TARGET);
			this.comp_projection = this.node.getComponent(_Constants.Constants.COMPONENT_TYPES.PROJECTION);
		}
	}, {
		key: "setVelocity",


		/**
   * setVelocity
   * @param {number} velocity
   */
		value: function setVelocity(velocity) {
			this._vel = velocity;
		}
	}, {
		key: "lockRotX",


		/**
   * lockRotX
   */
		value: function lockRotX() {
			this.lockRotX = true;
		}
	}, {
		key: "unlockRotX",

		/**
   * unlockRotX
   */
		value: function unlockRotX() {
			this.lockRotX = false;
		}
	}, {
		key: "isLockRotX",

		/**
   * isLockRotX
   * @returns {Boolean}
   */
		value: function isLockRotX() {
			return this.lockRotX;
		}
	}, {
		key: "lockRotY",


		/**
   * lockRotY
   */
		value: function lockRotY() {
			this.lockRotY = true;
		}
	}, {
		key: "unlockRotY",


		/**
   * unlockRotY
   */
		value: function unlockRotY() {
			this.lockRotY = false;
		}
	}, {
		key: "isLockRotY",


		/**
   * isLockRotY
   * @returns {Boolean}
   */
		value: function isLockRotY() {
			return this.lockRotY;
		}
	}, {
		key: "forward",


		/**
   * forward
   */
		value: function forward() {
			this.forward = 1;
		}
	}, {
		key: "backward",


		/**
   * backward
   */
		value: function backward() {
			this.backwardE = 1;
		}
	}, {
		key: "strafeLeft",


		/**
   * strafeLeft
   */
		value: function strafeLeft() {
			this.leftE = 1;
		}
	}, {
		key: "strafeRight",


		/**
   * strafeRight
   */
		value: function strafeRight() {
			this.rightE = 1;
		}
	}, {
		key: "strafeFront",


		/**
   * strafeFront
   */
		value: function strafeFront() {
			this.frontE = 1;
		}
	}, {
		key: "strafeBack",


		/**
   * strafeBack
   */
		value: function strafeBack() {
			this.backE = 1;
		}
	}, {
		key: "stopForward",


		/**
   * stopForward
   */
		value: function stopForward() {
			this.forward = 0;
		}
	}, {
		key: "stopBackward",


		/**
   * stopBackward
   */
		value: function stopBackward() {
			this.backwardE = 0;
		}
	}, {
		key: "stopStrafeLeft",


		/**
   * stopStrafeLeft
   */
		value: function stopStrafeLeft() {
			this.leftE = 0;
		}
	}, {
		key: "stopStrafeRight",


		/**
   * stopStrafeRight
   */
		value: function stopStrafeRight() {
			this.rightE = 0;
		}
	}, {
		key: "stopStrafeFront",


		/**
   * stopStrafeFront
   */
		value: function stopStrafeFront() {
			this.frontE = 0;
		}
	}, {
		key: "stopStrafeBack",


		/**
   * stopStrafeBack
   */
		value: function stopStrafeBack() {
			this.backE = 0;
		}
	}, {
		key: "mouseDown",
		value: function mouseDown(event) {
			this.lastX = event.screenX;
			this.lastY = event.screenY;

			if (event.button === 0) // LEFT BUTTON
				this.leftButton = 1;
			if (event.button === 1) // MIDDLE BUTTON
				this.middleButton = 1;
			if (event.button === 2) // RIGHT BUTTON
				this.rightButton = 1;

			this.updateGoal(event);
		}
	}, {
		key: "mouseUp",
		value: function mouseUp(event) {
			if (event.button === 0) // LEFT BUTTON
				this.leftButton = 0;
			if (event.button === 1) // MIDDLE BUTTON
				this.middleButton = 0;
			if (event.button === 2) // RIGHT BUTTON
				this.rightButton = 0;
		}
	}, {
		key: "mouseMove",
		value: function mouseMove(event) {
			if (this.leftButton === 1 || this.middleButton === 1) this.updateGoal(event);
		}
	}, {
		key: "isLeftBtnActive",


		/**
   * isLeftBtnActive
   * @returns {boolean}
   */
		value: function isLeftBtnActive() {
			return this.leftButton === 1;
		}
	}, {
		key: "isMiddleBtnActive",


		/**
   * isMiddleBtnActive
   * @returns {boolean}
   */
		value: function isMiddleBtnActive() {
			return this.middleButton === 1;
		}
	}, {
		key: "isRightBtnActive",


		/**
   * isRightBtnActive
   * @returns {boolean}
   */
		value: function isRightBtnActive() {
			return this.rightButton === 1;
		}
	}, {
		key: "setLeftButtonAction",


		/**
   * setLeftButtonAction
   * @param {String} [action="ORBIT"]
   */
		value: function setLeftButtonAction(action) {
			this.leftButtonAction = action;
		}
	}, {
		key: "setMiddleButtonAction",


		/**
   * setMiddleButtonAction
   * @param {String} [action="PAN"]
   */
		value: function setMiddleButtonAction(action) {
			this.middleButtonAction = action;
		}
	}, {
		key: "setRightButtonAction",


		/**
   * setRightButtonAction
   * @param {String} [action="ZOOM"]
   */
		value: function setRightButtonAction(action) {
			this.rightButtonAction = action;
		}
	}, {
		key: "tick",


		/**
  * @override
  */
		value: function tick(delta) {
			var dir = $V3([0.0, 0.0, 0.0]);
			if (this.forward === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getForward().x(-this._vel));
			if (this.backwardE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getForward().x(this._vel));
			if (this.leftE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getLeft().x(-this._vel));
			if (this.rightE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getLeft().x(this._vel));
			if (this.backE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getUp().x(-this._vel));
			if (this.frontE === 1) dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getUp().x(this._vel));

			this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir));
			this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir));
		}
	}, {
		key: "updateGoal",
		value: function updateGoal(event) {
			if (this.middleButton === 1) {
				if (this.middleButtonAction === "PAN") this.makePan(event);else if (this.middleButtonAction === "ORBIT") this.makeOrbit(event);
			} else {
				if (this.leftButtonAction === "PAN") {
					this.comp_projection.getProjection() === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE ? this.makeOrbit(event) : this.makePan(event);
				} else if (this.leftButtonAction === "ORBIT") this.makeOrbit(event);
			}
			this.lastX = event.screenX;
			this.lastY = event.screenY;
		}
	}, {
		key: "makePan",
		value: function makePan(event) {
			event.preventDefault();
			var X = this.comp_transformTarget.getMatrix().getLeft().x((this.lastX - event.screenX) * (this.comp_projection.getFov() * 0.005));
			var Y = this.comp_transformTarget.getMatrix().getUp().x((this.lastY - event.screenY) * (this.comp_projection.getFov() * -0.005));
			var dir = X.add(Y.x(-1.0));
			this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir));
			this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir));
		}
	}, {
		key: "makeOrbit",
		value: function makeOrbit(event) {
			var factorRot = 0.5;
			if (this.lockRotY === false) {
				if (this.lastX > event.screenX) {
					this.comp_transformTarget.yaw(-(this.lastX - event.screenX) * factorRot);
				} else {
					this.comp_transformTarget.yaw((event.screenX - this.lastX) * factorRot);
				}
			}
			if (this.lockRotX === false) {
				if (this.lastY > event.screenY) {
					this.comp_transformTarget.pitch((this.lastY - event.screenY) * factorRot);
				} else {
					this.comp_transformTarget.pitch(-(event.screenY - this.lastY) * factorRot);
				}
			}
		}
	}]);

	return ComponentControllerTransformTarget;
}(_Component2.Component);

global.ComponentControllerTransformTarget = ComponentControllerTransformTarget;
module.exports.ComponentControllerTransformTarget = ComponentControllerTransformTarget;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":9}],4:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ComponentKeyboardEvents = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = require("./Component.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @class
* @constructor
*/
var ComponentKeyboardEvents = exports.ComponentKeyboardEvents = function (_Component) {
	_inherits(ComponentKeyboardEvents, _Component);

	function ComponentKeyboardEvents() {
		_classCallCheck(this, ComponentKeyboardEvents);

		var _this = _possibleConstructorReturn(this, (ComponentKeyboardEvents.__proto__ || Object.getPrototypeOf(ComponentKeyboardEvents)).call(this));

		_this.type = _Constants.Constants.COMPONENT_TYPES.KEYBOARD_EVENTS;
		_this.node = null;
		_this.gl = null;

		_this._onkeydown = null;
		_this._onkeyup = null;
		return _this;
	}

	/**
  * initialize
  * @param {Node} nod
  * @param {WebGLRenderingContext} glCtx.
  * @override
  */


	_createClass(ComponentKeyboardEvents, [{
		key: "initialize",
		value: function initialize(nod, glCtx) {
			this.node = nod;
			this.gl = glCtx;
		}
	}, {
		key: "onkeydown",


		/**
   * @callback ComponentKeyboardEvents~onkeydown
   * @param {KeyboardEvent} evt
   */
		/**
   * onkeydown
   * @param {ComponentKeyboardEvents~onkeydown} cb
   */
		value: function onkeydown(cb) {
			this._onkeydown = cb;
		}
	}, {
		key: "onkeyup",


		/**
   * @callback ComponentKeyboardEvents~onkeyup
   * @param {KeyboardEvent} evt
   */
		/**
   * onkeyup
   * @param {ComponentKeyboardEvents~onkeyup} cb
   */
		value: function onkeyup(cb) {
			this._onkeyup = cb;
		}
	}]);

	return ComponentKeyboardEvents;
}(_Component2.Component);

global.ComponentKeyboardEvents = ComponentKeyboardEvents;
module.exports.ComponentKeyboardEvents = ComponentKeyboardEvents;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":9}],5:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ComponentMouseEvents = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = require("./Component.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @class
* @constructor
*/
var ComponentMouseEvents = exports.ComponentMouseEvents = function (_Component) {
	_inherits(ComponentMouseEvents, _Component);

	function ComponentMouseEvents() {
		_classCallCheck(this, ComponentMouseEvents);

		var _this = _possibleConstructorReturn(this, (ComponentMouseEvents.__proto__ || Object.getPrototypeOf(ComponentMouseEvents)).call(this));

		_this.type = _Constants.Constants.COMPONENT_TYPES.MOUSE_EVENTS;
		_this.node = null;
		_this.gl = null;

		_this._onmousedown = null;
		_this._onmouseup = null;
		_this._onmousemove = null;
		_this._onmousewheel = null;
		return _this;
	}

	/**
  * initialize
  * @param {Node} nod
  * @param {WebGLRenderingContext} glCtx.
  * @override
  */


	_createClass(ComponentMouseEvents, [{
		key: "initialize",
		value: function initialize(nod, glCtx) {
			this.node = nod;
			this.gl = glCtx;
		}
	}, {
		key: "onmousedown",


		/**
   * @callback ComponentMouseEvents~onmousedown
   * @param {MouseEvent} evt
   */
		/**
   * onmousedown
   * @param {ComponentMouseEvents~onmousedown} cb
   */
		value: function onmousedown(cb) {
			this._onmousedown = cb;
		}
	}, {
		key: "onmouseup",


		/**
   * @callback ComponentMouseEvents~onmouseup
   * @param {MouseEvent} evt
   */
		/**
   * onmousedown
   * @param {ComponentMouseEvents~onmouseup} cb
   */
		value: function onmouseup(cb) {
			this._onmouseup = cb;
		}
	}, {
		key: "onmousemove",


		/**
   * @callback ComponentMouseEvents~onmousemove
   * @param {MouseEvent} evt
   * @param {StormV3} dir
   */
		/**
   * onmousedown
   * @param {ComponentMouseEvents~onmousemove} cb
   */
		value: function onmousemove(cb) {
			this._onmousemove = cb;
		}
	}, {
		key: "onmousewheel",


		/**
   * @callback ComponentMouseEvents~onmousewheel
   * @param {MouseWheelEvent} evt
   * @param {StormV3} dir
   */
		/**
   * onmousedown
   * @param {ComponentMouseEvents~onmousewheel} cb
   */
		value: function onmousewheel(cb) {
			this._onmousewheel = cb;
		}
	}]);

	return ComponentMouseEvents;
}(_Component2.Component);

global.ComponentMouseEvents = ComponentMouseEvents;
module.exports.ComponentMouseEvents = ComponentMouseEvents;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":9}],6:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ComponentProjection = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = require("./Component.class");

var _StormMath = require("./StormMath.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @class
* @constructor
*/
var ComponentProjection = exports.ComponentProjection = function (_Component) {
	_inherits(ComponentProjection, _Component);

	function ComponentProjection() {
		_classCallCheck(this, ComponentProjection);

		var _this = _possibleConstructorReturn(this, (ComponentProjection.__proto__ || Object.getPrototypeOf(ComponentProjection)).call(this));

		_this.type = _Constants.Constants.COMPONENT_TYPES.PROJECTION;
		_this.node = null;
		_this.gl = null;

		_this.mProjectionMatrix = $M16([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);

		_this.proy = _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE;
		_this._width = 512;
		_this._height = 512;

		_this._fov = 45;
		_this._fovOrtho = 20;

		_this._near = 0.1;
		_this._far = 10000;

		_this._nearOrtho = -100000;
		_this._farOrtho = 100000;
		return _this;
	}

	/**
  * initialize
  * @param {Node} nod
  * @param {WebGLRenderingContext} glCtx.
  * @override
  */


	_createClass(ComponentProjection, [{
		key: "initialize",
		value: function initialize(nod, glCtx) {
			this.node = nod;
			this.gl = glCtx;

			this.updateProjectionMatrix();
		}
	}, {
		key: "getMatrix",


		/**
   * getMatrix
   * @returns {StormM16}
   */
		value: function getMatrix() {
			return this.mProjectionMatrix;
		}
	}, {
		key: "getProjection",


		/**
   * getProjection
   * @returns {Constants.PROJECTION_TYPES|number}
   */
		value: function getProjection() {
			return this.proy;
		}
	}, {
		key: "setProjection",


		/**
   * setProjection
   * @param {int|Constants.PROJECTION_TYPES} projection_type
   */
		value: function setProjection(projection_type) {
			this.proy = projection_type;
			this.updateProjectionMatrix();
		}
	}, {
		key: "setResolution",


		/**
   * setResolution
   * @param {int} width
   * @param {int} height
   */
		value: function setResolution(width, height) {
			this._width = width;
			this._height = height;
			this.updateProjectionMatrix();
		}
	}, {
		key: "getResolution",


		/**
   * getResolution
   * @returns {Object}
   */
		value: function getResolution() {
			return { "width": this._width,
				"height": this._height };
		}
	}, {
		key: "setFov",


		/**
   * setFov
   * @param {number} fov
   */
		value: function setFov(fov) {
			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) this._fov = fov;else this._fovOrtho = fov;

			this.updateProjectionMatrix();
		}
	}, {
		key: "getFov",


		/**
   * getFov
   * @returns {number}
   */
		value: function getFov() {
			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) return this._fov;else return this._fovOrtho;
		}
	}, {
		key: "setNear",


		/**
   * setNear
   * @param {number} near
   */
		value: function setNear(near) {
			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) this._near = near;else this._nearOrtho = near;

			this.updateProjectionMatrix();
		}
	}, {
		key: "getNear",


		/**
   * getNear
   * @returns {number}
   */
		value: function getNear() {
			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) return this._near;else return this._nearOrtho;
		}
	}, {
		key: "setFar",


		/**
   * setFar
   * @param {number} far
   */
		value: function setFar(far) {
			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) this._far = far;else this._farOrtho = far;

			this.updateProjectionMatrix();
		}
	}, {
		key: "getFar",


		/**
   * getFar
   * @returns {number}
   */
		value: function getFar() {
			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) return this._far;else return this._farOrtho;
		}
	}, {
		key: "updateProjectionMatrix",


		/**
   * updateProjectionMatrix
   * @private
   */
		value: function updateProjectionMatrix() {
			var fovy = this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE ? this._fov : this._fovOrtho;
			var aspect = this._width / this._height;

			if (this.proy === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE) this.mProjectionMatrix = _StormMath.StormM16.setPerspectiveProjection(fovy, aspect, this._near, this._far);else this.mProjectionMatrix = _StormMath.StormM16.setOrthographicProjection(-aspect * fovy, aspect * fovy, -aspect * fovy, aspect * fovy, this._nearOrtho, this._farOrtho);
		}
	}]);

	return ComponentProjection;
}(_Component2.Component);

global.ComponentProjection = ComponentProjection;
module.exports.ComponentProjection = ComponentProjection;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":9,"./StormMath.class":12}],7:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
							value: true
});
exports.ComponentTransformTarget = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = require("./Component.class");

var _Utils = require("./Utils.class");

var _StormMath = require("./StormMath.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @class
* @constructor
*/
var ComponentTransformTarget = exports.ComponentTransformTarget = function (_Component) {
							_inherits(ComponentTransformTarget, _Component);

							function ComponentTransformTarget() {
														_classCallCheck(this, ComponentTransformTarget);

														var _this = _possibleConstructorReturn(this, (ComponentTransformTarget.__proto__ || Object.getPrototypeOf(ComponentTransformTarget)).call(this));

														_this.type = _Constants.Constants.COMPONENT_TYPES.TRANSFORM_TARGET;
														_this.node = null;
														_this.gl = null;

														_this.mModelMatrix = $M16([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);

														_this.targetDistance = 5.0;
														_this.positionGoal = $V3([0, 0, _this.targetDistance]);
														_this.positionTarget = $V3([0, 0, 0]);
														return _this;
							}

							/**
        * initialize
        * @param {Node} nod
        * @param {WebGLRenderingContext} glCtx.
        * @override
        */


							_createClass(ComponentTransformTarget, [{
														key: "initialize",
														value: function initialize(nod, glCtx) {
																					this.node = nod;
																					this.gl = glCtx;

																					this.performMatrix();
														}
							}, {
														key: "getMatrix",


														/**
               * getMatrix
               * @returns {StormM16}
               */
														value: function getMatrix() {
																					return this.mModelMatrix;
														}
							}, {
														key: "setTargetDistance",


														/**
               * setTargetDistance
               * @param {number} distance
               */
														value: function setTargetDistance(distance) {
																					this.targetDistance = distance;
														}
							}, {
														key: "getTargetDistance",


														/**
               * getTargetDistance
               * @returns {number}
               */
														value: function getTargetDistance() {
																					return this.targetDistance;
														}
							}, {
														key: "setPositionGoal",


														/** 
               * setPositionGoal
               * @param {StormV3} position
               */
														value: function setPositionGoal(position) {
																					this.positionGoal = position;
																					this.performMatrix();
														}
							}, {
														key: "getPositionGoal",


														/** 
               * getPositionGoal
               * @returns {StormV3}
               */
														value: function getPositionGoal() {
																					return this.positionGoal;
														}
							}, {
														key: "setPositionTarget",


														/**
               * setPositionTarget
               * @param {StormV3} position
               */
														value: function setPositionTarget(position) {
																					this.positionTarget = position;
																					this.performMatrix();
														}
							}, {
														key: "getPositionTarget",


														/**
               * getPositionTarget
               * @returns {StormV3}
               */
														value: function getPositionTarget() {
																					return this.positionTarget;
														}
							}, {
														key: "reset",
														value: function reset() {
																					this.positionGoal = $V3([0, 0, this.targetDistance]);
																					this.positionTarget = $V3([0, 0, 0]);
																					this.performMatrix();
														}
							}, {
														key: "yaw",


														/**
               * yaw
               * @param {number} angle
               */
														value: function yaw(angle) {
																					var dir = this.getPositionGoal().subtract(this.getPositionTarget());

																					var sphericalCoords = _Utils.Utils.cartesianToSpherical(dir.normalize());
																					var cartesianCoords = _Utils.Utils.sphericalToCartesian(sphericalCoords.radius, sphericalCoords.lat, sphericalCoords.lng + angle);

																					this.setPositionGoal(this.getPositionTarget().add(cartesianCoords.x(this.getTargetDistance())));
														}
							}, {
														key: "pitch",


														/**
               * pitch
               * @param {number} angle
               */
														value: function pitch(angle) {
																					var dir = this.getPositionGoal().subtract(this.getPositionTarget());

																					var sphericalCoords = _Utils.Utils.cartesianToSpherical(dir.normalize());
																					var cartesianCoords = _Utils.Utils.sphericalToCartesian(sphericalCoords.radius, sphericalCoords.lat + angle, sphericalCoords.lng);

																					this.setPositionGoal(this.getPositionTarget().add(cartesianCoords.x(this.getTargetDistance())));
														}
							}, {
														key: "performMatrix",


														/**
               * performMatrix
               * @private
               */
														value: function performMatrix() {
																					this.mModelMatrix = _StormMath.StormM16.makeLookAt(this.getPositionGoal().e[0], this.getPositionGoal().e[1], this.getPositionGoal().e[2], this.getPositionTarget().e[0], this.getPositionTarget().e[1], this.getPositionTarget().e[2], 0, 1, 0);
														}
							}]);

							return ComponentTransformTarget;
}(_Component2.Component);

global.ComponentTransformTarget = ComponentTransformTarget;
module.exports.ComponentTransformTarget = ComponentTransformTarget;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":9,"./StormMath.class":12,"./Utils.class":13}],8:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Component_GPU = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require("webclgl");

var _Component2 = require("./Component.class");

var _Constants = require("./Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class
 * @constructor
 */
var Component_GPU = exports.Component_GPU = function (_Component) {
    _inherits(Component_GPU, _Component);

    function Component_GPU() {
        _classCallCheck(this, Component_GPU);

        var _this = _possibleConstructorReturn(this, (Component_GPU.__proto__ || Object.getPrototypeOf(Component_GPU)).call(this));

        _this.type = _Constants.Constants.COMPONENT_TYPES.GPU;
        _this.node = null;
        _this.gl = null;

        _this.gpufG = null;
        _this.args = {};
        return _this;
    }

    /**
     * initialize
     * @param {Node} nod
     * @param {WebGLRenderingContext} glCtx.
     * @override
     */


    _createClass(Component_GPU, [{
        key: "initialize",
        value: function initialize(nod, glCtx) {
            this.node = nod;
            this.gl = glCtx;
        }
    }, {
        key: "tick",


        /**
         * tick
         * @override
         */
        value: function tick(delta) {
            this.tickArguments();

            if (this.gpufG != null) this.gpufG.processKernels();

            if (this.gpufG != null) this.gpufG.processGraphic(undefined);
        }
    }, {
        key: "setGPUFor",


        /**
         * setGPUFor
         */
        value: function setGPUFor() {
            var _this2 = this,
                _arguments = arguments;

            for (var key in arguments[1]) {
                var expl = key.split(" ");
                if (expl != null && expl.length > 1) {
                    var argName = expl[1];
                    this.args[argName] = {
                        "fnvalue": arguments[1][key],
                        "updatable": null,
                        "splits": null,
                        "overrideDimensions": null };
                }
                arguments[1][key] = arguments[1][key]();
            }

            var F = function F() {
                return gpufor.apply(_this2, _arguments);
            };
            this.gpufG = new F();
        }
    }, {
        key: "getWebCLGL",


        /**
         * getWebCLGL
         * @returns {WebCLGL}
         */
        value: function getWebCLGL() {
            return this.gpufG.getWebCLGL();
        }
    }, {
        key: "addArgument",


        // █████╗ ██████╗  ██████╗ ██╗   ██╗███╗   ███╗███████╗███╗   ██╗████████╗███████╗
        //██╔══██╗██╔══██╗██╔════╝ ██║   ██║████╗ ████║██╔════╝████╗  ██║╚══██╔══╝██╔════╝
        //███████║██████╔╝██║  ███╗██║   ██║██╔████╔██║█████╗  ██╔██╗ ██║   ██║   ███████╗
        //██╔══██║██╔══██╗██║   ██║██║   ██║██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   ╚════██║
        //██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   ███████║
        //╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝

        /**
         *
         */
        value: function addArgument(arg, value) {
            this.args[arg.split(" ")[1]] = {
                "fnvalue": value,
                "updatable": null,
                "splits": null,
                "overrideDimensions": null };

            this.gpufG.addArg(arg);
        }
    }, {
        key: "setArg",


        /**
         * @param {String} argument Argument to set
         * @param {Function} fnvalue
         * @param {Array<number>} [splits=[array.length]]
         * @param {Array<number>} [overrideDimensions=new Array(){Math.sqrt(value.length), Math.sqrt(value.length)}]
         * @returns {WebCLGLBuffer}
         */
        value: function setArg(argument, fnvalue, splits, overrideDimensions) {
            var buff = this.gpufG.setArg(argument, fnvalue(), splits, overrideDimensions);
            this.args[argument] = { "fnvalue": fnvalue,
                "updatable": null,
                "splits": splits,
                "overrideDimensions": overrideDimensions };

            return buff;
        }
    }, {
        key: "getComponentBufferArg",


        /**
         * getComponentBufferArg
         * @param {String} argument Argument to set
         * @param {Component|Component_GPU} comp_gpu
         */
        value: function getComponentBufferArg(argument, comp_gpu) {
            this.gpufG.getGPUForArg(argument, comp_gpu.gpufG);
            this.args[argument] = { "fnvalue": null,
                "updatable": null,
                "splits": null,
                "overrideDimensions": null };
        }
    }, {
        key: "getArgs",


        /**
         * getArgs
         * @returns {Object}
         */
        value: function getArgs() {
            return this.args;
        }
    }, {
        key: "getAllArgs",


        /**
         * getAllArgs
         * @returns {Object}
         */
        value: function getAllArgs() {
            return this.gpufG.getAllArgs();
        }
    }, {
        key: "getBuffers",


        /**
         * getBuffers
         * @returns {{}|Array<WebCLGLBuffer>}
         */
        value: function getBuffers() {
            return this.gpufG._argsValues;
        }
    }, {
        key: "setArgUpdatable",


        /**
         * @param {String} argument Argument to set
         * @param {boolean} value
         */
        value: function setArgUpdatable(argument, value) {
            this.args[argument].updatable = value;
        }
    }, {
        key: "tickArguments",


        /**
         * tickArguments
         */
        value: function tickArguments() {
            for (var key in this.args) {
                if (this.args[key].updatable === true) {
                    var arg = this.args[key];
                    this.gpufG.setArg(key, arg.fnvalue(), arg.splits, arg.overrideDimensions);
                }
            }
        }
    }]);

    return Component_GPU;
}(_Component2.Component);

global.Component_GPU = Component_GPU;
module.exports.Component_GPU = Component_GPU;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Component.class":2,"./Constants":9,"webclgl":1}],9:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Constants = exports.Constants = {
	"EVENT_TYPES": {
		"KEY_DOWN": 0,
		"KEY_UP": 1,
		"MOUSE_DOWN": 2,
		"MOUSE_UP": 3,
		"MOUSE_MOVE": 4,
		"MOUSE_WHEEL": 5
	},
	"COMPONENT_TYPES": {
		"KEYBOARD_EVENTS": 0,
		"MOUSE_EVENTS": 1,
		"TRANSFORM": 2,
		"TRANSFORM_TARGET": 3,
		"CONTROLLER_TRANSFORM_TARGET": 4,
		"PROJECTION": 5,
		"GPU": 6
	},
	"PROJECTION_TYPES": {
		"PERSPECTIVE": 0,
		"ORTHO": 1
	},
	"VIEW_TYPES": {
		"LEFT": 0,
		"RIGHT": 1,
		"FRONT": 2,
		"BACK": 3,
		"TOP": 4,
		"BOTTOM": 5
	},
	"BLENDING_MODES": {
		"ZERO": "ZERO",
		"ONE": "ONE",
		"SRC_COLOR": "SRC_COLOR",
		"ONE_MINUS_SRC_COLOR": "ONE_MINUS_SRC_COLOR",
		"DST_COLOR": "DST_COLOR",
		"ONE_MINUS_DST_COLOR": "ONE_MINUS_DST_COLOR",
		"SRC_ALPHA": "SRC_ALPHA",
		"ONE_MINUS_SRC_ALPHA": "ONE_MINUS_SRC_ALPHA",
		"DST_ALPHA": "DST_ALPHA",
		"ONE_MINUS_DST_ALPHA": "ONE_MINUS_DST_ALPHA",
		"SRC_ALPHA_SATURATE": "SRC_ALPHA_SATURATE",
		"CONSTANT_COLOR": "CONSTANT_COLOR",
		"ONE_MINUS_CONSTANT_COLOR": "ONE_MINUS_CONSTANT_COLOR",
		"CONSTANT_ALPHA": "CONSTANT_ALPHA",
		"ONE_MINUS_CONSTANT_ALPHA": "ONE_MINUS_CONSTANT_ALPHA"
	},
	"BLENDING_EQUATION_TYPES": {
		"FUNC_ADD": "FUNC_ADD",
		"FUNC_SUBTRACT": "FUNC_SUBTRACT",
		"FUNC_REVERSE_SUBTRACT": "FUNC_REVERSE_SUBTRACT"
	},
	"DRAW_MODES": {
		"POINTS": 0,
		"LINES": 1,
		"LINE_LOOP": 2,
		"LINE_STRIP": 3,
		"TRIANGLES": 4,
		"TRIANGLE_STRIP": 5,
		"TRIANGLE_FAN": 6
	}
};
global.Constants = Constants;
module.exports.Constants = Constants;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],10:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
* @constructor
*/
var Node = exports.Node = function () {
	function Node() {
		_classCallCheck(this, Node);

		this._components = {};
		this._name = null;
		this._gl = null;

		this._enabled = true;

		this.onTick = null;
	}

	/**
  * initialize
  * @param {String} name.
  * @param {WebGLRenderingContext} glCtx.
  */


	_createClass(Node, [{
		key: "initialize",
		value: function initialize(name, glCtx) {
			this._name = name;
			this._gl = glCtx;
		}
	}, {
		key: "addComponent",


		/**
   * addComponent
   * @param {Component} component
   */
		value: function addComponent(component) {
			this._components[component.type] = component;
			this._components[component.type].initialize(this, this._gl);
		}
	}, {
		key: "getComponent",


		/**
   * getComponent
   * @param {Constants.COMPONENT_TYPES|int} type
   * @returns {Component}
   */
		value: function getComponent(type) {
			return this._components[type];
		}
	}, {
		key: "getComponents",


		/**
   * getComponents
   * @returns {Object}
   */
		value: function getComponents() {
			return this._components;
		}
	}, {
		key: "setEnabled",


		/**
  * setEnabled
  * @param {bool} enable.
  */
		value: function setEnabled(enable) {
			this._enabled = enable;
		}
	}, {
		key: "isEnabled",


		/**
  * setEnabled
  * @returns {boolean}
  */
		value: function isEnabled() {
			return this._enabled;
		}
	}, {
		key: "setName",


		/**
  * setName
  * @param {String} name.
  */
		value: function setName(name) {
			this._name = name;
		}
	}, {
		key: "getName",


		/**
  * getName
  * @returns {String}
  */
		value: function getName() {
			return this._name;
		}
	}]);

	return Node;
}();

global.Node = Node;
module.exports.Node = Node;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],11:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SimpleCamera = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ComponentTransformTarget = require("../../ComponentTransformTarget.class");

var _ComponentProjection = require("../../ComponentProjection.class");

var _ComponentControllerTransformTarget = require("../../ComponentControllerTransformTarget.class");

var _Component_GPU = require("../../Component_GPU.class");

var _ComponentKeyboardEvents = require("../../ComponentKeyboardEvents.class");

var _ComponentMouseEvents = require("../../ComponentMouseEvents.class");

var _Node = require("../../Node.class");

var _Constants = require("../../Constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
*/
var SimpleCamera = function () {
    function SimpleCamera(sce, jsonIn) {
        var _this = this;

        _classCallCheck(this, SimpleCamera);

        var _sce = sce;
        var _project = _sce.getLoadedProject();

        this._onkeydown = jsonIn !== undefined && jsonIn.onkeydown !== undefined && jsonIn.onkeydown !== null ? jsonIn.onkeydown : null;
        this._onkeyup = jsonIn !== undefined && jsonIn.onkeyup !== undefined && jsonIn.onkeyup !== null ? jsonIn.onkeyup : null;

        this._onmousedown = jsonIn !== undefined && jsonIn.onmousedown !== undefined && jsonIn.onmousedown !== null ? jsonIn.onmousedown : null;
        this._onmouseup = jsonIn !== undefined && jsonIn.onmouseup !== undefined && jsonIn.onmouseup !== null ? jsonIn.onmouseup : null;
        this._onmousemove = jsonIn !== undefined && jsonIn.onmousemove !== undefined && jsonIn.onmousemove !== null ? jsonIn.onmousemove : null;
        this._onmousewheel = jsonIn !== undefined && jsonIn.onmousewheel !== undefined && jsonIn.onmousewheel !== null ? jsonIn.onmousewheel : null;

        this._useAltKey = true;
        this.altKeyPressed = false;
        this._preventMove = false;

        this.camera = new _Node.Node();
        this.camera.setName("simple camera");
        _project.getActiveStage().addNode(this.camera);
        _project.getActiveStage().setActiveCamera(this.camera);

        // ComponentTransformTarget
        this.comp_transformTarget = new _ComponentTransformTarget.ComponentTransformTarget();
        this.camera.addComponent(this.comp_transformTarget);
        this.comp_transformTarget.setTargetDistance(0.5);

        // ComponentProjection
        this.comp_projection = new _ComponentProjection.ComponentProjection();
        this.camera.addComponent(this.comp_projection);

        // ComponentControllerTransformTarget
        this.comp_controllerTransformTarget = new _ComponentControllerTransformTarget.ComponentControllerTransformTarget();
        this.camera.addComponent(this.comp_controllerTransformTarget);

        // ComponentScreenEffects
        this.comp_screenEffects = new _Component_GPU.Component_GPU();
        this.camera.addComponent(this.comp_screenEffects);

        this.comp_screenEffects.setGPUFor(this.comp_screenEffects.gl, { "float4* RGB": function float4RGB() {
                return new Float32Array(_sce.getCanvas().width * _sce.getCanvas().width * 4);
            } }, { "type": "KERNEL",
            "name": "CAMERA_RGB_KERNEL",
            "viewSource": false,
            "config": ["n", undefined,
            // head
            '',
            // source
            'vec4 color = RGB[n];\n' + 'return color;\n'],
            "drawMode": 4,
            "depthTest": false,
            "blend": false,
            "blendEquation": _Constants.Constants.BLENDING_EQUATION_TYPES.FUNC_ADD,
            "blendSrcMode": _Constants.Constants.BLENDING_MODES.ONE,
            "blendDstMode": _Constants.Constants.BLENDING_MODES.ZERO });
        this.comp_screenEffects.gpufG.onPostProcessKernel(0, function () {
            //this.comp_screenEffects.gpufG.fillPointerArg("RGB", [0.0, 0.0, 0.0, 1.0]);
        });
        //this.comp_screenEffects.setArg("RGB", () => {return new Float32Array(_sce.getCanvas().width*_sce.getCanvas().width*4);});

        // ComponentKeyboardEvents
        this.comp_keyboardEvents = new _ComponentKeyboardEvents.ComponentKeyboardEvents();
        this.camera.addComponent(this.comp_keyboardEvents);
        this.comp_keyboardEvents.onkeydown(function (evt) {
            var key = String.fromCharCode(evt.keyCode);

            if (key === "W") _this.comp_controllerTransformTarget.forward();
            if (key === "S") _this.comp_controllerTransformTarget.backward();
            if (key === "A" || key === "%") _this.comp_controllerTransformTarget.strafeLeft();
            if (key === "D" || key === "'") _this.comp_controllerTransformTarget.strafeRight();
            if (key === "E" || key === "&") _this.comp_controllerTransformTarget.strafeFront();
            if (key === "C" || key === "(") _this.comp_controllerTransformTarget.strafeBack();

            if (key === "L") _this.setView(_Constants.Constants.VIEW_TYPES.LEFT);
            if (key === "R") _this.setView(_Constants.Constants.VIEW_TYPES.RIGHT);
            if (key === "F") _this.setView(_Constants.Constants.VIEW_TYPES.FRONT);
            if (key === "B") _this.setView(_Constants.Constants.VIEW_TYPES.BACK);
            if (key === "T") _this.setView(_Constants.Constants.VIEW_TYPES.TOP);

            if (key === "P") _this.comp_projection.setProjection(_Constants.Constants.PROJECTION_TYPES.PERSPECTIVE);
            if (key === "O") _this.comp_projection.setProjection(_Constants.Constants.PROJECTION_TYPES.ORTHO);

            if (evt.altKey === true) _this.altKeyPressed = true;

            if (_this._onkeydown != null) _this._onkeydown();
        });
        this.comp_keyboardEvents.onkeyup(function (evt) {
            var key = String.fromCharCode(evt.keyCode);

            if (key === "W") _this.comp_controllerTransformTarget.stopForward();
            if (key === "S") _this.comp_controllerTransformTarget.stopBackward();
            if (key === "A" || key === "%") _this.comp_controllerTransformTarget.stopStrafeLeft();
            if (key === "D" || key === "'") _this.comp_controllerTransformTarget.stopStrafeRight();
            if (key === "E" || key === "&") _this.comp_controllerTransformTarget.stopStrafeFront();
            if (key === "C" || key === "(") _this.comp_controllerTransformTarget.stopStrafeBack();

            if (evt.altKey === false) _this.altKeyPressed = false;

            if (_this._onkeyup != null) _this._onkeyup();
        });

        // ComponentMouseEvents
        var comp_mouseEvents = new _ComponentMouseEvents.ComponentMouseEvents();
        this.camera.addComponent(comp_mouseEvents);
        comp_mouseEvents.onmousedown(function (evt) {
            _this.comp_controllerTransformTarget.mouseDown(evt);

            if (evt.altKey === true) _this.altKeyPressed = true;

            if (_this._onmousedown != null) _this._onmousedown();
        });
        comp_mouseEvents.onmouseup(function (evt) {
            _this.comp_controllerTransformTarget.mouseUp(evt);

            if (evt.altKey === false) _this.altKeyPressed = false;

            if (_this._onmouseup != null) _this._onmouseup();
        });
        comp_mouseEvents.onmousemove(function (evt, dir) {
            if (_this._onmousemove != null) _this._onmousemove();

            if (_this._preventMove === false) {
                if (_this.comp_projection.getProjection() === _Constants.Constants.PROJECTION_TYPES.PERSPECTIVE || _this._useAltKey === true && _this.altKeyPressed === true || _this._useAltKey === false) _this.comp_controllerTransformTarget.mouseMove(evt);

                if (_this.comp_controllerTransformTarget.isRightBtnActive() === true && _this.comp_projection.getProjection() === _Constants.Constants.PROJECTION_TYPES.ORTHO && _this.altKeyPressed === true) {
                    if (dir.e[2] > 0) {
                        _this.comp_projection.setFov(_this.comp_projection.getFov() * (1.0 + Math.abs(dir.e[2] * 0.005)));
                    } else {
                        _this.comp_projection.setFov(_this.comp_projection.getFov() / (1.0 + Math.abs(dir.e[2] * 0.005)));
                    }
                    //this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir.x(dir.e[2])));
                    //this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir.x(dir.e[2])));
                }
            }
        });
        comp_mouseEvents.onmousewheel(function (evt, dir) {
            if (evt.wheelDeltaY !== undefined && evt.wheelDeltaY >= 0 || evt.deltaY !== undefined && evt.deltaY <= 0) _this.comp_projection.setFov(_this.comp_projection.getFov() / 1.1);else _this.comp_projection.setFov(_this.comp_projection.getFov() * 1.1);

            if (_this.comp_projection.getProjection() === _Constants.Constants.PROJECTION_TYPES.ORTHO) {
                _this.comp_transformTarget.setPositionTarget(_this.comp_transformTarget.getPositionTarget().add(dir));
                _this.comp_transformTarget.setPositionGoal(_this.comp_transformTarget.getPositionGoal().add(dir));
            }

            if (_this._onmousewheel != null) _this._onmousewheel();
        });
    }

    /**
    * Set side view. This change the projection to orthographic.
    * @param {int|Constants.VIEW_TYPES} view
     */


    _createClass(SimpleCamera, [{
        key: "setView",
        value: function setView(view) {
            this.comp_projection.setProjection(_Constants.Constants.PROJECTION_TYPES.ORTHO);
            this.comp_transformTarget.reset();
            switch (view) {
                case _Constants.Constants.VIEW_TYPES.LEFT:
                    this.comp_transformTarget.yaw(90);
                    break;
                case _Constants.Constants.VIEW_TYPES.RIGHT:
                    this.comp_transformTarget.yaw(-90);
                    break;
                case _Constants.Constants.VIEW_TYPES.FRONT:
                    //this.comp_transformTarget.getMatrix().setRotation(new Utils().degToRad(0),false,$V3([0.0,1.0,0.0]));
                    break;
                case _Constants.Constants.VIEW_TYPES.BACK:
                    //this.comp_transformTarget.getMatrix().setRotation(new Utils().degToRad(180),false,$V3([0.0,1.0,0.0]));
                    break;
                case _Constants.Constants.VIEW_TYPES.TOP:
                    this.comp_transformTarget.pitch(-89.9);
                    break;
                case _Constants.Constants.VIEW_TYPES.BOTTOM:
                    this.comp_transformTarget.pitch(90);
                    break;
            }
        }
    }, {
        key: "setLeftButtonAction",


        /**
         * setLeftButtonAction
         * @param {String} [action="ORBIT"]
         */
        value: function setLeftButtonAction(action) {
            this.comp_controllerTransformTarget.setLeftButtonAction(action);
        }
    }, {
        key: "setMiddleButtonAction",


        /**
         * setMiddleButtonAction
         * @param {String} [action="PAN"]
         */
        value: function setMiddleButtonAction(action) {
            this.comp_controllerTransformTarget.setMiddleButtonAction(action);
        }
    }, {
        key: "setRightButtonAction",


        /**
         * setRightButtonAction
         * @param {String} [action="ZOOM"]
         */
        value: function setRightButtonAction(action) {
            this.comp_controllerTransformTarget.setRightButtonAction(action);
        }
    }, {
        key: "isAltKeyEnabled",


        /**
         * isAltKeyEnabled
         * @returns {boolean}
         */
        value: function isAltKeyEnabled() {
            return this._useAltKey;
        }
    }, {
        key: "isAltKeyPressed",


        /**
         * isAltKeyPressed
         * @returns {boolean}
         */
        value: function isAltKeyPressed() {
            return this.altKeyPressed;
        }
    }, {
        key: "setVelocity",


        /**
         * setVelocity
         * @param {number} velocity
         */
        value: function setVelocity(velocity) {
            this.comp_controllerTransformTarget.setVelocity(velocity);
        }
    }, {
        key: "setFov",


        /**
         * setFov
         * @param {number} fov
         */
        value: function setFov(fov) {
            this.comp_projection.setFov(fov);
        }
    }, {
        key: "getFov",

        /**
         * getFov
         * @returns {number}
         */
        value: function getFov() {
            return this.comp_projection.getFov();
        }
    }], [{
        key: "preventMove",


        /**
         * preventMove
         * @param {boolean} preventMove
         */
        value: function preventMove(_preventMove) {
            this._preventMove = _preventMove;
        }
    }, {
        key: "useAltKey",


        /**
         * useAltKey
         * @param {boolean} useAltKey
         */
        value: function useAltKey(_useAltKey) {
            this._useAltKey = _useAltKey;
        }
    }]);

    return SimpleCamera;
}();

exports.SimpleCamera = SimpleCamera;

global.SimpleCamera = SimpleCamera;
module.exports.SimpleCamera = SimpleCamera;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../../ComponentControllerTransformTarget.class":3,"../../ComponentKeyboardEvents.class":4,"../../ComponentMouseEvents.class":5,"../../ComponentProjection.class":6,"../../ComponentTransformTarget.class":7,"../../Component_GPU.class":8,"../../Constants":9,"../../Node.class":10}],12:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.$M16 = $M16;
exports.$V3 = $V3;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
StormM16.rotation
Copyright (C) 2007 James Coglan Sylvester.js

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/*
StormM16.inverse
Copyright (C) 2004 - Geotechnical Software Services
 
This code is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either 
version 2.1 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with this program; if not, write to the Free 
Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, 
MA  02111-1307, USA.
*/

/**
* @class
* @constructor

* @property {Float32Array} e Array with 16 values
*/
var StormM16 = exports.StormM16 = function () {
    function StormM16(elements) {
        _classCallCheck(this, StormM16);

        this.e = null;

        if (elements !== undefined && elements !== null) this.e = new Float32Array(elements);else this.e = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);
    }

    /**
    * Perform a * b and get the matrix
    * @returns {StormM16}
    * @param {StormM16|StormV3} stormM16
    */


    _createClass(StormM16, [{
        key: "x",
        value: function x(stormM16) {
            if (stormM16 instanceof StormM16) {
                return $M16([this.e[0] * stormM16.e[0] + this.e[1] * stormM16.e[4] + this.e[2] * stormM16.e[8] + this.e[3] * stormM16.e[12], this.e[0] * stormM16.e[1] + this.e[1] * stormM16.e[5] + this.e[2] * stormM16.e[9] + this.e[3] * stormM16.e[13], this.e[0] * stormM16.e[2] + this.e[1] * stormM16.e[6] + this.e[2] * stormM16.e[10] + this.e[3] * stormM16.e[14], this.e[0] * stormM16.e[3] + this.e[1] * stormM16.e[7] + this.e[2] * stormM16.e[11] + this.e[3] * stormM16.e[15], this.e[4] * stormM16.e[0] + this.e[5] * stormM16.e[4] + this.e[6] * stormM16.e[8] + this.e[7] * stormM16.e[12], this.e[4] * stormM16.e[1] + this.e[5] * stormM16.e[5] + this.e[6] * stormM16.e[9] + this.e[7] * stormM16.e[13], this.e[4] * stormM16.e[2] + this.e[5] * stormM16.e[6] + this.e[6] * stormM16.e[10] + this.e[7] * stormM16.e[14], this.e[4] * stormM16.e[3] + this.e[5] * stormM16.e[7] + this.e[6] * stormM16.e[11] + this.e[7] * stormM16.e[15], this.e[8] * stormM16.e[0] + this.e[9] * stormM16.e[4] + this.e[10] * stormM16.e[8] + this.e[11] * stormM16.e[12], this.e[8] * stormM16.e[1] + this.e[9] * stormM16.e[5] + this.e[10] * stormM16.e[9] + this.e[11] * stormM16.e[13], this.e[8] * stormM16.e[2] + this.e[9] * stormM16.e[6] + this.e[10] * stormM16.e[10] + this.e[11] * stormM16.e[14], this.e[8] * stormM16.e[3] + this.e[9] * stormM16.e[7] + this.e[10] * stormM16.e[11] + this.e[11] * stormM16.e[15], this.e[12] * stormM16.e[0] + this.e[13] * stormM16.e[4] + this.e[14] * stormM16.e[8] + this.e[15] * stormM16.e[12], this.e[12] * stormM16.e[1] + this.e[13] * stormM16.e[5] + this.e[14] * stormM16.e[9] + this.e[15] * stormM16.e[13], this.e[12] * stormM16.e[2] + this.e[13] * stormM16.e[6] + this.e[14] * stormM16.e[10] + this.e[15] * stormM16.e[14], this.e[12] * stormM16.e[3] + this.e[13] * stormM16.e[7] + this.e[14] * stormM16.e[11] + this.e[15] * stormM16.e[15]]);
            } else {
                return $M16([0.0, 0.0, 0.0, this.e[0] * stormM16.e[0] + this.e[1] * stormM16.e[1] + this.e[2] * stormM16.e[2], 0.0, 0.0, 0.0, this.e[4] * stormM16.e[0] + this.e[5] * stormM16.e[1] + this.e[6] * stormM16.e[2], 0.0, 0.0, 0.0, this.e[8] * stormM16.e[0] + this.e[9] * stormM16.e[1] + this.e[10] * stormM16.e[2], 0.0, 0.0, 0.0, this.e[12] * stormM16.e[0] + this.e[13] * stormM16.e[1] + this.e[14] * stormM16.e[2]]);
            }
        }
    }, {
        key: "transpose",

        /**
        * Get matrix transposed
        * @returns {StormM16}
        */
        value: function transpose() {
            return $M16([this.e[0], this.e[4], this.e[8], this.e[12], this.e[1], this.e[5], this.e[9], this.e[13], this.e[2], this.e[6], this.e[10], this.e[14], this.e[3], this.e[7], this.e[11], this.e[15]]);
        }
    }, {
        key: "inverse",

        /**
        * Get matrix inverted
        * @returns {StormM16}
        */
        value: function inverse() {
            var src = $M16(this.e).transpose().e;
            var tmp = new Float32Array(12);
            var dst = new Float32Array(16);
            // Calculate pairs for first 8 elements (cofactors)
            tmp[0] = src[10] * src[15];
            tmp[1] = src[11] * src[14];
            tmp[2] = src[9] * src[15];
            tmp[3] = src[11] * src[13];
            tmp[4] = src[9] * src[14];
            tmp[5] = src[10] * src[13];
            tmp[6] = src[8] * src[15];
            tmp[7] = src[11] * src[12];
            tmp[8] = src[8] * src[14];
            tmp[9] = src[10] * src[12];
            tmp[10] = src[8] * src[13];
            tmp[11] = src[9] * src[12];

            // Calculate first 8 elements (cofactors)
            dst[0] = tmp[0] * src[5] + tmp[3] * src[6] + tmp[4] * src[7];
            dst[0] -= tmp[1] * src[5] + tmp[2] * src[6] + tmp[5] * src[7];
            dst[1] = tmp[1] * src[4] + tmp[6] * src[6] + tmp[9] * src[7];
            dst[1] -= tmp[0] * src[4] + tmp[7] * src[6] + tmp[8] * src[7];
            dst[2] = tmp[2] * src[4] + tmp[7] * src[5] + tmp[10] * src[7];
            dst[2] -= tmp[3] * src[4] + tmp[6] * src[5] + tmp[11] * src[7];
            dst[3] = tmp[5] * src[4] + tmp[8] * src[5] + tmp[11] * src[6];
            dst[3] -= tmp[4] * src[4] + tmp[9] * src[5] + tmp[10] * src[6];
            dst[4] = tmp[1] * src[1] + tmp[2] * src[2] + tmp[5] * src[3];
            dst[4] -= tmp[0] * src[1] + tmp[3] * src[2] + tmp[4] * src[3];
            dst[5] = tmp[0] * src[0] + tmp[7] * src[2] + tmp[8] * src[3];
            dst[5] -= tmp[1] * src[0] + tmp[6] * src[2] + tmp[9] * src[3];
            dst[6] = tmp[3] * src[0] + tmp[6] * src[1] + tmp[11] * src[3];
            dst[6] -= tmp[2] * src[0] + tmp[7] * src[1] + tmp[10] * src[3];
            dst[7] = tmp[4] * src[0] + tmp[9] * src[1] + tmp[10] * src[2];
            dst[7] -= tmp[5] * src[0] + tmp[8] * src[1] + tmp[11] * src[2];

            // Calculate pairs for second 8 elements (cofactors)
            tmp[0] = src[2] * src[7];
            tmp[1] = src[3] * src[6];
            tmp[2] = src[1] * src[7];
            tmp[3] = src[3] * src[5];
            tmp[4] = src[1] * src[6];
            tmp[5] = src[2] * src[5];
            tmp[6] = src[0] * src[7];
            tmp[7] = src[3] * src[4];
            tmp[8] = src[0] * src[6];
            tmp[9] = src[2] * src[4];
            tmp[10] = src[0] * src[5];
            tmp[11] = src[1] * src[4];

            // Calculate second 8 elements (cofactors)
            dst[8] = tmp[0] * src[13] + tmp[3] * src[14] + tmp[4] * src[15];
            dst[8] -= tmp[1] * src[13] + tmp[2] * src[14] + tmp[5] * src[15];
            dst[9] = tmp[1] * src[12] + tmp[6] * src[14] + tmp[9] * src[15];
            dst[9] -= tmp[0] * src[12] + tmp[7] * src[14] + tmp[8] * src[15];
            dst[10] = tmp[2] * src[12] + tmp[7] * src[13] + tmp[10] * src[15];
            dst[10] -= tmp[3] * src[12] + tmp[6] * src[13] + tmp[11] * src[15];
            dst[11] = tmp[5] * src[12] + tmp[8] * src[13] + tmp[11] * src[14];
            dst[11] -= tmp[4] * src[12] + tmp[9] * src[13] + tmp[10] * src[14];
            dst[12] = tmp[2] * src[10] + tmp[5] * src[11] + tmp[1] * src[9];
            dst[12] -= tmp[4] * src[11] + tmp[0] * src[9] + tmp[3] * src[10];
            dst[13] = tmp[8] * src[11] + tmp[0] * src[8] + tmp[7] * src[10];
            dst[13] -= tmp[6] * src[10] + tmp[9] * src[11] + tmp[1] * src[8];
            dst[14] = tmp[6] * src[9] + tmp[11] * src[11] + tmp[3] * src[8];
            dst[14] -= tmp[10] * src[11] + tmp[2] * src[8] + tmp[7] * src[9];
            dst[15] = tmp[10] * src[10] + tmp[4] * src[8] + tmp[9] * src[9];
            dst[15] -= tmp[8] * src[9] + tmp[11] * src[10] + tmp[5] * src[8];

            var det = src[0] * dst[0] + src[1] * dst[1] + src[2] * dst[2] + src[3] * dst[3];

            return $M16([dst[0] * det, dst[1] * det, dst[2] * det, dst[3] * det, dst[4] * det, dst[5] * det, dst[6] * det, dst[7] * det, dst[8] * det, dst[9] * det, dst[10] * det, dst[11] * det, dst[12] * det, dst[13] * det, dst[14] * det, dst[15] * det]);
        }
    }, {
        key: "getLeft",

        /**
        * Get vector left
        * @returns {StormV3}
        */
        value: function getLeft() {
            return $V3([this.e[0], this.e[4], this.e[8]]).normalize();
        }
    }, {
        key: "getUp",

        /**
        * Get vector up
        * @returns {StormV3}
        */
        value: function getUp() {
            return $V3([this.e[1], this.e[5], this.e[9]]).normalize();
        }
    }, {
        key: "getForward",

        /**
        * Get vector forward
        * @returns {StormV3}
        */
        value: function getForward() {
            return $V3([this.e[2], this.e[6], this.e[10]]).normalize();
        }
    }, {
        key: "setRotation",

        /**
        * Set rotation in axis
        * @returns {StormM16}
        * @param {number} radians Radians
        * @param {String} [relative=true] false for absolute rotation
        * @param {StormV3} [axis=$V3([0.0,1.0,0.0])]
        */
        value: function setRotation(radians, relative, axis) {
            if (axis !== undefined && axis !== null && axis.e[0] !== null) {
                if (relative === undefined || relative === null || relative === true) return this.x($M16([1.0, 0.0, 0.0, 0.0, 0.0, Math.cos(radians), -Math.sin(radians), 0.0, 0.0, Math.sin(radians), Math.cos(radians), 0.0, 0.0, 0.0, 0.0, 1.0]));else return $M16([1.0, 0.0, 0.0, 0.0, 0.0, Math.cos(radians), -Math.sin(radians), 0.0, 0.0, Math.sin(radians), Math.cos(radians), 0.0, 0.0, 0.0, 0.0, 1.0]);
            }
            if (axis !== undefined && axis !== null && axis.e[1] !== null) {
                if (relative === undefined || relative === null || relative === true) return this.x($M16([Math.cos(radians), 0.0, Math.sin(radians), 0.0, 0.0, 1.0, 0.0, 0.0, -Math.sin(radians), 0.0, Math.cos(radians), 0.0, 0.0, 0.0, 0.0, 1.0]));else return $M16([Math.cos(radians), 0.0, Math.sin(radians), 0.0, 0.0, 1.0, 0.0, 0.0, -Math.sin(radians), 0.0, Math.cos(radians), 0.0, 0.0, 0.0, 0.0, 1.0]);
            }
            if (axis !== undefined && axis !== null && axis.e[2] !== null) {
                if (relative === undefined || relative === null || relative === true) return this.x($M16([Math.cos(radians), -Math.sin(radians), 0.0, 0.0, Math.sin(radians), Math.cos(radians), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]));else return $M16([Math.cos(radians), -Math.sin(radians), 0.0, 0.0, Math.sin(radians), Math.cos(radians), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);
            }
        }
    }, {
        key: "setRotationX",

        /**
        * Set rotation x
        * @returns {StormM16}
        * @param {number} radians Radians
        * @param {String} [relative=true] false for absolute rotation
        */
        value: function setRotationX(radians, relative) {
            return this.setRotation(radians, relative, $V3([1.0, 0.0, 0.0]));
        }
    }, {
        key: "setRotationY",

        /**
        * Set rotation y
        * @returns {StormM16}
        * @param {number} radians Radians
        * @param {String} [relative=true] false for absolute rotation
        */
        value: function setRotationY(radians, relative) {
            return this.setRotation(radians, relative, $V3([0.0, 1.0, 0.0]));
        }
    }, {
        key: "setRotationZ",

        /**
        * Set rotation z
        * @returns {StormM16}
        * @param {number} radians Radians
        * @param {String}[relative=true] false for absolute rotation
        */
        value: function setRotationZ(radians, relative) {
            return this.setRotation(radians, relative, $V3([0.0, 0.0, 1.0]));
        }
    }, {
        key: "setScale",

        /**
        * Set scale in axis
        * @returns {StormM16}
        * @param {number} scale Scale
        * @param {String} [relative=true] false for absolute scale
        * @param {StormV3} [axis=$V3([0.0,1.0,0.0])]
        */
        value: function setScale(scale, relative, axis) {
            if (axis !== undefined && axis !== null && axis.e[0] !== null) {
                if (relative === undefined || relative === null || relative === true) return this.x($M16([scale, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]));else return $M16([scale, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);
            }
            if (axis !== undefined && axis !== null && axis.e[1] !== null) {
                if (relative === undefined || relative === null || relative === true) return this.x($M16([1.0, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]));else return $M16([1.0, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);
            }
            if (axis !== undefined && axis !== null && axis.e[2] !== null) {
                if (relative === undefined || relative === null || relative === true) return this.x($M16([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0]));else return $M16([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0]);
            }
        }
    }, {
        key: "setScaleX",

        /**
        * Set scale x
        * @returns {StormM16}
        * @param {number} scale Scale
        * @param {String} [relative=true] false for absolute scale
        */
        value: function setScaleX(scale, relative) {
            return this.setScale(scale, relative, $V3([1.0, 0.0, 0.0]));
        }
    }, {
        key: "setScaleY",

        /**
        * Set scale y
        * @returns {StormM16}
        * @param {number} scale Scale
        * @param {String} [relative=true] false for absolute scale
        */
        value: function setScaleY(scale, relative) {
            return this.setScale(scale, relative, $V3([0.0, 1.0, 0.0]));
        }
    }, {
        key: "setScaleZ",

        /**
        * Set scale z
        * @returns {StormM16}
        * @param {number} scale Scale
        * @param {String}[relative=true] false for absolute scale
        */
        value: function setScaleZ(scale, relative) {
            return this.setScale(scale, relative, $V3([0.0, 0.0, 1.0]));
        }
    }, {
        key: "getPosition",

        /**
        * Get the position vector
        * @returns {StormV3}
        */
        value: function getPosition() {
            // return V3
            return $V3([this.e[3], this.e[7], this.e[11]]);
        }
    }, {
        key: "setPosition",

        /**
        * Set the position vector
        * @returns {StormM16}
        * @param {StormV3} vec Position vector
        */
        value: function setPosition(vec) {
            // return M16
            this.e[3] = vec.e[0];
            this.e[7] = vec.e[1];
            this.e[11] = vec.e[2];
            return this;
        }
    }], [{
        key: "makeLookAt",

        /**
        * Look at
        * @returns {StormM16}
        * @param {number} ex Eye x
        * @param {number} ey Eye y
        * @param {number} ez Eye z
        * @param {number} cx Center x
        * @param {number} cy Center y
        * @param {number} cz Center z
        * @param {number} ux Up axis x
        * @param {number} uy Up axis y
        * @param {number} uz Up axis z
        */
        value: function makeLookAt(ex, ey, ez, cx, cy, cz, ux, uy, uz) {
            var eye = $V3([ex, ey, ez]);
            var center = $V3([cx, cy, cz]);
            var up = $V3([ux, uy, uz]);

            var mag = void 0;

            var z = eye.subtract(center).normalize();
            var x = up.cross(z).normalize();
            var y = z.cross(x).normalize();

            var m = $M16([x.e[0], x.e[1], x.e[2], 0, y.e[0], y.e[1], y.e[2], 0, z.e[0], z.e[1], z.e[2], 0, 0, 0, 0, 1]);

            var t = $M16([1, 0, 0, -ex, 0, 1, 0, -ey, 0, 0, 1, -ez, 0, 0, 0, 1]);
            return m.x(t);
        }
    }, {
        key: "setPerspectiveProjection",
        value: function setPerspectiveProjection(fovy, aspect, znear, zfar) {
            var top = Math.tan(fovy * Math.PI / 360) * znear;
            var bottom = -top;
            var left = aspect * bottom;
            var right = aspect * top;

            var X = 2 * znear / (right - left);
            var Y = 2 * znear / (top - bottom);
            var A = (right + left) / (right - left);
            var B = (top + bottom) / (top - bottom);
            var C = -(zfar + znear) / (zfar - znear);
            var D = -2 * zfar * znear / (zfar - znear);

            return $M16([X, 0, A, 0, 0, Y, B, 0, 0, 0, C, D, 0, 0, -1, 0]);
        }
    }, {
        key: "setOrthographicProjection",
        value: function setOrthographicProjection(left, right, bottom, top, znear, zfar) {
            var tx = -(right + left) / (right - left);
            var ty = -(top + bottom) / (top - bottom);
            var tz = -(zfar + znear) / (zfar - znear);

            return $M16([2 / (right - left), 0, 0, tx, 0, 2 / (top - bottom), 0, ty, 0, 0, -2 / (zfar - znear), tz, 0, 0, 0, 1]);
        }
    }]);

    return StormM16;
}();
/**
 * @returns {StormM16}
 * @param {Array<number>|Float32Array} elements Array with 16 values
 */


function $M16(elements) {
    return new StormM16(elements);
}
global.StormM16 = StormM16;
module.exports.StormM16 = StormM16;

global.$M16 = $M16;
module.exports.$M16 = $M16;

/**
* @class
* @constructor

* @property {Float32Array} e Array with 3 values
*/

var StormV3 = exports.StormV3 = function () {
    function StormV3(elements) {
        _classCallCheck(this, StormV3);

        this.e = new Float32Array(elements);
    }

    /**
    * Perform a + b and get the vector
    * @returns {StormV3}
    * @param {StormV3} vector Vector b
    */


    _createClass(StormV3, [{
        key: "add",
        value: function add(vector) {
            return $V3([this.e[0] + vector.e[0], this.e[1] + vector.e[1], this.e[2] + vector.e[2]]);
        }
    }, {
        key: "cross",

        /**
        * Perform a cross b and get the vector
        * @returns {StormV3}
        * @param {StormV3} vector Vector b
        */
        value: function cross(vector) {
            return $V3([this.e[1] * vector.e[2] - this.e[2] * vector.e[1], this.e[2] * vector.e[0] - this.e[0] * vector.e[2], this.e[0] * vector.e[1] - this.e[1] * vector.e[0]]);
        }
    }, {
        key: "distance",

        /**
        * Get the distance between a and b
        * @returns {number}
        * @param {StormV3} vector Vector b
        */
        value: function distance(vector) {
            return Math.sqrt((this.e[0] - vector.e[0]) * (this.e[0] - vector.e[0]) + (this.e[1] - vector.e[1]) * (this.e[1] - vector.e[1]) + (this.e[2] - vector.e[2]) * (this.e[2] - vector.e[2]));
        }
    }, {
        key: "dot",

        /**
        * Get the dot product between a and b
        * @returns {number}
        * @param {StormV3} vector Vector b
        */
        value: function dot(vector) {
            return this.e[0] * vector.e[0] + this.e[1] * vector.e[1] + this.e[2] * vector.e[2];
        }
    }, {
        key: "equal",

        /**
        * Check if a and b have the same values
        * @returns {boolean}
        * @param {StormV3} vector Vector b
        */
        value: function equal(vector) {
            return this.e[0] === vector.e[0] && this.e[1] === vector.e[1] && this.e[2] === vector.e[2];
        }
    }, {
        key: "modulus",

        /**
        * Get the length of the vector
        * @returns {number}
        */
        value: function modulus() {
            return Math.sqrt(this.sumComponentSqrs());
        }
    }, {
        key: "sumComponentSqrs",
        value: function sumComponentSqrs() {
            var V3 = this.sqrComponents();

            return V3[0] + V3[1] + V3[2];
        }
    }, {
        key: "sqrComponents",
        value: function sqrComponents() {
            var V3 = new Float32Array(3);
            V3.set([this.e[0] * this.e[0], this.e[1] * this.e[1], this.e[2] * this.e[2]]);

            return V3;
        }
    }, {
        key: "x",

        /**
        * Perform a * b and get the vector
        * @returns {StormV3|StormM16}
        * @param {StormV3|StormM16|number} value Value b (Vector|Matrix|Float)
        */
        value: function x(value) {
            var typeVector = value instanceof StormV3;
            var typeMatrix = value instanceof StormM16;
            if (typeVector) {
                return $V3([this.e[0] * value.e[0], this.e[1] * value.e[1], this.e[2] * value.e[2]]);
            } else if (typeMatrix) {
                var thisV3 = $M16([1.0, 0.0, 0.0, this.e[0], 0.0, 1.0, 0.0, this.e[1], 0.0, 0.0, 1.0, this.e[2], 0.0, 0.0, 0.0, 1.0]);
                return $M16([thisV3.e[0] + 0.0 + 0.0 + 0.0, 0.0 + thisV3.e[1] + 0.0 + 0.0, 0.0 + 0.0 + thisV3.e[2] + 0.0, thisV3.e[0] * value.e[0] + thisV3.e[1] * value.e[1] + thisV3.e[2] * value.e[2] + thisV3.e[3], thisV3.e[4] + 0.0 + 0.0 + 0.0, 0.0 + thisV3.e[5] + 0.0 + 0.0, 0.0 + 0.0 + thisV3.e[6] + 0.0, thisV3.e[4] * value.e[0] + thisV3.e[5] * value.e[1] + thisV3.e[6] * value.e[2] + thisV3.e[7], thisV3.e[8] + 0.0 + 0.0 + 0.0, 0.0 + thisV3.e[9] + 0.0 + 0.0, 0.0 + 0.0 + thisV3.e[10] + 0.0, thisV3.e[8] * value.e[0] + thisV3.e[9] * value.e[1] + thisV3.e[10] * value.e[2] + thisV3.e[11], thisV3.e[12] + 0.0 + 0.0 + 0.0, 0.0 + thisV3.e[13] + 0.0 + 0.0, 0.0 + 0.0 + thisV3.e[14] + 0.0, thisV3.e[12] * value.e[0] + thisV3.e[13] * value.e[1] + thisV3.e[14] * value.e[2] + thisV3.e[15] * value.e[15]]);
            } else return $V3([this.e[0] * value, this.e[1] * value, this.e[2] * value]);
        }
    }, {
        key: "reflect",

        /**
        * Get the reflected vector with b
        * @returns {StormV3}
        * @param {StormV3} vector Vector b
        */
        value: function reflect(vector) {
            var I = $V3([this.e[0], this.e[1], this.e[2]]);
            var N = $V3([vector.e[0], vector.e[1], vector.e[2]]);

            var vec = N.x(I.dot(N));
            vec = vec.x(2.0);
            vec = I.subtract(vec);

            return vec;
        }
    }, {
        key: "subtract",

        /**
        * Perform a - b and get the vector
        * @returns {StormV3}
        * @param {StormV3} vector Vector b
        */
        value: function subtract(vector) {
            return $V3([this.e[0] - vector.e[0], this.e[1] - vector.e[1], this.e[2] - vector.e[2]]);
        }
    }, {
        key: "normalize",

        /**
        * Get the vector normalized
        * @returns {StormV3}
        */
        value: function normalize() {
            var inverse = 1.0 / this.modulus();

            return $V3([this.e[0] * inverse, this.e[1] * inverse, this.e[2] * inverse]);
        }
    }]);

    return StormV3;
}();
/**
* @returns {StormV3}
* @param {Array<number>} elements Array with 3 values
*/


function $V3(elements) {
    return new StormV3(elements);
}
global.StormV3 = StormV3;
module.exports.StormV3 = StormV3;

global.$V3 = $V3;
module.exports.$V3 = $V3;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],13:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Utils = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require("webclgl");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
*/
var Utils = exports.Utils = function () {
    function Utils() {
        _classCallCheck(this, Utils);

        window.requestAnimFrame = function () {
            return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
                window.setTimeout(callback, 1000 / 60);
            };
        }();
    }

    /**
    * Get HTMLCanvasElement from Uint8Array
    * @param {Uint8Array} uint8arr
    * @param {int} width
    * @param {int} height
     * @returns {HTMLCanvasElement}
    */


    _createClass(Utils, [{
        key: "getImageFromCanvas",

        /**
         * @callback Utils~getImageFromCanvas~onload
         * @param {HTMLImageElement} img
         */
        /**
        * Get HTMLImageElement from canvas
        * @param {HTMLCanvasElement} oldCanvas
        * @param {Utils~getImageFromCanvas~onload} onload
        */
        value: function getImageFromCanvas(oldCanvas, onload) {
            var imagen = document.createElement('img');
            imagen.onload = function () {
                onload(imagen);
            };
            imagen.src = oldCanvas.toDataURL();
        }
    }, {
        key: "pack",


        /**
         * Angle between two vectors viewing from top
         * @returns {number}
         * @param {StormV3} vectorA
         * @param {StormV3} vectorB
          Utils.prototype.angle = function(vA, vB) {
            let vAA = vA.normalize();
            let vBB = vB.normalize();
              let escalarProduct = Math.acos((vAA.e[0]*vBB.e[0])+(vAA.e[1]*vBB.e[1])+(vAA.e[2]*vBB.e[2]));
              let vCC = vAA.cross(vBB);
            //console.log(vCC.e[0]+" "+vCC.e[1]+" "+vCC.e[2]);
              if(vCC.e[1] == 1) {
                escalarProduct = (Math.PI+escalarProduct);
            }
              return escalarProduct;
        };*/

        /**
        * Pack 1float (0.0-1.0) to 4float rgba (0.0-1.0, 0.0-1.0, 0.0-1.0, 0.0-1.0)*
        * @param {number} value
        * @returns {Array<number>}
        *
        */
        value: function pack(value) {
            var bias = [1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0];

            var r = value;
            var g = Utils.fract(r * 255.0);
            var b = Utils.fract(g * 255.0);
            var a = Utils.fract(b * 255.0);
            var colour = [r, g, b, a];

            var dd = [colour[1] * bias[0], colour[2] * bias[1], colour[3] * bias[2], colour[3] * bias[3]];

            return [colour[0] - dd[0], colour[1] - dd[1], colour[2] - dd[2], colour[3] - dd[3]];
        }
    }, {
        key: "unpack",

        /**
        * Unpack 4float rgba (0.0-1.0, 0.0-1.0, 0.0-1.0, 0.0-1.0) to 1float (0.0-1.0)
        * @param {Array<number>} value
         * @returns {number}
        */
        value: function unpack(value) {
            var bitShifts = [1.0, 1.0 / 255.0, 1.0 / (255.0 * 255.0), 1.0 / (255.0 * 255.0 * 255.0)];
            return Utils.dot4(value, bitShifts);
        }
    }], [{
        key: "getCanvasFromUint8Array",
        value: function getCanvasFromUint8Array(uint8arr, width, height) {
            var e = document.createElement('canvas');
            e.width = width;
            e.height = height;
            var ctx2D = e.getContext("2d");
            var image = ctx2D.createImageData(width, height);
            for (var i = 0; i < image.data.length; i++) {
                image.data[i] = uint8arr[i];
            }ctx2D.putImageData(image, 0, 0);

            return e;
        }
    }, {
        key: "getUint8ArrayFromHTMLImageElement",


        /**
        * Get Uint8Array from HTMLImageElement
        * @param {HTMLImageElement} imageElement
         * @returns {Uint8ClampedArray}
        */
        value: function getUint8ArrayFromHTMLImageElement(imageElement) {
            var e = document.createElement('canvas');
            e.width = imageElement.width;
            e.height = imageElement.height;
            var ctx2D_tex = e.getContext("2d");
            ctx2D_tex.drawImage(imageElement, 0, 0);
            var arrayTex = ctx2D_tex.getImageData(0, 0, imageElement.width, imageElement.height);

            return arrayTex.data;
        }
    }, {
        key: "getVector",


        /**
        * Get random vector from vecNormal with deviation in degrees
        * @param {StormV3} vecNormal
        * @param {number} degrees
         * @returns {StormV3}
        */
        value: function getVector(vecNormal, degrees) {
            var ob = Utils.cartesianToSpherical(vecNormal);
            var angleLat = ob.lat;
            var angleLng = ob.lng;

            var desvLat = Math.random() * 180.0 - 90.0;
            var desvLng = Math.random() * 180.0 - 90.0;
            angleLat += degrees * desvLat;
            angleLng += degrees * desvLng;

            return Utils.sphericalToCartesian(1.0, angleLat, angleLng);
        }
    }, {
        key: "getVectorGLSLFunctionString",

        /**
        * Get random vector from vecNormal with deviation in degrees (GLSL)
        * @returns {String}
        */
        value: function getVectorGLSLFunctionString() {
            return 'vec3 getVector(vec3 vecNormal, float degrees, vec2 vecNoise) {\n' + 'vec3 ob = cartesianToSpherical(vecNormal);' + 'float angleLat = ob.y;' + 'float angleLng = ob.z;' + 'float desvLat = (vecNoise.x*180.0)-90.0;' + 'float desvLng = (vecNoise.y*180.0)-90.0;' + 'angleLat += (degrees*desvLat);' + 'angleLng += (degrees*desvLng);' + 'return sphericalToCartesian(vec3(1.0, angleLat, angleLng));' + '}\n';
        }
    }, {
        key: "cartesianToSpherical",


        /**
         * cartesianToSpherical
         * @param {StormV3} vec
         * @returns {Object}
         * @example
         * $V3([1,0,0])  return {radius: 1, lat: 90, lng: 0}
         * $V3([0,0,1])  return {radius: 1, lat: 90, lng: 90}
         * $V3([-1,0,0]) return {radius: 1, lat: 90, lng: 180}
         * $V3([0,0,-1]) return {radius: 1, lat: 90, lng: -90}
         */
        value: function cartesianToSpherical(vec) {
            var r = Math.sqrt(vec.e[0] * vec.e[0] + vec.e[1] * vec.e[1] + vec.e[2] * vec.e[2]);

            var angleLat = Utils.radToDeg(Math.acos(vec.e[1] / r));
            var angleLng = Utils.radToDeg(Math.atan2(vec.e[2], vec.e[0]));

            return { "radius": r,
                "lat": angleLat,
                "lng": angleLng };
        }
    }, {
        key: "cartesianToSphericalGLSLFunctionString",

        /**
         * cartesianToSpherical (GLSL)
        * @returns {String}
        */
        value: function cartesianToSphericalGLSLFunctionString() {
            return 'vec3 cartesianToSpherical(vec3 vect) {\n' + 'float r = sqrt(vect.x*vect.x + vect.y*vect.y + vect.z*vect.z);' + 'float angleLat = radToDeg(acos(vect.y/r));' + 'float angleLng = radToDeg(atan(vect.z, vect.x));' + 'return vec3(r, angleLat, angleLng);' + '}\n';
        }
    }, {
        key: "sphericalToCartesian",


        /**
         * sphericalToCartesian
         * @param {number} radius
         * @param {number} lat Lat in degrees
         * @param {number} lng Lng in degrees
         * @returns {StormV3}
         * @example
         * (1.0, 90.0, 0.0).e) return $V3([1,0,0])
         * (1.0, 90.0, 90.0).e) return $V3([0,0,1])
         * (1.0, 90.0, 180.0).e) return $V3([-1,0,0])
         * (1.0, 90.0, -90.0).e) return $V3([0,0,-1])
         **/
        value: function sphericalToCartesian(radius, lat, lng) {
            var r = radius;
            var angleLat = Utils.degToRad(lat);
            var angleLng = Utils.degToRad(lng);

            var x = r * Math.sin(angleLat) * Math.cos(angleLng);
            var z = r * Math.sin(angleLat) * Math.sin(angleLng);
            var y = r * Math.cos(angleLat);

            return new StormV3([x, y, z]);
        }
    }, {
        key: "sphericalToCartesianGLSLFunctionString",

        /**
         * sphericalToCartesian (GLSL)
        * @returns {String}
        */
        value: function sphericalToCartesianGLSLFunctionString() {
            return 'vec3 sphericalToCartesian(vec3 vect) {\n' + 'float r = vect.x;' + 'float angleLat = degToRad(vect.y);' + 'float angleLng = degToRad(vect.z);' + 'float x = r*sin(angleLat)*cos(angleLng);' + 'float z = r*sin(angleLat)*sin(angleLng);' + 'float y = r*cos(angleLat);' + 'return vec3(x,y,z);' + '}\n';
        }
    }, {
        key: "refract",


        /**
        * Refract
        * @param {StormV3} V
        * @param {StormV3} N
        * @param {number} n1 Refract index way 1
        * @param {number} n2 Refract index way 2
         * @returns {StormV3}
        */
        value: function refract(V, N, n1, n2) {
            var refrIndex = n1 / n2;
            var cosI = N.dot(V) * -1.0;
            var cosT2 = 1.0 - refrIndex * refrIndex * (1.0 - cosI * cosI);
            var vv = V.x(refrIndex);
            return vv.add(N.x(refrIndex * cosI - Math.sqrt(cosT2)));
        }
    }, {
        key: "degToRad",


        /**
        * Degrees to radians. Full circle = 360 degrees.
        * @param {number} degrees
         * @returns {number}
        */
        value: function degToRad(degrees) {
            return degrees * 3.14159 / 180;
        }
    }, {
        key: "degToRadGLSLFunctionString",

        /**
         * Degrees to radians. Full circle = 360 degrees. (GLSL)
        * @returns {String}
        */
        value: function degToRadGLSLFunctionString() {
            return 'float degToRad(float deg) {' + 'return (deg*3.14159)/180.0;' + '}';
        }
    }, {
        key: "radToDeg",


        /**
        * Radians to degrees
        * @param {number} radians
         * @returns {number}
        */
        value: function radToDeg(radians) {
            return radians * (180 / 3.14159);
        }
    }, {
        key: "radToDegGLSLFunctionString",

        /**
         * Radians to degrees (GLSL)
        * @returns {String}
        */
        value: function radToDegGLSLFunctionString() {
            return 'float radToDeg(float rad) {' + 'return rad*(180.0/3.14159);' + '}';
        }
    }, {
        key: "hexToRgb",


        /**
         * hexToRgb
         * @param {String} hex
         * @returns  {Array<number>} rgb values from 0 to 255
         */
        value: function hexToRgb(hex) {
            // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
    }, {
        key: "rgbToHex",

        /**
         * rgbToHex
         * @param {Array<number>} rgb values from 0 to 255
         * @returns {String}
         */
        value: function rgbToHex(rgb) {
            var rgbVal = rgb[2] | rgb[1] << 8 | rgb[0] << 16;
            return '#' + (0x1000000 + rgbVal).toString(16).slice(1);
        }
    }, {
        key: "invsqrt",


        /**
        * Inverse sqrt
        * @param {number} value
         * @returns {number}
        */
        value: function invsqrt(value) {
            return 1.0 / value;
        }
    }, {
        key: "smoothstep",


        /**
        * Smoothstep
        * @param {number} edge0
        * @param {number} edge1
        * @param {number} current
         * @returns {number}
        */
        value: function smoothstep(edge0, edge1, current) {
            if (current < edge0) return 0;
            if (current >= edge1) return 1;
            if (edge0 === edge1) return -1;
            var p = (current - edge0) / (edge1 - edge0);

            return p * p * (3 - 2 * p);
        }
    }, {
        key: "dot4",


        /**
        * Dot product vector4float
        * @param {Array<number>} vector4A Vector a
        * @param {Array<number>} vector4B Vector b
         * @returns {number}
        */
        value: function dot4(vector4A, vector4B) {
            return vector4A[0] * vector4B[0] + vector4A[1] * vector4B[1] + vector4A[2] * vector4B[2] + vector4A[3] * vector4B[3];
        }
    }, {
        key: "fract",


        /**
        * Compute the fractional part of the argument. Example: fract(pi)=0.14159265...
        * @param {number} value
         * @returns {number}
        */
        value: function fract(value) {
            return value > 0 ? value - Math.floor(value) : value - Math.ceil(value);
        }
    }, {
        key: "packGLSLFunctionString",

        /**
        * Get pack GLSL function string
        * @returns {String}
        */
        value: function packGLSLFunctionString() {
            return 'vec4 pack (float depth) {' + 'const vec4 bias = vec4( 1.0 / 255.0,' + '1.0 / 255.0,' + '1.0 / 255.0,' + '0.0);' + 'float r = depth;' + 'float g = fract(r * 255.0);' + 'float b = fract(g * 255.0);' + 'float a = fract(b * 255.0);' + 'vec4 colour = vec4(r, g, b, a);' + 'return colour - (colour.yzww * bias);' + '}';
        }
    }, {
        key: "unpackGLSLFunctionString",

        /**
        * Get unpack GLSL function string
        * @returns {String}
        */
        value: function unpackGLSLFunctionString() {
            return 'float unpack (vec4 colour) {' + 'const vec4 bitShifts = vec4(1.0,' + '1.0 / 255.0,' + '1.0 / (255.0 * 255.0),' + '1.0 / (255.0 * 255.0 * 255.0));' + 'return dot(colour, bitShifts);' + '}';
        }
    }, {
        key: "rayTraversalInitSTR",
        value: function rayTraversalInitSTR() {
            return '' + 'float wh = ceil(sqrt(uResolution*uResolution*uResolution));\n' + 'float cs = uGridsize/uResolution;\n' + // cell size
            'float chs = cs/2.0;\n' + // cell size
            'float texelSize = 1.0/(wh-1.0);\n' + // 1.0/(wh-1.0)??

            // Fast Voxel Traversal Algorithm for Ray Tracing. John Amanatides & Andrew Woo.
            // http://www.cse.chalmers.se/edu/course/TDA361/grid.pdf
            // More info:
            // http://www.clockworkcoders.com/oglsl/rt/gpurt3.htm
            'vec3 gl = vec3(-(uGridsize/2.0), -(uGridsize/2.0), -(uGridsize/2.0));\n' + 'vec3 _r = vec3(uGridsize, uGridsize, uGridsize);\n' + 'vec3 _rRes = vec3(uResolution, uResolution, uResolution);\n' + 'vec3 _len = _r/_rRes;\n' + 'vec3 worldToVoxel(vec3 world) {\n' + 'vec3 ijk = (world - gl) / _len;\n' + // (1.0-(-1.0)) / (2/64) = 64
            'ijk = vec3(floor(ijk.x), floor(ijk.y), floor(ijk.z));\n' + 'return ijk;\n' + '}\n' + 'float voxelToWorldX(float x) {return x * _len.x + gl.x;}\n' + // 64*(2/64)+(-1.0) = 1.0
            'float voxelToWorldY(float y) {return y * _len.y + gl.y;}\n' + 'float voxelToWorldZ(float z) {return z * _len.z + gl.z;}\n';
        }
    }, {
        key: "rayTraversalSTR",
        value: function rayTraversalSTR(resolution) {
            return '' + 'vec2 getId(vec3 voxel) {\n' + 'int tex3dId = (int(voxel.y)*(int(uResolution)*int(uResolution)))+(int(voxel.z)*(int(uResolution)))+int(voxel.x);\n' + 'float num = float(tex3dId)/wh;\n' + 'float col = fract(num)*wh;\n' + 'float row = floor(num);\n' + 'return vec2(col*texelSize, row*texelSize);\n' + '}\n' + 'vec4 getVoxel_Color(vec2 texVec, vec3 voxel, vec3 RayOrigin) {\n' + 'vec4 rgba = vec4(0.0,0.0,0.0,0.0);\n' + 'vec4 texture = sampler_voxelColor[vec2(texVec.x, texVec.y)];\n' + 'if(texture.a/255.0 > 0.5) {\n' + // existen triángulos dentro?
            'rgba = vec4(texture.rgb/255.0,distance(vec3(voxelToWorldX(voxel.x), voxelToWorldX(voxel.y), voxelToWorldX(voxel.z)),RayOrigin));\n' + '}\n' + 'return rgba;\n' + '}\n' + 'vec4 getVoxel_Pos(vec2 texVec) {\n' + 'vec4 rgba = vec4(0.0,0.0,0.0,0.0);\n' + 'vec4 texture = sampler_voxelPos[vec2(texVec.x, texVec.y)];\n' +
            //distance(vec3(voxelToWorldX(voxel.x), voxelToWorldX(voxel.y), voxelToWorldX(voxel.z)),RayOrigin)
            'rgba = vec4( ((texture.xyz/255.0)*uGridsize)-(uGridsize/2.0), 1.0);\n' + 'return rgba;\n' + '}\n' + 'vec4 getVoxel_Normal(vec2 texVec) {\n' + 'vec4 rgba = vec4(0.0,0.0,0.0,0.0);\n' + 'vec4 texture = sampler_voxelNormal[vec2(texVec.x, texVec.y)];\n' + 'rgba = vec4(((texture.rgb/255.0)*2.0)-1.0, 1.0);\n' + 'return rgba;\n' + '}\n' + 'struct RayTraversalResponse {' + 'vec4 voxelColor;' + 'vec4 voxelPos;' + 'vec4 voxelNormal;' + '};' + 'RayTraversalResponse rayTraversal(vec3 RayOrigin, vec3 RayDir) {\n' + 'vec4 fvoxelColor = vec4(0.0, 0.0, 0.0, 0.0);' + 'vec4 fvoxelPos = vec4(0.0, 0.0, 0.0, 0.0);' + 'vec4 fvoxelNormal = vec4(0.0, 0.0, 0.0, 0.0);' + 'vec3 voxel = worldToVoxel(RayOrigin);' + 'vec3 _dir = normalize(RayDir);' + 'vec3 tMax;' + 'if(RayDir.x < 0.0) tMax.x = (voxelToWorldX(voxel.x)-RayOrigin.x)/RayDir.x;' + 'if(RayDir.x > 0.0) tMax.x = (voxelToWorldX(voxel.x+1.0)-RayOrigin.x)/RayDir.x;' + 'if(RayDir.y < 0.0) tMax.y = (voxelToWorldY(voxel.y)-RayOrigin.y)/RayDir.y;' + 'if(RayDir.y < 0.0) tMax.y = (voxelToWorldY(voxel.y+1.0)-RayOrigin.y)/RayDir.y;' + 'if(RayDir.z < 0.0) tMax.z = (voxelToWorldZ(voxel.z)-RayOrigin.z)/RayDir.z;' + 'if(RayDir.z < 0.0) tMax.z = (voxelToWorldZ(voxel.z+1.0)-RayOrigin.z)/RayDir.z;' + 'float tDeltaX = _r.x/abs(RayDir.x);' + // hasta qué punto se debe avanzar en la dirección del rayo antes de que nos encontramos con un nuevo voxel en la dirección x
            'float tDeltaY = _r.y/abs(RayDir.y);' + 'float tDeltaZ = _r.z/abs(RayDir.z);' + 'float stepX = 1.0; float stepY = 1.0; float stepZ = 1.0;\n' + 'float outX = _r.x; float outY = _r.y; float outZ = _r.z;\n' + 'if(RayDir.x < 0.0) {stepX = -1.0; outX = -1.0;}' + 'if(RayDir.y < 0.0) {stepY = -1.0; outY = -1.0;}' + 'if(RayDir.z < 0.0) {stepZ = -1.0; outZ = -1.0;}' + 'vec4 color = vec4(0.0,0.0,0.0,0.0);\n' + 'bool c1; bool c2; bool c3; bool isOut;' + 'vec2 vid;' + 'for(int c = 0; c < ' + resolution + '*2; c++) {\n' + 'c1 = bool(tMax.x < tMax.y);' + 'c2 = bool(tMax.x < tMax.z);' + 'c3 = bool(tMax.y < tMax.z);' + 'isOut = false;' + 'if (c1 && c2) {' + 'voxel.x += stepX;' + 'if(voxel.x==outX) isOut=true;' + 'tMax.x += tDeltaX;' + '} else if(( (c1 && !c2) || (!c1 && !c3) )) {' + 'voxel.z += stepZ;' + 'if(voxel.z==outZ) isOut=true;' + 'tMax.z += tDeltaZ;' + '} else if(!c1 && c3) {' + 'voxel.y += stepY;' + 'if(voxel.y==outY) isOut=true;' + 'tMax.y += tDeltaY;' + '}' + 'if(isOut == true) break;\n' + 'else {' + 'if((voxel.x >= 0.0 && voxel.x <= _rRes.x && voxel.y >= 0.0 && voxel.y <= _rRes.y && voxel.z >= 0.0 && voxel.z <= _rRes.z)) {;\n' + 'vid = getId(voxel);' + 'vec4 vcc = getVoxel_Color(vid, voxel, RayOrigin);' + 'if(vcc.a != 0.0) {' + 'fvoxelColor = vcc;' + 'break;\n' + '}' + '}' + '}' + '}' + 'fvoxelPos = getVoxel_Pos(vid);' + 'fvoxelNormal = getVoxel_Normal(vid);' + 'return RayTraversalResponse(fvoxelColor, fvoxelPos, fvoxelNormal);' + '}\n';
        }
    }, {
        key: "isPowerOfTwo",
        value: function isPowerOfTwo(x) {
            return (x & x - 1) === 0;
        }
    }, {
        key: "nextHighestPowerOfTwo",
        value: function nextHighestPowerOfTwo(x) {
            --x;
            for (var i = 1; i < 32; i <<= 1) {
                x = x | x >> i;
            }
            return x + 1;
        }
    }, {
        key: "getElementPosition",
        value: function getElementPosition(element) {
            var elem = element,
                tagname = "",
                x = 0,
                y = 0;

            while ((typeof elem === "undefined" ? "undefined" : _typeof(elem)) === "object" && typeof elem.tagName !== "undefined") {
                y += elem.offsetTop;
                x += elem.offsetLeft;
                tagname = elem.tagName.toUpperCase();

                if (tagname === "BODY") elem = 0;

                if ((typeof elem === "undefined" ? "undefined" : _typeof(elem)) === "object") {
                    if (_typeof(elem.offsetParent) === "object") elem = elem.offsetParent;
                }
            }

            return { x: x, y: y };
        }
    }, {
        key: "getWebGLContextFromCanvas",
        value: function getWebGLContextFromCanvas(canvas, ctxOpt) {
            return WebCLGLUtils.getWebGLContextFromCanvas(canvas, ctxOpt);
        }
    }, {
        key: "fullScreen",
        value: function fullScreen() {
            if (!document.fullscreenElement && // alternative standard method
            !document.mozFullScreenElement && !document.webkitFullscreenElement) {
                // current working methods
                if (document.documentElement.requestFullscreen) {
                    document.documentElement.requestFullscreen();
                } else if (document.documentElement.mozRequestFullScreen) {
                    document.documentElement.mozRequestFullScreen();
                } else if (document.documentElement.webkitRequestFullscreen) {
                    document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
            } else {
                if (document.cancelFullScreen) {
                    document.cancelFullScreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.webkitCancelFullScreen) {
                    document.webkitCancelFullScreen();
                }
            }
        }
    }]);

    return Utils;
}();

global.Utils = Utils;
module.exports.Utils = Utils;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"webclgl":1}]},{},[11]);
