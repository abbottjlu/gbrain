import {Component} from "./Component.class";
import {Constants} from "./Constants";

/**
* @class
* @constructor
* @param {Object} jsonIn
* @param {Node} jsonIn.node
*/
export class ComponentControllerTransformTarget extends Component {
    constructor() {
        super();

        this.type = Constants.COMPONENT_TYPES.CONTROLLER_TRANSFORM_TARGET;
        this.node = null;
        this.gl = null;


        this.comp_transformTarget = null;
        this.comp_projection = null;

        this._vel = 0.1;

        this.forward = 0;
        this.backwardE = 0;
        this.leftE = 0;
        this.rightE = 0;
        this.frontE = 0;
        this.backE = 0;

        this.leftButton = 0;
        this.middleButton = 0;
        this.rightButton = 0;

        this.leftButtonAction = "ORBIT";
        this.middleButtonAction = "PAN";
        this.rightButtonAction = "ZOOM";


        this.lastX = 0;
        this.lastY = 0;

        this.lockRotX = false;
        this.lockRotY = false;
    }
	
	/**
	 * initialize
	 * @param {Node} nod
	 * @param {WebGLRenderingContext} glCtx.
	 * @override
	 */
	initialize(nod, glCtx) {
        this.node = nod;
        this.gl = glCtx;

        this.comp_transformTarget = this.node.getComponent(Constants.COMPONENT_TYPES.TRANSFORM_TARGET);
        this.comp_projection = this.node.getComponent(Constants.COMPONENT_TYPES.PROJECTION);
	};	
	
	/**
	 * setVelocity
	 * @param {number} velocity
	 */
	setVelocity(velocity) {
        this._vel = velocity;
	};
	
	/**
	 * lockRotX
	 */
	lockRotX() {
        this.lockRotX = true;
	};
	/**
	 * unlockRotX
	 */
	unlockRotX() {
        this.lockRotX = false;
	};
	/**
	 * isLockRotX
	 * @returns {Boolean}
	 */
	isLockRotX() {
		return this.lockRotX;
	};
	
	/**
	 * lockRotY
	 */
	lockRotY() {
        this.lockRotY = true;
	};
	
	/**
	 * unlockRotY
	 */
	unlockRotY() {
        this.lockRotY = false;
	};
	
	/**
	 * isLockRotY
	 * @returns {Boolean}
	 */
	isLockRotY() {
		return this.lockRotY;
	};
	
	/**
	 * forward
	 */
	forward() {
        this.forward = 1;
	};
	
	/**
	 * backward
	 */
	backward() {
        this.backwardE = 1;
	};
	
	/**
	 * strafeLeft
	 */
	strafeLeft() {
        this.leftE = 1;
	};
	
	/**
	 * strafeRight
	 */
	strafeRight() {
        this.rightE = 1;
	};
	
	/**
	 * strafeFront
	 */
	strafeFront() {
        this.frontE = 1;
	};
	
	/**
	 * strafeBack
	 */
	strafeBack() {
        this.backE = 1;
	};
	
	/**
	 * stopForward
	 */
	stopForward() {
        this.forward = 0;
	};
	
	/**
	 * stopBackward
	 */
	stopBackward() {
        this.backwardE = 0;
	};
	
	/**
	 * stopStrafeLeft
	 */
	stopStrafeLeft() {
        this.leftE = 0;
	};
	
	/**
	 * stopStrafeRight
	 */
	stopStrafeRight() {
        this.rightE = 0;
	};
	
	/**
	 * stopStrafeFront
	 */
	stopStrafeFront() {
        this.frontE = 0;
	};
	
	/**
	 * stopStrafeBack
	 */
	stopStrafeBack() {
        this.backE = 0;
	};

	mouseDown(event) {
        this.lastX = event.screenX;
        this.lastY = event.screenY;
		
		if(event.button === 0) // LEFT BUTTON
            this.leftButton = 1;
		if(event.button === 1) // MIDDLE BUTTON
            this.middleButton = 1;
		if(event.button === 2) // RIGHT BUTTON
            this.rightButton = 1;
		
		this.updateGoal(event);
	};

	mouseUp(event) {
		if(event.button === 0) // LEFT BUTTON
            this.leftButton = 0;
		if(event.button === 1) // MIDDLE BUTTON
            this.middleButton = 0;
		if(event.button === 2) // RIGHT BUTTON
            this.rightButton = 0;
	};

	mouseMove(event) {
		if(this.leftButton === 1 || this.middleButton === 1)
            this.updateGoal(event);
	};

	/**
	 * isLeftBtnActive
	 * @returns {boolean}
	 */
	isLeftBtnActive() {
		return (this.leftButton === 1);
	};
	
	/**
	 * isMiddleBtnActive
	 * @returns {boolean}
	 */
	isMiddleBtnActive() {
		return (this.middleButton === 1);
	};
	
	/**
	 * isRightBtnActive
	 * @returns {boolean}
	 */
	isRightBtnActive() {
		return (this.rightButton === 1);
	};
	
	/**
	 * setLeftButtonAction
	 * @param {String} [action="ORBIT"]
	 */
	setLeftButtonAction(action) {
        this.leftButtonAction = action;
	};
	
	/**
	 * setMiddleButtonAction
	 * @param {String} [action="PAN"]
	 */
	setMiddleButtonAction(action) {
        this.middleButtonAction = action;
	};
	
	/**
	 * setRightButtonAction
	 * @param {String} [action="ZOOM"]
	 */
	setRightButtonAction(action) {
        this.rightButtonAction = action;
	};

	/**
	* @override
	*/
	tick(delta) {
		let dir = $V3([0.0, 0.0, 0.0]);
		if(this.forward === 1)
			dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getForward().x(-this._vel));
		if(this.backwardE === 1)
			dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getForward().x(this._vel));
		if(this.leftE === 1)
			dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getLeft().x(-this._vel));
		if(this.rightE === 1)
			dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getLeft().x(this._vel));
		if(this.backE === 1)
			dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getUp().x(-this._vel));
		if(this.frontE === 1)
			dir = dir.add(this.comp_transformTarget.getMatrix().inverse().getUp().x(this._vel));

        this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir));
        this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir));
	};

	updateGoal(event) {
		if(this.middleButton === 1) {
			if(this.middleButtonAction === "PAN")
                this.makePan(event);
			else if(this.middleButtonAction === "ORBIT")
                this.makeOrbit(event);
		} else {
			if(this.leftButtonAction === "PAN") {
				(this.comp_projection.getProjection() === Constants.PROJECTION_TYPES.PERSPECTIVE)
				    ? this.makeOrbit(event)
				    : this.makePan(event);
			} else if(this.leftButtonAction === "ORBIT")
                this.makeOrbit(event);
		}
        this.lastX = event.screenX;
        this.lastY = event.screenY;
	};
	
	makePan(event) {
		event.preventDefault(); 
		let X = this.comp_transformTarget.getMatrix().getLeft().x((this.lastX - event.screenX)*(this.comp_projection.getFov()*0.005));
		let Y = this.comp_transformTarget.getMatrix().getUp().x((this.lastY - event.screenY)*(this.comp_projection.getFov()*-0.005));
		let dir = X.add(Y.x(-1.0));
        this.comp_transformTarget.setPositionGoal(this.comp_transformTarget.getPositionGoal().add(dir));
        this.comp_transformTarget.setPositionTarget(this.comp_transformTarget.getPositionTarget().add(dir));
	};
	
	makeOrbit(event) {
		let factorRot = 0.5;
		if(this.lockRotY === false) {
			if(this.lastX > event.screenX) {
                this.comp_transformTarget.yaw(-(this.lastX - event.screenX)*factorRot);
			} else {
                this.comp_transformTarget.yaw((event.screenX - this.lastX)*factorRot);
			}
		}
		if(this.lockRotX === false) {
			if(this.lastY > event.screenY) {
                this.comp_transformTarget.pitch((this.lastY - event.screenY)*factorRot);
			} else {
                this.comp_transformTarget.pitch(-(event.screenY - this.lastY)*factorRot);
			}
		}
	};
}
global.ComponentControllerTransformTarget = ComponentControllerTransformTarget;
module.exports.ComponentControllerTransformTarget = ComponentControllerTransformTarget;