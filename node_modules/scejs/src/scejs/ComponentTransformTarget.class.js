import {Component} from "./Component.class";
import {Utils} from "./Utils.class";
import {StormM16} from "./StormMath.class";
import {Constants} from "./Constants";

/**
* @class
* @constructor
*/
export class ComponentTransformTarget extends Component {
    constructor() {
        super();
	
        this.type = Constants.COMPONENT_TYPES.TRANSFORM_TARGET;
        this.node = null;
        this.gl = null;


        this.mModelMatrix = $M16([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);

        this.targetDistance = 5.0;
        this.positionGoal = $V3([0, 0, this.targetDistance]);
        this.positionTarget = $V3([0, 0, 0]);
    }
	
	/**
	 * initialize
	 * @param {Node} nod
	 * @param {WebGLRenderingContext} glCtx.
	 * @override
	 */
	initialize(nod, glCtx) {
        this.node = nod;
        this.gl = glCtx;

        this.performMatrix();
	};	
	
	/**
	 * getMatrix
	 * @returns {StormM16}
	 */
	getMatrix() {
		return this.mModelMatrix;
	};
	
	/**
	 * setTargetDistance
	 * @param {number} distance
	 */
	setTargetDistance(distance) {
        this.targetDistance = distance;
	};
	
	/**
	 * getTargetDistance
	 * @returns {number}
	 */
	getTargetDistance() {
		return this.targetDistance;
	};
	
	/** 
	 * setPositionGoal
	 * @param {StormV3} position
	 */
	setPositionGoal(position) {
        this.positionGoal = position;
        this.performMatrix();
	};
	
	/** 
	 * getPositionGoal
	 * @returns {StormV3}
	 */
	getPositionGoal() {
		return this.positionGoal;
	};
	
	/**
	 * setPositionTarget
	 * @param {StormV3} position
	 */
	setPositionTarget(position) {
        this.positionTarget = position;
        this.performMatrix();
	};
	
	/**
	 * getPositionTarget
	 * @returns {StormV3}
	 */
	getPositionTarget() {
		return this.positionTarget;
	};
	
	reset() {
        this.positionGoal = $V3([0, 0, this.targetDistance]);
        this.positionTarget = $V3([0, 0, 0]);
        this.performMatrix();
	};
	
	
	
	/**
	 * yaw
	 * @param {number} angle
	 */
	yaw(angle) {
		let dir = this.getPositionGoal().subtract(this.getPositionTarget());

        let sphericalCoords = Utils.cartesianToSpherical(dir.normalize());
        let cartesianCoords = Utils.sphericalToCartesian(sphericalCoords.radius, sphericalCoords.lat, sphericalCoords.lng+angle);
		
		this.setPositionGoal(this.getPositionTarget().add(cartesianCoords.x(this.getTargetDistance())));
	};
	
	/**
	 * pitch
	 * @param {number} angle
	 */
	pitch(angle) {
        let dir = this.getPositionGoal().subtract(this.getPositionTarget());

        let sphericalCoords = Utils.cartesianToSpherical(dir.normalize());
        let cartesianCoords = Utils.sphericalToCartesian(sphericalCoords.radius, sphericalCoords.lat+angle, sphericalCoords.lng);
		
		this.setPositionGoal(this.getPositionTarget().add(cartesianCoords.x(this.getTargetDistance()))); 
	};
	
	/**
	 * performMatrix
	 * @private
	 */
	performMatrix() {
        this.mModelMatrix = StormM16.makeLookAt(this.getPositionGoal().e[0], this.getPositionGoal().e[1], this.getPositionGoal().e[2],
												this.getPositionTarget().e[0], this.getPositionTarget().e[1], this.getPositionTarget().e[2],
								    			0, 1, 0);
	};
}
global.ComponentTransformTarget = ComponentTransformTarget;
module.exports.ComponentTransformTarget = ComponentTransformTarget;