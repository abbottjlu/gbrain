import {Constants} from "./Constants";

/**
* @class
* @constructor
*/
export class Stage {
    constructor() {
        this.nodes = [];
        this.activeCamera = null;
        this.selectedNode = null;
        this.paused = false;
        this.backgroundColor = [0.0, 0.0, 0.0, 1.0];
        this.gl = null;
        this._ontick = null;
    }

	/**
	 * setActiveCamera
	 * @param {Node} node
	 */
	setActiveCamera(node) {
        this.activeCamera = node;
	};
	
	/**
	 * getActiveCamera
	 * @returns {Node}
	 */
	getActiveCamera() {
		return this.activeCamera;
	};
	
	/**
	 * setSelectedNode
	 * @param {Node} node
	 */
	setSelectedNode(node) {
        this.selectedNode = node;
	};
	
	/**
	 * getSelectedNode
	 * @returns {Node}
	 */
	getSelectedNode() {
		return this.selectedNode;
	};
	
	/**
	* addNode
	* @param {Node} node.
	*/
	addNode(node) {
        this.nodes.push(node);
		
		node.initialize(((node.getName() != null) ? node.getName() : "node "+(this.nodes.length-1)), this.gl);
	};
	
	/**
	* removeNode
	* @param {Node} node.
	*/
	removeNode(node) {
		for(let n=0; n < this.nodes.length; n++) {
			if(this.nodes[n] === node) {
                this.nodes.splice(n, 1);
				break;
			}
		}
	};
		
	/**
	* getNodes
	* @returns {Array<Node>}
	*/
	getNodes() {
		return this.nodes;
	};
	
	/**
	* render
    * @param {Function} ontick
	*/
	render(ontick) {
        this._ontick = ontick;
        this.paused = false;
		this.setBackgroundColor(this.backgroundColor);
		this.tick();
	};
	
	/**
	* pause
	*/
	pause() {
        this.paused = true;
	};
	
	/**
	* setWebGLContext
	* @param {WebGLRenderingContext} glCtx.
	* @private
	*/
	setWebGLContext(glCtx) {
        this.gl = glCtx;
	};
	
	/**
	* setBackgroundColor
	* @param {Array<number>} color Float4.
	*/
	setBackgroundColor(color) {
        this.backgroundColor = color;
	};
	
	/**
	* getBackgroundColor
	* @returns {Array<number>}
	*/
	getBackgroundColor() {
		return this.backgroundColor;
	};
	
	/**
	* getWebGLContext
	* @returns {WebGLRenderingContext} 
	*/
	getWebGLContext() {
		return this.gl;
	};

	tick() {
		if(this.activeCamera != null) {
            if(this._ontick !== undefined && this._ontick !== null)
                this._ontick();

            let resolution = this.activeCamera.getComponent(Constants.COMPONENT_TYPES.PROJECTION).getResolution();
            this.gl.viewport(0, 0, resolution.width, resolution.height);

            this.gl.clearColor(this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]);
            this.gl.clearDepth(1.0);
			//this.gl.enable(this.gl.DEPTH_TEST);
            //this.gl.enable(this.gl.CULL_FACE);
            //this.gl.cullFace(this.gl.BACK);
            this.gl.depthFunc(this.gl.LEQUAL);

            let comp_camera_gpu = this.activeCamera.getComponent(Constants.COMPONENT_TYPES.GPU);
			if(comp_camera_gpu !== undefined && comp_camera_gpu !== null)
                comp_camera_gpu.gpufG.fillArg("RGB", [this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]]);

			for(let n=0, fn = this.nodes.length; n < fn; n++) {
			    if(this.nodes[n] !== this.activeCamera) {
                    for(let key in this.nodes[n].getComponents()) {
                        let component = this.nodes[n].getComponent(key);

                        if(component.tick != null)
                            component.tick();
                    }

                    if(this.nodes[n].onTick != null)
                        this.nodes[n].onTick();
                }
			}

            for(let n=0, fn = this.nodes.length; n < fn; n++) {
                if(this.nodes[n] !== this.activeCamera) {
                    for(let key in this.nodes[n].getComponents()) {
                        let component = this.nodes[n].getComponent(key);

                        if(component.gpufG != null) {
                            for(let keyB in component.gpufG.vertexFragmentPrograms) {
                                let vfp = component.gpufG.vertexFragmentPrograms[keyB];

                                let ob = WebCLGLUtils.getOutputBuffers(vfp, component.gpufG._argsValues);
                                if(vfp.enabled === true && ob != null) {
                                    component.gpufG._gl.bindFramebuffer(component.gpufG._gl.FRAMEBUFFER, ob[0].fBuffer);
                                    component.gpufG._gl.clear(component.gpufG._gl.DEPTH_BUFFER_BIT);
                                    component.gpufG._gl.bindFramebuffer(component.gpufG._gl.FRAMEBUFFER, ob[0].fBufferTemp);
                                    component.gpufG._gl.clear(component.gpufG._gl.DEPTH_BUFFER_BIT);
                                }
                            }
                        }
                    }
                }
            }

            for(let key in this.activeCamera.getComponents()) {
                let component = this.activeCamera.getComponent(key);

                if(component.tick != null)
                    component.tick();
            }
		}
	};
}
global.Stage = Stage;
module.exports.Stage = Stage;