import {Utils} from "./Utils.class";
import {Constants} from "./Constants";

/**
* @class
* @constructor
*/
export class SystemEvents {
    constructor(sce, target) {
        this._sce = sce;
        this._project = this._sce.getLoadedProject();
        this._target = target;

        this._utils = new Utils();

        this.mousePosX_orig = 0;
        this.mousePosY_orig = 0;
        this.mousePosX = 0;
        this.mousePosY = 0;
        this.mouseOldPosX = 0;
        this.mouseOldPosY = 0;
        this.divPositionX = 0;
        this.divPositionY = 0;
        this.focused = false;
    }

	/**
	 * initialize
	 */
	initialize() {
		document.body.addEventListener("keydown", this.keydownListener.bind(this));
		document.body.addEventListener("keyup", this.keyupListener.bind(this));
        this._target.addEventListener("mousewheel", this.mousewheelListener.bind(this));
        this._target.addEventListener("wheel", this.mousewheelListener.bind(this));

		document.body.addEventListener("mouseup", this.mouseupListener.bind(this), false);
		document.body.addEventListener("touchend", this.mouseupListener.bind(this), false);
        this._target.addEventListener("mousedown", this.mousedownListener.bind(this), false);
        this._target.addEventListener("touchstart", this.mousedownListener.bind(this).bind(this), false);
		document.body.addEventListener("mousemove", this.mousemoveListener.bind(this), false);
		document.body.addEventListener("touchmove", this.mousemoveListener.bind(this), false);

        this._target.addEventListener("mouseover", (function() {
            this.focused = true;
		}).bind(this), false);
        this._target.addEventListener("mouseleave", (function() {
            this.focused = false;
		}).bind(this), false);
	};

	/**
	 * getMousePosition
	 * @returns {{x: int, y: int}}
	 */
	getMousePosition() {
		return {"x": this.mousePosX, "y": this.mousePosY};
	};

    /**
     * updateDivPosition
     * @param {Event} evt
     */
    updateDivPosition(evt) {
        this.divPositionX = Utils.getElementPosition(this._sce.getCanvas()).x;
        this.divPositionY = Utils.getElementPosition(this._sce.getCanvas()).y;

        this.mousePosX = (evt.clientX - this.divPositionX);
        this.mousePosY = (evt.clientY - this.divPositionY);
        this.mousePosX_orig = this.mousePosX;
        this.mousePosY_orig = this.mousePosY;
        this.mouseOldPosX = this.mousePosX;
        this.mouseOldPosY = this.mousePosY;
    };

	/**
	 * @param {int|Constants.COMPONENT_TYPES} componentType
	 * @param {int|Constants.EVENT_TYPES} eventType
	 * @param {Event} evt
	 * @private
	 */
	callComponentEvent(componentType, eventType, evt) {
		if(this._project !== undefined && this._project !== null) {
            let stage = this._project.getActiveStage();
			let comp_projection = stage.getActiveCamera().getComponent(Constants.COMPONENT_TYPES.PROJECTION);
            let dir = null;

			if(eventType === Constants.EVENT_TYPES.MOUSE_DOWN) {
				this.updateDivPosition(evt);
			}
			if(eventType === Constants.EVENT_TYPES.MOUSE_MOVE) {
                this.mouseOldPosX = this.mousePosX;
                this.mouseOldPosY = this.mousePosY;
                this.mousePosX = (evt.clientX - this.divPositionX);
                this.mousePosY = (evt.clientY - this.divPositionY);
				
				dir = $V3([this.mousePosX-this.mousePosX_orig, 0.0, this.mousePosY-this.mousePosY_orig]);
			}
			if(eventType === Constants.EVENT_TYPES.MOUSE_WHEEL) {
                this.updateDivPosition(evt);

                let currFov = comp_projection.getFov();
                let weightX = ((this.mousePosX-(this._sce.getCanvas().width/2.0)) /this._sce.getCanvas().width)*currFov*0.2;
                let weightY = ((this.mousePosY-(this._sce.getCanvas().height/2.0)) /this._sce.getCanvas().height)*currFov*0.2;
				if((evt.wheelDeltaY !== undefined && evt.wheelDeltaY >= 0) || (evt.deltaY !== undefined && evt.deltaY >= 0)) {
					weightX *= -1.0;
					weightY *= -1.0;
				}

                let m = stage.getActiveCamera().getComponent(Constants.COMPONENT_TYPES.TRANSFORM_TARGET).getMatrix();
                let X = m.getLeft().x(weightX);
                let Y = m.getUp().x(weightY);
				dir = X.add(Y);
			}

			for(let n=0, fn = stage.getNodes().length; n < fn; n++) {
				for(let key in stage.getNodes()[n].getComponents()) {
                    let component = stage.getNodes()[n].getComponent(key);
					if(component.type === componentType) {
						if(eventType === Constants.EVENT_TYPES.KEY_DOWN && component._onkeydown != null && this.focused === true)
							component._onkeydown(evt);

						if(eventType === Constants.EVENT_TYPES.KEY_UP && component._onkeyup != null)
							component._onkeyup(evt);

						if(eventType === Constants.EVENT_TYPES.MOUSE_DOWN && component._onmousedown != null)
							component._onmousedown(evt);

						if(eventType === Constants.EVENT_TYPES.MOUSE_UP && component._onmouseup != null)
							component._onmouseup(evt);

						if(eventType === Constants.EVENT_TYPES.MOUSE_MOVE && component._onmousemove != null)
							component._onmousemove(evt, dir);

						if(eventType === Constants.EVENT_TYPES.MOUSE_WHEEL && component._onmousewheel != null)
							component._onmousewheel(evt, dir);
					}
				}
			}
		}
	};

	keydownListener(evt) {
        this.callComponentEvent(Constants.COMPONENT_TYPES.KEYBOARD_EVENTS, Constants.EVENT_TYPES.KEY_DOWN, evt);
	};

	keyupListener(evt) {
        this.callComponentEvent(Constants.COMPONENT_TYPES.KEYBOARD_EVENTS, Constants.EVENT_TYPES.KEY_UP, evt);
	};

	mousedownListener(evt) {
        this.callComponentEvent(Constants.COMPONENT_TYPES.MOUSE_EVENTS, Constants.EVENT_TYPES.MOUSE_DOWN, evt);
	};

	mouseupListener(evt) {
        this.callComponentEvent(Constants.COMPONENT_TYPES.MOUSE_EVENTS, Constants.EVENT_TYPES.MOUSE_UP, evt);
	};

	mousemoveListener(evt) {
        this.callComponentEvent(Constants.COMPONENT_TYPES.MOUSE_EVENTS, Constants.EVENT_TYPES.MOUSE_MOVE, evt);
	};

	mousewheelListener(evt) {
		evt.preventDefault();

        this.callComponentEvent(Constants.COMPONENT_TYPES.MOUSE_EVENTS, Constants.EVENT_TYPES.MOUSE_WHEEL, evt);
	};
}
global.SystemEvents = SystemEvents;
module.exports.SystemEvents = SystemEvents;