/**
* @class
* @constructor
*/
export class ActionHelpers {
    constructor() {
        this.firstColumWidth = "40%";
        this.secondColumWidth = "60%";
    }

	/**
	 * appendStringChild
	 * @param {String} str
	 * @param {HTMLElement} target
	 * @param {String} [location="end"] end or init
	 */
	static appendStringChild(str, target, location) {
		let loc = (location !== undefined && location !== null) ? location : "end";
        let parser = new DOMParser();
        let e = parser.parseFromString(str, "text/html");

		if(loc === "end")
			target.appendChild(e.body.firstChild);
		else
			target.insertBefore(e.body.firstChild, target.firstChild);
	};

	/**
	 * add_btn
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {Function} onClickCallback
	 */
	add_btn(target, name, onClickCallback) {
        let str = ''+
		'<div>'+
			"<button id='BUTTONID_"+name+"' style='width:100%'>"+name+"</button>"+
		'</div>';
		this.constructor.appendStringChild(str, target);

        let e = document.getElementById("BUTTONID_"+name);
		e.addEventListener('click', (function(callback, e) {
			callback(e);
		}).bind(this, onClickCallback, e));
	};

	/**
	 * @callback ActionHelpers~add_valuesAndBtn~onClickCallback
	 * @param {Array<number>} arr
	 */
	/**
	 * add_valuesAndBtn
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {String} type Type for the input (number, text, etc..)
	 * @param {Array<String>} arrayTexts
	 * @param {Array<String|number|int>} arrayDefaultValues
	 * @param {ActionHelpers~add_valuesAndBtn~onClickCallback} onClickCallback
	 */
	add_valuesAndBtn(target, name, type, arrayTexts, arrayDefaultValues, onClickCallback) {
        let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';vertical-align:top;overflow:hidden;">'+
				"<button id='BUTTONID_"+name+"' style='width:100%'>"+name+"</button>"+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">';
				for(let n=0; n < arrayTexts.length; n++) {
					str += '<input type="'+type+'" id="INPUTID_'+name+'_'+arrayTexts[n]+'" step="'+(arrayDefaultValues[n]/20)+'" value="'+arrayDefaultValues[n]+'" title="'+arrayTexts[n]+'" style="width:'+((100/arrayTexts.length)-1)+'%"/>';
				}
			str += "</div>"+
		'</div>';
        this.constructor.appendStringChild(str, target);

        let e = document.getElementById("BUTTONID_"+name);
		e.addEventListener('click', (function(callback) {
            let arrayValues = [];
			for(let n=0; n < arrayTexts.length; n++) {
				arrayValues.push(document.querySelector('#INPUTID_'+name+'_'+arrayTexts[n]).innerHTML);
			}
			callback(arrayValues);
		}).bind(this, onClickCallback));
	};

	/**
	 * add_checkbox
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {int|boolean} variable
	 * @param {Function} checkCallback
	 * @param {Function} uncheckCallback
	 */
	add_checkbox(target, name, variable, checkCallback, uncheckCallback) {
		let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';vertical-align:top;overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				'<input type="checkbox" id="INPUTID_'+name+'" />'+
			'</div>'+
		'</div>';
        this.constructor.appendStringChild(str, target);

        let e = document.getElementById("INPUTID_"+name);
        e.checked = (variable === true || variable === 1);

		e.addEventListener("click", (function(checkCall, uncheckCall, e) {
			if(e.checked === false) {
				uncheckCall();
			} else {
				checkCall();
			}
		}).bind(this, checkCallback, uncheckCallback, e));
	};

	/**
	 * add_select
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {Array<String>} valuesArray
	 * @param {String} variable
	 * @param {Function} selectCallback
	 */
	add_select(target, name, valuesArray, variable, selectCallback) {
		let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';vertical-align:top;overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				'<select id="SELECTID_'+name+'" style="width:100%">';
			for(let n=0; n < valuesArray.length; n++) {
                let isSelected = "";
				if(variable === valuesArray[n])
					isSelected = "selected='selected'";

				str += "<option value='"+valuesArray[n]+"' "+isSelected+">"+valuesArray[n]+"</option>";
			}
			str += '</select>'+
			'</div>'+
		'</div>';
        this.constructor.appendStringChild(str, target);

        let e = document.getElementById("SELECTID_"+name);
		e.addEventListener("change", (function(callback, e) {
			callback(e.options[e.selectedIndex].value);
		}).bind(this, selectCallback, e));
	};

	/**
	 * add_slider
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {number} fvalue
	 * @param {number} min
	 * @param {number} max
	 * @param {number} steps
	 * @param {Function} onChangeCallback
	 */
	add_slider(target, name, fvalue, min, max, steps, onChangeCallback) {
		let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';vertical-align:top;overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				'<input id="INPUTID_'+name+'X" type="number" 		min="'+min+'" max="'+max+'" step="'+steps+'" value="'+fvalue+'" style="vertical-align:middle;width:20%">'+
				'<input id="INPUTID_'+name+'X_slider" type="range" 	min="'+min+'" max="'+max+'" step="'+steps+'" value="'+fvalue+'" style="vertical-align:middle;width:78%">'+
			'</div>'+
		'</div>';
        this.constructor.appendStringChild(str, target);

        let exec_call = function(callback, e) {
            let value = document.getElementById("INPUTID_"+name+"X").value;
			callback(parseFloat(value));
		};

		// spinners
        let set_spinner = function(callback, e) {
			e.nextSibling.value = parseFloat(e.value).toFixed(3);

			exec_call(callback, e);
		};

        let e = document.getElementById("INPUTID_"+name+"X");
		e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("click", set_spinner.bind(this, onChangeCallback, e));


		// range elements
        let set_range = function(callback, e) {
			e.previousSibling.value = parseFloat(e.value).toFixed(3);

			exec_call(callback, e);
		};

        e = document.getElementById("INPUTID_"+name+"X_slider");
		e.addEventListener("input", set_range.bind(this, onChangeCallback, e));
	};

	/**
	 * add_3dslider
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {Array<number>} array3f Three float values
	 * @param {number} min
	 * @param {number} max
	 * @param {number} steps
	 * @param {Function} onChangeCallback
	 */
	add_3dslider(target, name, array3f, min, max, steps, onChangeCallback) {
		let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';vertical-align:top;overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				'<input id="INPUTID_'+name+'X" type="number" 		min="'+min+'" max="'+max+'" step="'+steps+'" value="'+array3f[0]+'" style="background:red;color:#FFF;vertical-align:middle;width:20%">'+
				'<input id="INPUTID_'+name+'X_slider" type="range" 	min="'+min+'" max="'+max+'" step="'+steps+'" value="'+array3f[0]+'" style="background:red;color:#FFF;vertical-align:middle;width:78%">'+

				'<input id="INPUTID_'+name+'Y" type="number" 		min="'+min+'" max="'+max+'" step="'+steps+'" value="'+array3f[1]+'" style="background:green;color:#FFF;vertical-align:middle;width:20%">'+
				'<input id="INPUTID_'+name+'Y_slider" type="range" 	min="'+min+'" max="'+max+'" step="'+steps+'" value="'+array3f[1]+'" style="background:green;color:#FFF;vertical-align:middle;width:78%">'+

				'<input id="INPUTID_'+name+'Z" type="number" 		min="'+min+'" max="'+max+'" step="'+steps+'" value="'+array3f[2]+'" style="background:blue;color:#FFF;vertical-align:middle;width:20%">'+
				'<input id="INPUTID_'+name+'Z_slider" type="range" 	min="'+min+'" max="'+max+'" step="'+steps+'" value="'+array3f[2]+'" style="background:blue;color:#FFF;vertical-align:middle;width:78%">'+
			'</div>'+
		'</div>';
        this.constructor.appendStringChild(str, target);

        let exec_call = function(callback, e) {
            let vector = [parseFloat(document.getElementById("INPUTID_"+name+"X").value), parseFloat(document.getElementById("INPUTID_"+name+"Y").value), parseFloat(document.getElementById("INPUTID_"+name+"Z").value)];
			callback(vector);
		};

		// spinners
        let set_spinner = function(callback, e) {
			e.nextSibling.value = parseFloat(e.value).toFixed(3);

			exec_call(callback, e);
		};

        let e = document.getElementById("INPUTID_"+name+"X");
		e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("click", set_spinner.bind(this, onChangeCallback, e));

        e = document.getElementById("INPUTID_"+name+"Y");
		e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));

        e = document.getElementById("INPUTID_"+name+"Z");
		e.addEventListener("mousewheel", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keydown", set_spinner.bind(this, onChangeCallback, e));
		e.addEventListener("keyup", set_spinner.bind(this, onChangeCallback, e));


		// range elements
        let set_range = function(callback, e) {
			e.previousSibling.value = parseFloat(e.value).toFixed(3);

			exec_call(callback, e);
		};

        e = document.getElementById("INPUTID_"+name+"X_slider");
		e.addEventListener("change", set_range.bind(this, onChangeCallback, e));

        e = document.getElementById("INPUTID_"+name+"Y_slider");
		e.addEventListener("change", set_range.bind(this, onChangeCallback, e));

        e = document.getElementById("INPUTID_"+name+"Z_slider");
		e.addEventListener("change", set_range.bind(this, onChangeCallback, e));
	};

	/**
	 * add_colorpicker
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {String} hexVariable
	 * @param {Function} onChangeCallback
	 */
	add_colorpicker(target, name, hexVariable, onChangeCallback) {
        let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				'<input type="color" id="INPUTID_'+name+'" value="'+hexVariable+'" style="width:100%">'+
			'</div>'+
		'</div>';
        this.constructor.appendStringChild(str, target);

        let e = document.getElementById("INPUTID_"+name);
		e.addEventListener("change", (function(callback, e) {
			callback(e.value);
		}).bind(this, onChangeCallback, e));
	};

	/**
	 * @callback ActionHelpers~add_imageSelection~onChangeCallback
	 * @param {HTMLImageElement} img
	 */
	/**
	 * add_imageSelection
	 * @param {HTMLElement} target
	 * @param {String} name
	 * @param {ActionHelpers~add_imageSelection~onChangeCallback} onChangeCallback
	 */
	add_imageSelection(target, name, onChangeCallback) {
        let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				"<input id='INPUTID_"+name+"' type='file' style='display:none'/>"+
				"<div id='DIVID_"+name+"' onclick='$(this).prev().click();' style='cursor:pointer;width:16px;height:16px;border:1px solid #FFF'></div>"+
			"</div>"+
		'</div>';
        this.constructor.appendStringChild(str, target);

		document.getElementById('INPUTID_'+name).onchange = function() {
            let filereader = new FileReader();
			filereader.onload = function(event) {
                let img = new Image();
				img.onload = function() {
                    let splitName = document.querySelector('#INPUTID_'+name).val().split('/');
					splitName = splitName[splitName.length-1];
					//img.style.width = '16px';
					//img.style.height = '16px';
                    document.querySelector('#DIVID_'+name).appendChild(img);
                    document.querySelector('#DIVID_'+name).setAttribute('title',splitName);

					onChangeCallback(img);
				};
				img.src = event.target.result; // Set src from upload, original byte sequence
			};
			filereader.readAsDataURL(this.files[0]);
		};
	};

    /**
     * @callback ActionHelpers~add_fileSelection~onChangeCallback
     * @param {File} file
     */
    /**
     * add_fileSelection
     * @param {HTMLElement} target
     * @param {String} name
     * @param {ActionHelpers~add_fileSelection~onChangeCallback} onChangeCallback
     */
    add_fileSelection(target, name, onChangeCallback) {
        let str = ''+
		'<div>'+
			'<div style="display:inline-block;width:'+this.firstColumWidth+';overflow:hidden;">'+
				name+
			'</div>'+
			'<div style="display:inline-block;width:'+this.secondColumWidth+';">'+
				"<input id='INPUTID_"+name+"' type='file' style='display:none'/>"+
				"<div id='DIVID_"+name+"' onclick='$(this).prev().click();' style='cursor:pointer;width:16px;height:16px;border:1px solid #FFF'></div>"+
			"</div>"+
		'</div>';
        this.constructor.appendStringChild(str, target);

        document.getElementById('INPUTID_'+name).onchange = function() {
            onChangeCallback(this.files[0]);
        };
    };
}
global.ActionHelpers = ActionHelpers;
module.exports.ActionHelpers = ActionHelpers;