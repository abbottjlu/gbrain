import {ComponentTransform} from "../../ComponentTransform.class";
import {Component_GPU} from "../../Component_GPU.class";
import {VFP_RGB} from "../../VFP_RGB.class";
import {Constants} from "../../Constants";

/**
* @class
*/
export class SimpleNode {
    constructor(sce) {
        this._sce = sce;
        this._project = this._sce.getLoadedProject();

        this.node = new Node();
        this._project.getActiveStage().addNode(this.node);

        this._mesh = null;

        // ComponentTransform
        let comp_transform = new ComponentTransform();
        this.node.addComponent(comp_transform);

        // Component_GPU
        this.comp_renderer = new Component_GPU();
        this.node.addComponent(this.comp_renderer);
    }

	/**
	* setMesh
	* @param {Mesh} mesh
	*/
	setMesh(mesh) {
        this._mesh = mesh;

        this.comp_renderer.setGPUFor( this.comp_renderer.gl,
                                {   "float4*attr vertexPos": () => {return this._mesh.vertexArray;},
                                    "float4*attr vertexNormal": () => {return this._mesh.normalArray;},
                                    "float4*attr vertexTexture": () => {return this._mesh.textureArray;},
                                    "float*attr vertexTextureUnit": () => {return this._mesh.textureUnitArray;},
                                    "indices": () => {return this._mesh.indexArray;},
                                    "mat4 PMatrix": () => {return this._project.getActiveStage().getActiveCamera().getComponent(Constants.COMPONENT_TYPES.PROJECTION).getMatrix().transpose().e;},
                                    "mat4 cameraWMatrix": () => {return this._project.getActiveStage().getActiveCamera().getComponent(Constants.COMPONENT_TYPES.TRANSFORM_TARGET).getMatrix().transpose().e;},
                                    "mat4 nodeWMatrix": () => {return this.node.getComponent(Constants.COMPONENT_TYPES.TRANSFORM).getMatrixPosition().transpose().e;},
                                    'float nodesSize': () => {return 30.0;},
                                    'float4* texAlbedo': () => {return this._mesh.vertexArray;}
                                    },
                                {"type": "GRAPHIC",
                                "config": new VFP_RGB(1).getSrc(),
                                "drawMode": 4,
                                "depthTest": true,
                                "blend": true,
                                "blendEquation": Constants.BLENDING_EQUATION_TYPES.FUNC_ADD,
                                "blendSrcMode": Constants.BLENDING_MODES.SRC_ALPHA,
                                "blendDstMode": Constants.BLENDING_MODES.ONE_MINUS_SRC_ALPHA});
        this.comp_renderer.setArgUpdatable("PMatrix", true);
        this.comp_renderer.setArgUpdatable("cameraWMatrix", true);
        this.comp_renderer.setArgUpdatable("nodeWMatrix", true);
        this.comp_renderer.getComponentBufferArg("RGB", this._project.getActiveStage().getActiveCamera().getComponent(Constants.COMPONENT_TYPES.GPU));
        this.comp_renderer.gpufG.onPreProcessGraphic(0, () => {
            //this.comp_renderer.gl.clear(this.comp_renderer.gl.COLOR_BUFFER_BIT | this.comp_renderer.gl.DEPTH_BUFFER_BIT);
        });
	};

	/**
	* setImage
	* @param {String} url
	*/
	setImage(url) {
		let image = new Image();
		image.onload = () => {
            this.comp_renderer.setArg("texAlbedo", () => {return image;});
		};
		image.src = url;
	};
}
global.SimpleNode = SimpleNode;
module.exports.SimpleNode = SimpleNode;